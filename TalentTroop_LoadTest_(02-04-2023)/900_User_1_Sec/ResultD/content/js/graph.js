/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2293.0, "minX": 0.0, "maxY": 45085.0, "series": [{"data": [[0.0, 2293.0], [0.1, 2293.0], [0.2, 2786.0], [0.3, 2788.0], [0.4, 2788.0], [0.5, 2792.0], [0.6, 2792.0], [0.7, 2793.0], [0.8, 2794.0], [0.9, 2795.0], [1.0, 2795.0], [1.1, 2795.0], [1.2, 2796.0], [1.3, 2796.0], [1.4, 2796.0], [1.5, 2797.0], [1.6, 2798.0], [1.7, 2800.0], [1.8, 2803.0], [1.9, 2805.0], [2.0, 2805.0], [2.1, 2805.0], [2.2, 2806.0], [2.3, 2807.0], [2.4, 2808.0], [2.5, 2810.0], [2.6, 2816.0], [2.7, 2836.0], [2.8, 3364.0], [2.9, 3380.0], [3.0, 3380.0], [3.1, 3381.0], [3.2, 3382.0], [3.3, 3384.0], [3.4, 3385.0], [3.5, 3385.0], [3.6, 3390.0], [3.7, 3390.0], [3.8, 3390.0], [3.9, 3391.0], [4.0, 3391.0], [4.1, 3391.0], [4.2, 3392.0], [4.3, 3392.0], [4.4, 3392.0], [4.5, 3393.0], [4.6, 3394.0], [4.7, 3395.0], [4.8, 3395.0], [4.9, 3396.0], [5.0, 3397.0], [5.1, 3397.0], [5.2, 3398.0], [5.3, 3399.0], [5.4, 3399.0], [5.5, 3399.0], [5.6, 3399.0], [5.7, 3400.0], [5.8, 3401.0], [5.9, 3401.0], [6.0, 3403.0], [6.1, 3403.0], [6.2, 3404.0], [6.3, 3404.0], [6.4, 3404.0], [6.5, 3405.0], [6.6, 3405.0], [6.7, 3406.0], [6.8, 3406.0], [6.9, 3406.0], [7.0, 3406.0], [7.1, 3406.0], [7.2, 3407.0], [7.3, 3407.0], [7.4, 3409.0], [7.5, 3409.0], [7.6, 3412.0], [7.7, 3412.0], [7.8, 3412.0], [7.9, 3412.0], [8.0, 3413.0], [8.1, 3413.0], [8.2, 3413.0], [8.3, 3413.0], [8.4, 3414.0], [8.5, 3414.0], [8.6, 3415.0], [8.7, 3415.0], [8.8, 3415.0], [8.9, 3415.0], [9.0, 3416.0], [9.1, 3416.0], [9.2, 3416.0], [9.3, 3416.0], [9.4, 3417.0], [9.5, 3417.0], [9.6, 3418.0], [9.7, 3418.0], [9.8, 3419.0], [9.9, 3421.0], [10.0, 3421.0], [10.1, 3421.0], [10.2, 3421.0], [10.3, 3421.0], [10.4, 3422.0], [10.5, 3422.0], [10.6, 3423.0], [10.7, 3423.0], [10.8, 3423.0], [10.9, 3423.0], [11.0, 3424.0], [11.1, 3424.0], [11.2, 3424.0], [11.3, 3425.0], [11.4, 3425.0], [11.5, 3426.0], [11.6, 3426.0], [11.7, 3426.0], [11.8, 3426.0], [11.9, 3426.0], [12.0, 3427.0], [12.1, 3427.0], [12.2, 3427.0], [12.3, 3427.0], [12.4, 3427.0], [12.5, 3428.0], [12.6, 3428.0], [12.7, 3429.0], [12.8, 3429.0], [12.9, 3430.0], [13.0, 3430.0], [13.1, 3430.0], [13.2, 3430.0], [13.3, 3430.0], [13.4, 3431.0], [13.5, 3431.0], [13.6, 3432.0], [13.7, 3432.0], [13.8, 3433.0], [13.9, 3433.0], [14.0, 3434.0], [14.1, 3434.0], [14.2, 3435.0], [14.3, 3435.0], [14.4, 3435.0], [14.5, 3436.0], [14.6, 3436.0], [14.7, 3437.0], [14.8, 3438.0], [14.9, 3438.0], [15.0, 3439.0], [15.1, 3439.0], [15.2, 3440.0], [15.3, 3440.0], [15.4, 3441.0], [15.5, 3441.0], [15.6, 3441.0], [15.7, 3443.0], [15.8, 3443.0], [15.9, 3445.0], [16.0, 3446.0], [16.1, 3446.0], [16.2, 3448.0], [16.3, 3450.0], [16.4, 3508.0], [16.5, 3512.0], [16.6, 3516.0], [16.7, 3516.0], [16.8, 3517.0], [16.9, 3522.0], [17.0, 3522.0], [17.1, 3522.0], [17.2, 3523.0], [17.3, 3523.0], [17.4, 3535.0], [17.5, 3536.0], [17.6, 40177.0], [17.7, 40312.0], [17.8, 40466.0], [17.9, 40528.0], [18.0, 40668.0], [18.1, 40668.0], [18.2, 40738.0], [18.3, 40872.0], [18.4, 40937.0], [18.5, 41000.0], [18.6, 41020.0], [18.7, 41109.0], [18.8, 41195.0], [18.9, 41207.0], [19.0, 41292.0], [19.1, 41292.0], [19.2, 41333.0], [19.3, 41368.0], [19.4, 41417.0], [19.5, 41428.0], [19.6, 41437.0], [19.7, 41441.0], [19.8, 41442.0], [19.9, 41446.0], [20.0, 41449.0], [20.1, 41449.0], [20.2, 41449.0], [20.3, 41452.0], [20.4, 41452.0], [20.5, 41454.0], [20.6, 41456.0], [20.7, 41457.0], [20.8, 41460.0], [20.9, 41460.0], [21.0, 41462.0], [21.1, 41462.0], [21.2, 41464.0], [21.3, 41465.0], [21.4, 41465.0], [21.5, 41465.0], [21.6, 41465.0], [21.7, 41466.0], [21.8, 41468.0], [21.9, 41469.0], [22.0, 41470.0], [22.1, 41470.0], [22.2, 41472.0], [22.3, 41473.0], [22.4, 41474.0], [22.5, 41476.0], [22.6, 41477.0], [22.7, 41477.0], [22.8, 41478.0], [22.9, 41478.0], [23.0, 41479.0], [23.1, 41479.0], [23.2, 41484.0], [23.3, 41484.0], [23.4, 41484.0], [23.5, 41484.0], [23.6, 41486.0], [23.7, 41487.0], [23.8, 41489.0], [23.9, 41490.0], [24.0, 41491.0], [24.1, 41491.0], [24.2, 41492.0], [24.3, 41493.0], [24.4, 41493.0], [24.5, 41494.0], [24.6, 41495.0], [24.7, 41495.0], [24.8, 41496.0], [24.9, 41498.0], [25.0, 41499.0], [25.1, 41499.0], [25.2, 41500.0], [25.3, 41501.0], [25.4, 41502.0], [25.5, 41502.0], [25.6, 41504.0], [25.7, 41510.0], [25.8, 41513.0], [25.9, 41513.0], [26.0, 41518.0], [26.1, 41518.0], [26.2, 41519.0], [26.3, 41519.0], [26.4, 41521.0], [26.5, 41522.0], [26.6, 41531.0], [26.7, 41531.0], [26.8, 41535.0], [26.9, 41536.0], [27.0, 41537.0], [27.1, 41537.0], [27.2, 41537.0], [27.3, 41537.0], [27.4, 41538.0], [27.5, 41538.0], [27.6, 41538.0], [27.7, 41540.0], [27.8, 41541.0], [27.9, 41542.0], [28.0, 41545.0], [28.1, 41545.0], [28.2, 41546.0], [28.3, 41547.0], [28.4, 41547.0], [28.5, 41548.0], [28.6, 41549.0], [28.7, 41553.0], [28.8, 41555.0], [28.9, 41556.0], [29.0, 41556.0], [29.1, 41556.0], [29.2, 41556.0], [29.3, 41559.0], [29.4, 41561.0], [29.5, 41561.0], [29.6, 41562.0], [29.7, 41562.0], [29.8, 41563.0], [29.9, 41563.0], [30.0, 41563.0], [30.1, 41563.0], [30.2, 41563.0], [30.3, 41565.0], [30.4, 41565.0], [30.5, 41566.0], [30.6, 41566.0], [30.7, 41567.0], [30.8, 41568.0], [30.9, 41570.0], [31.0, 41573.0], [31.1, 41573.0], [31.2, 41573.0], [31.3, 41574.0], [31.4, 41574.0], [31.5, 41575.0], [31.6, 41577.0], [31.7, 41577.0], [31.8, 41578.0], [31.9, 41581.0], [32.0, 41582.0], [32.1, 41582.0], [32.2, 41582.0], [32.3, 41583.0], [32.4, 41583.0], [32.5, 41587.0], [32.6, 41588.0], [32.7, 41589.0], [32.8, 41591.0], [32.9, 41592.0], [33.0, 41594.0], [33.1, 41594.0], [33.2, 41594.0], [33.3, 41594.0], [33.4, 41597.0], [33.5, 41598.0], [33.6, 41598.0], [33.7, 41599.0], [33.8, 41599.0], [33.9, 41601.0], [34.0, 41601.0], [34.1, 41601.0], [34.2, 41602.0], [34.3, 41604.0], [34.4, 41604.0], [34.5, 41605.0], [34.6, 41605.0], [34.7, 41606.0], [34.8, 41607.0], [34.9, 41607.0], [35.0, 41610.0], [35.1, 41610.0], [35.2, 41610.0], [35.3, 41611.0], [35.4, 41611.0], [35.5, 41613.0], [35.6, 41614.0], [35.7, 41616.0], [35.8, 41617.0], [35.9, 41619.0], [36.0, 41620.0], [36.1, 41620.0], [36.2, 41620.0], [36.3, 41621.0], [36.4, 41622.0], [36.5, 41623.0], [36.6, 41623.0], [36.7, 41624.0], [36.8, 41630.0], [36.9, 41631.0], [37.0, 41631.0], [37.1, 41631.0], [37.2, 41634.0], [37.3, 41636.0], [37.4, 41637.0], [37.5, 41640.0], [37.6, 41640.0], [37.7, 41642.0], [37.8, 41645.0], [37.9, 41645.0], [38.0, 41646.0], [38.1, 41646.0], [38.2, 41647.0], [38.3, 41648.0], [38.4, 41651.0], [38.5, 41652.0], [38.6, 41653.0], [38.7, 41654.0], [38.8, 41655.0], [38.9, 41657.0], [39.0, 41657.0], [39.1, 41658.0], [39.2, 41658.0], [39.3, 41665.0], [39.4, 41665.0], [39.5, 41666.0], [39.6, 41666.0], [39.7, 41669.0], [39.8, 41670.0], [39.9, 41670.0], [40.0, 41670.0], [40.1, 41671.0], [40.2, 41672.0], [40.3, 41672.0], [40.4, 41672.0], [40.5, 41674.0], [40.6, 41674.0], [40.7, 41674.0], [40.8, 41675.0], [40.9, 41675.0], [41.0, 41675.0], [41.1, 41675.0], [41.2, 41679.0], [41.3, 41681.0], [41.4, 41682.0], [41.5, 41682.0], [41.6, 41683.0], [41.7, 41683.0], [41.8, 41684.0], [41.9, 41684.0], [42.0, 41684.0], [42.1, 41685.0], [42.2, 41686.0], [42.3, 41686.0], [42.4, 41690.0], [42.5, 41690.0], [42.6, 41690.0], [42.7, 41692.0], [42.8, 41692.0], [42.9, 41693.0], [43.0, 41693.0], [43.1, 41693.0], [43.2, 41695.0], [43.3, 41695.0], [43.4, 41698.0], [43.5, 41702.0], [43.6, 41702.0], [43.7, 41702.0], [43.8, 41702.0], [43.9, 41705.0], [44.0, 41705.0], [44.1, 41709.0], [44.2, 41710.0], [44.3, 41713.0], [44.4, 41713.0], [44.5, 41714.0], [44.6, 41715.0], [44.7, 41715.0], [44.8, 41716.0], [44.9, 41717.0], [45.0, 41717.0], [45.1, 41717.0], [45.2, 41718.0], [45.3, 41718.0], [45.4, 41718.0], [45.5, 41718.0], [45.6, 41723.0], [45.7, 41725.0], [45.8, 41727.0], [45.9, 41729.0], [46.0, 41729.0], [46.1, 41732.0], [46.2, 41734.0], [46.3, 41736.0], [46.4, 41737.0], [46.5, 41738.0], [46.6, 41739.0], [46.7, 41740.0], [46.8, 41741.0], [46.9, 41741.0], [47.0, 41741.0], [47.1, 41742.0], [47.2, 41744.0], [47.3, 41746.0], [47.4, 41746.0], [47.5, 41747.0], [47.6, 41747.0], [47.7, 41748.0], [47.8, 41748.0], [47.9, 41748.0], [48.0, 41748.0], [48.1, 41749.0], [48.2, 41751.0], [48.3, 41753.0], [48.4, 41754.0], [48.5, 41754.0], [48.6, 41755.0], [48.7, 41756.0], [48.8, 41756.0], [48.9, 41757.0], [49.0, 41757.0], [49.1, 41759.0], [49.2, 41762.0], [49.3, 41762.0], [49.4, 41764.0], [49.5, 41765.0], [49.6, 41766.0], [49.7, 41766.0], [49.8, 41767.0], [49.9, 41769.0], [50.0, 41769.0], [50.1, 41769.0], [50.2, 41769.0], [50.3, 41769.0], [50.4, 41770.0], [50.5, 41771.0], [50.6, 41771.0], [50.7, 41774.0], [50.8, 41774.0], [50.9, 41775.0], [51.0, 41775.0], [51.1, 41775.0], [51.2, 41775.0], [51.3, 41777.0], [51.4, 41777.0], [51.5, 41781.0], [51.6, 41783.0], [51.7, 41783.0], [51.8, 41785.0], [51.9, 41785.0], [52.0, 41785.0], [52.1, 41786.0], [52.2, 41786.0], [52.3, 41787.0], [52.4, 41788.0], [52.5, 41790.0], [52.6, 41790.0], [52.7, 41793.0], [52.8, 41793.0], [52.9, 41794.0], [53.0, 41794.0], [53.1, 41795.0], [53.2, 41798.0], [53.3, 41799.0], [53.4, 41799.0], [53.5, 41800.0], [53.6, 41800.0], [53.7, 41801.0], [53.8, 41804.0], [53.9, 41805.0], [54.0, 41805.0], [54.1, 41805.0], [54.2, 41806.0], [54.3, 41806.0], [54.4, 41808.0], [54.5, 41809.0], [54.6, 41813.0], [54.7, 41813.0], [54.8, 41814.0], [54.9, 41816.0], [55.0, 41816.0], [55.1, 41816.0], [55.2, 41817.0], [55.3, 41819.0], [55.4, 41819.0], [55.5, 41819.0], [55.6, 41820.0], [55.7, 41823.0], [55.8, 41823.0], [55.9, 41823.0], [56.0, 41823.0], [56.1, 41824.0], [56.2, 41825.0], [56.3, 41829.0], [56.4, 41830.0], [56.5, 41833.0], [56.6, 41833.0], [56.7, 41834.0], [56.8, 41835.0], [56.9, 41835.0], [57.0, 41835.0], [57.1, 41836.0], [57.2, 41836.0], [57.3, 41837.0], [57.4, 41839.0], [57.5, 41840.0], [57.6, 41840.0], [57.7, 41841.0], [57.8, 41844.0], [57.9, 41844.0], [58.0, 41844.0], [58.1, 41844.0], [58.2, 41844.0], [58.3, 41845.0], [58.4, 41848.0], [58.5, 41850.0], [58.6, 41850.0], [58.7, 41851.0], [58.8, 41851.0], [58.9, 41851.0], [59.0, 41851.0], [59.1, 41852.0], [59.2, 41853.0], [59.3, 41855.0], [59.4, 41855.0], [59.5, 41857.0], [59.6, 41857.0], [59.7, 41857.0], [59.8, 41859.0], [59.9, 41860.0], [60.0, 41860.0], [60.1, 41861.0], [60.2, 41863.0], [60.3, 41863.0], [60.4, 41865.0], [60.5, 41865.0], [60.6, 41866.0], [60.7, 41867.0], [60.8, 41868.0], [60.9, 41869.0], [61.0, 41869.0], [61.1, 41870.0], [61.2, 41870.0], [61.3, 41870.0], [61.4, 41871.0], [61.5, 41872.0], [61.6, 41874.0], [61.7, 41875.0], [61.8, 41877.0], [61.9, 41878.0], [62.0, 41878.0], [62.1, 41878.0], [62.2, 41878.0], [62.3, 41879.0], [62.4, 41880.0], [62.5, 41880.0], [62.6, 41882.0], [62.7, 41883.0], [62.8, 41883.0], [62.9, 41883.0], [63.0, 41883.0], [63.1, 41883.0], [63.2, 41884.0], [63.3, 41884.0], [63.4, 41886.0], [63.5, 41887.0], [63.6, 41887.0], [63.7, 41888.0], [63.8, 41891.0], [63.9, 41892.0], [64.0, 41892.0], [64.1, 41894.0], [64.2, 41894.0], [64.3, 41896.0], [64.4, 41896.0], [64.5, 41897.0], [64.6, 41897.0], [64.7, 41898.0], [64.8, 41899.0], [64.9, 41900.0], [65.0, 41900.0], [65.1, 41901.0], [65.2, 41902.0], [65.3, 41902.0], [65.4, 41903.0], [65.5, 41905.0], [65.6, 41907.0], [65.7, 41908.0], [65.8, 41910.0], [65.9, 41914.0], [66.0, 41914.0], [66.1, 41915.0], [66.2, 41916.0], [66.3, 41919.0], [66.4, 41920.0], [66.5, 41920.0], [66.6, 41921.0], [66.7, 41921.0], [66.8, 41921.0], [66.9, 41924.0], [67.0, 41924.0], [67.1, 41924.0], [67.2, 41924.0], [67.3, 41925.0], [67.4, 41926.0], [67.5, 41929.0], [67.6, 41931.0], [67.7, 41933.0], [67.8, 41933.0], [67.9, 41933.0], [68.0, 41933.0], [68.1, 41936.0], [68.2, 41936.0], [68.3, 41937.0], [68.4, 41938.0], [68.5, 41938.0], [68.6, 41939.0], [68.7, 41941.0], [68.8, 41942.0], [68.9, 41943.0], [69.0, 41943.0], [69.1, 41943.0], [69.2, 41943.0], [69.3, 41946.0], [69.4, 41948.0], [69.5, 41950.0], [69.6, 41952.0], [69.7, 41957.0], [69.8, 41959.0], [69.9, 41961.0], [70.0, 41961.0], [70.1, 41961.0], [70.2, 41961.0], [70.3, 41965.0], [70.4, 41966.0], [70.5, 41968.0], [70.6, 41968.0], [70.7, 41968.0], [70.8, 41969.0], [70.9, 41970.0], [71.0, 41970.0], [71.1, 41971.0], [71.2, 41972.0], [71.3, 41973.0], [71.4, 41973.0], [71.5, 41973.0], [71.6, 41973.0], [71.7, 41974.0], [71.8, 41976.0], [71.9, 41978.0], [72.0, 41978.0], [72.1, 41981.0], [72.2, 41981.0], [72.3, 41986.0], [72.4, 41987.0], [72.5, 41987.0], [72.6, 41991.0], [72.7, 41991.0], [72.8, 41993.0], [72.9, 41993.0], [73.0, 41993.0], [73.1, 41994.0], [73.2, 41995.0], [73.3, 41997.0], [73.4, 41997.0], [73.5, 41999.0], [73.6, 41999.0], [73.7, 42000.0], [73.8, 42003.0], [73.9, 42004.0], [74.0, 42004.0], [74.1, 42005.0], [74.2, 42005.0], [74.3, 42009.0], [74.4, 42009.0], [74.5, 42010.0], [74.6, 42010.0], [74.7, 42011.0], [74.8, 42011.0], [74.9, 42014.0], [75.0, 42014.0], [75.1, 42014.0], [75.2, 42016.0], [75.3, 42016.0], [75.4, 42016.0], [75.5, 42017.0], [75.6, 42018.0], [75.7, 42019.0], [75.8, 42019.0], [75.9, 42021.0], [76.0, 42021.0], [76.1, 42022.0], [76.2, 42022.0], [76.3, 42023.0], [76.4, 42024.0], [76.5, 42024.0], [76.6, 42026.0], [76.7, 42027.0], [76.8, 42028.0], [76.9, 42028.0], [77.0, 42028.0], [77.1, 42033.0], [77.2, 42036.0], [77.3, 42036.0], [77.4, 42036.0], [77.5, 42038.0], [77.6, 42038.0], [77.7, 42039.0], [77.8, 42039.0], [77.9, 42041.0], [78.0, 42041.0], [78.1, 42044.0], [78.2, 42049.0], [78.3, 42052.0], [78.4, 42054.0], [78.5, 42055.0], [78.6, 42058.0], [78.7, 42059.0], [78.8, 42060.0], [78.9, 42063.0], [79.0, 42063.0], [79.1, 42063.0], [79.2, 42064.0], [79.3, 42066.0], [79.4, 42069.0], [79.5, 42071.0], [79.6, 42071.0], [79.7, 42072.0], [79.8, 42072.0], [79.9, 42075.0], [80.0, 42075.0], [80.1, 42075.0], [80.2, 42076.0], [80.3, 42079.0], [80.4, 42080.0], [80.5, 42081.0], [80.6, 42081.0], [80.7, 42082.0], [80.8, 42082.0], [80.9, 42083.0], [81.0, 42083.0], [81.1, 42084.0], [81.2, 42085.0], [81.3, 42088.0], [81.4, 42090.0], [81.5, 42090.0], [81.6, 42090.0], [81.7, 42091.0], [81.8, 42092.0], [81.9, 42092.0], [82.0, 42092.0], [82.1, 42094.0], [82.2, 42095.0], [82.3, 42095.0], [82.4, 42096.0], [82.5, 42097.0], [82.6, 42098.0], [82.7, 42098.0], [82.8, 42099.0], [82.9, 42100.0], [83.0, 42100.0], [83.1, 42101.0], [83.2, 42101.0], [83.3, 42102.0], [83.4, 42104.0], [83.5, 42104.0], [83.6, 42104.0], [83.7, 42104.0], [83.8, 42105.0], [83.9, 42106.0], [84.0, 42106.0], [84.1, 42109.0], [84.2, 42109.0], [84.3, 42109.0], [84.4, 42109.0], [84.5, 42113.0], [84.6, 42114.0], [84.7, 42114.0], [84.8, 42114.0], [84.9, 42116.0], [85.0, 42116.0], [85.1, 42117.0], [85.2, 42118.0], [85.3, 42118.0], [85.4, 42120.0], [85.5, 42122.0], [85.6, 42122.0], [85.7, 42126.0], [85.8, 42128.0], [85.9, 42130.0], [86.0, 42130.0], [86.1, 42130.0], [86.2, 42130.0], [86.3, 42131.0], [86.4, 42133.0], [86.5, 42133.0], [86.6, 42135.0], [86.7, 42137.0], [86.8, 42138.0], [86.9, 42138.0], [87.0, 42138.0], [87.1, 42138.0], [87.2, 42139.0], [87.3, 42141.0], [87.4, 42143.0], [87.5, 42143.0], [87.6, 42144.0], [87.7, 42146.0], [87.8, 42148.0], [87.9, 42148.0], [88.0, 42148.0], [88.1, 42150.0], [88.2, 42150.0], [88.3, 42151.0], [88.4, 42151.0], [88.5, 42152.0], [88.6, 42153.0], [88.7, 42155.0], [88.8, 42156.0], [88.9, 42156.0], [89.0, 42156.0], [89.1, 42156.0], [89.2, 42161.0], [89.3, 42162.0], [89.4, 42164.0], [89.5, 42164.0], [89.6, 42164.0], [89.7, 42164.0], [89.8, 42164.0], [89.9, 42165.0], [90.0, 42165.0], [90.1, 42165.0], [90.2, 42166.0], [90.3, 42169.0], [90.4, 42171.0], [90.5, 42171.0], [90.6, 42171.0], [90.7, 42173.0], [90.8, 42176.0], [90.9, 42178.0], [91.0, 42178.0], [91.1, 42179.0], [91.2, 42179.0], [91.3, 42179.0], [91.4, 42184.0], [91.5, 42184.0], [91.6, 42188.0], [91.7, 42189.0], [91.8, 42211.0], [91.9, 42222.0], [92.0, 42222.0], [92.1, 42225.0], [92.2, 42233.0], [92.3, 42255.0], [92.4, 42304.0], [92.5, 42330.0], [92.6, 42381.0], [92.7, 42431.0], [92.8, 42463.0], [92.9, 42521.0], [93.0, 42521.0], [93.1, 42546.0], [93.2, 42598.0], [93.3, 42623.0], [93.4, 42668.0], [93.5, 42722.0], [93.6, 42766.0], [93.7, 42798.0], [93.8, 42832.0], [93.9, 42882.0], [94.0, 42882.0], [94.1, 42915.0], [94.2, 42961.0], [94.3, 42981.0], [94.4, 43036.0], [94.5, 43059.0], [94.6, 43097.0], [94.7, 43152.0], [94.8, 43189.0], [94.9, 43253.0], [95.0, 43253.0], [95.1, 43272.0], [95.2, 43314.0], [95.3, 43345.0], [95.4, 43403.0], [95.5, 43435.0], [95.6, 43462.0], [95.7, 43531.0], [95.8, 43607.0], [95.9, 43615.0], [96.0, 43615.0], [96.1, 43645.0], [96.2, 43705.0], [96.3, 43725.0], [96.4, 43815.0], [96.5, 43816.0], [96.6, 43890.0], [96.7, 43902.0], [96.8, 43927.0], [96.9, 43991.0], [97.0, 43991.0], [97.1, 44029.0], [97.2, 44101.0], [97.3, 44121.0], [97.4, 44147.0], [97.5, 44207.0], [97.6, 44233.0], [97.7, 44268.0], [97.8, 44351.0], [97.9, 44355.0], [98.0, 44355.0], [98.1, 44390.0], [98.2, 44446.0], [98.3, 44478.0], [98.4, 44519.0], [98.5, 44548.0], [98.6, 44609.0], [98.7, 44643.0], [98.8, 44665.0], [98.9, 44729.0], [99.0, 44729.0], [99.1, 44751.0], [99.2, 44788.0], [99.3, 44844.0], [99.4, 44858.0], [99.5, 44925.0], [99.6, 44965.0], [99.7, 45015.0], [99.8, 45043.0], [99.9, 45085.0], [100.0, 45085.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 2293.0], [0.1, 2293.0], [0.2, 2786.0], [0.3, 2788.0], [0.4, 2788.0], [0.5, 2792.0], [0.6, 2792.0], [0.7, 2793.0], [0.8, 2794.0], [0.9, 2795.0], [1.0, 2795.0], [1.1, 2795.0], [1.2, 2796.0], [1.3, 2796.0], [1.4, 2796.0], [1.5, 2797.0], [1.6, 2798.0], [1.7, 2800.0], [1.8, 2803.0], [1.9, 2805.0], [2.0, 2805.0], [2.1, 2805.0], [2.2, 2806.0], [2.3, 2807.0], [2.4, 2808.0], [2.5, 2810.0], [2.6, 2816.0], [2.7, 2836.0], [2.8, 3364.0], [2.9, 3380.0], [3.0, 3380.0], [3.1, 3381.0], [3.2, 3382.0], [3.3, 3384.0], [3.4, 3385.0], [3.5, 3385.0], [3.6, 3390.0], [3.7, 3390.0], [3.8, 3390.0], [3.9, 3391.0], [4.0, 3391.0], [4.1, 3391.0], [4.2, 3392.0], [4.3, 3392.0], [4.4, 3392.0], [4.5, 3393.0], [4.6, 3394.0], [4.7, 3395.0], [4.8, 3395.0], [4.9, 3396.0], [5.0, 3397.0], [5.1, 3397.0], [5.2, 3398.0], [5.3, 3399.0], [5.4, 3399.0], [5.5, 3399.0], [5.6, 3399.0], [5.7, 3400.0], [5.8, 3401.0], [5.9, 3401.0], [6.0, 3403.0], [6.1, 3403.0], [6.2, 3404.0], [6.3, 3404.0], [6.4, 3404.0], [6.5, 3405.0], [6.6, 3405.0], [6.7, 3406.0], [6.8, 3406.0], [6.9, 3406.0], [7.0, 3406.0], [7.1, 3406.0], [7.2, 3407.0], [7.3, 3407.0], [7.4, 3409.0], [7.5, 3409.0], [7.6, 3412.0], [7.7, 3412.0], [7.8, 3412.0], [7.9, 3412.0], [8.0, 3413.0], [8.1, 3413.0], [8.2, 3413.0], [8.3, 3413.0], [8.4, 3414.0], [8.5, 3414.0], [8.6, 3415.0], [8.7, 3415.0], [8.8, 3415.0], [8.9, 3415.0], [9.0, 3416.0], [9.1, 3416.0], [9.2, 3416.0], [9.3, 3416.0], [9.4, 3417.0], [9.5, 3417.0], [9.6, 3418.0], [9.7, 3418.0], [9.8, 3419.0], [9.9, 3421.0], [10.0, 3421.0], [10.1, 3421.0], [10.2, 3421.0], [10.3, 3421.0], [10.4, 3422.0], [10.5, 3422.0], [10.6, 3423.0], [10.7, 3423.0], [10.8, 3423.0], [10.9, 3423.0], [11.0, 3424.0], [11.1, 3424.0], [11.2, 3424.0], [11.3, 3425.0], [11.4, 3425.0], [11.5, 3426.0], [11.6, 3426.0], [11.7, 3426.0], [11.8, 3426.0], [11.9, 3426.0], [12.0, 3427.0], [12.1, 3427.0], [12.2, 3427.0], [12.3, 3427.0], [12.4, 3427.0], [12.5, 3428.0], [12.6, 3428.0], [12.7, 3429.0], [12.8, 3429.0], [12.9, 3430.0], [13.0, 3430.0], [13.1, 3430.0], [13.2, 3430.0], [13.3, 3430.0], [13.4, 3431.0], [13.5, 3431.0], [13.6, 3432.0], [13.7, 3432.0], [13.8, 3433.0], [13.9, 3433.0], [14.0, 3434.0], [14.1, 3434.0], [14.2, 3435.0], [14.3, 3435.0], [14.4, 3435.0], [14.5, 3436.0], [14.6, 3436.0], [14.7, 3437.0], [14.8, 3438.0], [14.9, 3438.0], [15.0, 3439.0], [15.1, 3439.0], [15.2, 3440.0], [15.3, 3440.0], [15.4, 3441.0], [15.5, 3441.0], [15.6, 3441.0], [15.7, 3443.0], [15.8, 3443.0], [15.9, 3445.0], [16.0, 3446.0], [16.1, 3446.0], [16.2, 3448.0], [16.3, 3450.0], [16.4, 3508.0], [16.5, 3512.0], [16.6, 3516.0], [16.7, 3516.0], [16.8, 3517.0], [16.9, 3522.0], [17.0, 3522.0], [17.1, 3522.0], [17.2, 3523.0], [17.3, 3523.0], [17.4, 3535.0], [17.5, 3536.0], [17.6, 40177.0], [17.7, 40312.0], [17.8, 40466.0], [17.9, 40528.0], [18.0, 40668.0], [18.1, 40668.0], [18.2, 40738.0], [18.3, 40872.0], [18.4, 40937.0], [18.5, 41000.0], [18.6, 41020.0], [18.7, 41109.0], [18.8, 41195.0], [18.9, 41207.0], [19.0, 41292.0], [19.1, 41292.0], [19.2, 41333.0], [19.3, 41368.0], [19.4, 41417.0], [19.5, 41428.0], [19.6, 41437.0], [19.7, 41441.0], [19.8, 41442.0], [19.9, 41446.0], [20.0, 41449.0], [20.1, 41449.0], [20.2, 41449.0], [20.3, 41452.0], [20.4, 41452.0], [20.5, 41454.0], [20.6, 41456.0], [20.7, 41457.0], [20.8, 41460.0], [20.9, 41460.0], [21.0, 41462.0], [21.1, 41462.0], [21.2, 41464.0], [21.3, 41465.0], [21.4, 41465.0], [21.5, 41465.0], [21.6, 41465.0], [21.7, 41466.0], [21.8, 41468.0], [21.9, 41469.0], [22.0, 41470.0], [22.1, 41470.0], [22.2, 41472.0], [22.3, 41473.0], [22.4, 41474.0], [22.5, 41476.0], [22.6, 41477.0], [22.7, 41477.0], [22.8, 41478.0], [22.9, 41478.0], [23.0, 41479.0], [23.1, 41479.0], [23.2, 41484.0], [23.3, 41484.0], [23.4, 41484.0], [23.5, 41484.0], [23.6, 41486.0], [23.7, 41487.0], [23.8, 41489.0], [23.9, 41490.0], [24.0, 41491.0], [24.1, 41491.0], [24.2, 41492.0], [24.3, 41493.0], [24.4, 41493.0], [24.5, 41494.0], [24.6, 41495.0], [24.7, 41495.0], [24.8, 41496.0], [24.9, 41498.0], [25.0, 41499.0], [25.1, 41499.0], [25.2, 41500.0], [25.3, 41501.0], [25.4, 41502.0], [25.5, 41502.0], [25.6, 41504.0], [25.7, 41510.0], [25.8, 41513.0], [25.9, 41513.0], [26.0, 41518.0], [26.1, 41518.0], [26.2, 41519.0], [26.3, 41519.0], [26.4, 41521.0], [26.5, 41522.0], [26.6, 41531.0], [26.7, 41531.0], [26.8, 41535.0], [26.9, 41536.0], [27.0, 41537.0], [27.1, 41537.0], [27.2, 41537.0], [27.3, 41537.0], [27.4, 41538.0], [27.5, 41538.0], [27.6, 41538.0], [27.7, 41540.0], [27.8, 41541.0], [27.9, 41542.0], [28.0, 41545.0], [28.1, 41545.0], [28.2, 41546.0], [28.3, 41547.0], [28.4, 41547.0], [28.5, 41548.0], [28.6, 41549.0], [28.7, 41553.0], [28.8, 41555.0], [28.9, 41556.0], [29.0, 41556.0], [29.1, 41556.0], [29.2, 41556.0], [29.3, 41559.0], [29.4, 41561.0], [29.5, 41561.0], [29.6, 41562.0], [29.7, 41562.0], [29.8, 41563.0], [29.9, 41563.0], [30.0, 41563.0], [30.1, 41563.0], [30.2, 41563.0], [30.3, 41565.0], [30.4, 41565.0], [30.5, 41566.0], [30.6, 41566.0], [30.7, 41567.0], [30.8, 41568.0], [30.9, 41570.0], [31.0, 41573.0], [31.1, 41573.0], [31.2, 41573.0], [31.3, 41574.0], [31.4, 41574.0], [31.5, 41575.0], [31.6, 41577.0], [31.7, 41577.0], [31.8, 41578.0], [31.9, 41581.0], [32.0, 41582.0], [32.1, 41582.0], [32.2, 41582.0], [32.3, 41583.0], [32.4, 41583.0], [32.5, 41587.0], [32.6, 41588.0], [32.7, 41589.0], [32.8, 41591.0], [32.9, 41592.0], [33.0, 41594.0], [33.1, 41594.0], [33.2, 41594.0], [33.3, 41594.0], [33.4, 41597.0], [33.5, 41598.0], [33.6, 41598.0], [33.7, 41599.0], [33.8, 41599.0], [33.9, 41601.0], [34.0, 41601.0], [34.1, 41601.0], [34.2, 41602.0], [34.3, 41604.0], [34.4, 41604.0], [34.5, 41605.0], [34.6, 41605.0], [34.7, 41606.0], [34.8, 41607.0], [34.9, 41607.0], [35.0, 41610.0], [35.1, 41610.0], [35.2, 41610.0], [35.3, 41611.0], [35.4, 41611.0], [35.5, 41613.0], [35.6, 41614.0], [35.7, 41616.0], [35.8, 41617.0], [35.9, 41619.0], [36.0, 41620.0], [36.1, 41620.0], [36.2, 41620.0], [36.3, 41621.0], [36.4, 41622.0], [36.5, 41623.0], [36.6, 41623.0], [36.7, 41624.0], [36.8, 41630.0], [36.9, 41631.0], [37.0, 41631.0], [37.1, 41631.0], [37.2, 41634.0], [37.3, 41636.0], [37.4, 41637.0], [37.5, 41640.0], [37.6, 41640.0], [37.7, 41642.0], [37.8, 41645.0], [37.9, 41645.0], [38.0, 41646.0], [38.1, 41646.0], [38.2, 41647.0], [38.3, 41648.0], [38.4, 41651.0], [38.5, 41652.0], [38.6, 41653.0], [38.7, 41654.0], [38.8, 41655.0], [38.9, 41657.0], [39.0, 41657.0], [39.1, 41658.0], [39.2, 41658.0], [39.3, 41665.0], [39.4, 41665.0], [39.5, 41666.0], [39.6, 41666.0], [39.7, 41669.0], [39.8, 41670.0], [39.9, 41670.0], [40.0, 41670.0], [40.1, 41671.0], [40.2, 41672.0], [40.3, 41672.0], [40.4, 41672.0], [40.5, 41674.0], [40.6, 41674.0], [40.7, 41674.0], [40.8, 41675.0], [40.9, 41675.0], [41.0, 41675.0], [41.1, 41675.0], [41.2, 41679.0], [41.3, 41681.0], [41.4, 41682.0], [41.5, 41682.0], [41.6, 41683.0], [41.7, 41683.0], [41.8, 41684.0], [41.9, 41684.0], [42.0, 41684.0], [42.1, 41685.0], [42.2, 41686.0], [42.3, 41686.0], [42.4, 41690.0], [42.5, 41690.0], [42.6, 41690.0], [42.7, 41692.0], [42.8, 41692.0], [42.9, 41693.0], [43.0, 41693.0], [43.1, 41693.0], [43.2, 41695.0], [43.3, 41695.0], [43.4, 41698.0], [43.5, 41702.0], [43.6, 41702.0], [43.7, 41702.0], [43.8, 41702.0], [43.9, 41705.0], [44.0, 41705.0], [44.1, 41709.0], [44.2, 41710.0], [44.3, 41713.0], [44.4, 41713.0], [44.5, 41714.0], [44.6, 41715.0], [44.7, 41715.0], [44.8, 41716.0], [44.9, 41717.0], [45.0, 41717.0], [45.1, 41717.0], [45.2, 41718.0], [45.3, 41718.0], [45.4, 41718.0], [45.5, 41718.0], [45.6, 41723.0], [45.7, 41725.0], [45.8, 41727.0], [45.9, 41729.0], [46.0, 41729.0], [46.1, 41732.0], [46.2, 41734.0], [46.3, 41736.0], [46.4, 41737.0], [46.5, 41738.0], [46.6, 41739.0], [46.7, 41740.0], [46.8, 41741.0], [46.9, 41741.0], [47.0, 41741.0], [47.1, 41742.0], [47.2, 41744.0], [47.3, 41746.0], [47.4, 41746.0], [47.5, 41747.0], [47.6, 41747.0], [47.7, 41748.0], [47.8, 41748.0], [47.9, 41748.0], [48.0, 41748.0], [48.1, 41749.0], [48.2, 41751.0], [48.3, 41753.0], [48.4, 41754.0], [48.5, 41754.0], [48.6, 41755.0], [48.7, 41756.0], [48.8, 41756.0], [48.9, 41757.0], [49.0, 41757.0], [49.1, 41759.0], [49.2, 41762.0], [49.3, 41762.0], [49.4, 41764.0], [49.5, 41765.0], [49.6, 41766.0], [49.7, 41766.0], [49.8, 41767.0], [49.9, 41769.0], [50.0, 41769.0], [50.1, 41769.0], [50.2, 41769.0], [50.3, 41769.0], [50.4, 41770.0], [50.5, 41771.0], [50.6, 41771.0], [50.7, 41774.0], [50.8, 41774.0], [50.9, 41775.0], [51.0, 41775.0], [51.1, 41775.0], [51.2, 41775.0], [51.3, 41777.0], [51.4, 41777.0], [51.5, 41781.0], [51.6, 41783.0], [51.7, 41783.0], [51.8, 41785.0], [51.9, 41785.0], [52.0, 41785.0], [52.1, 41786.0], [52.2, 41786.0], [52.3, 41787.0], [52.4, 41788.0], [52.5, 41790.0], [52.6, 41790.0], [52.7, 41793.0], [52.8, 41793.0], [52.9, 41794.0], [53.0, 41794.0], [53.1, 41795.0], [53.2, 41798.0], [53.3, 41799.0], [53.4, 41799.0], [53.5, 41800.0], [53.6, 41800.0], [53.7, 41801.0], [53.8, 41804.0], [53.9, 41805.0], [54.0, 41805.0], [54.1, 41805.0], [54.2, 41806.0], [54.3, 41806.0], [54.4, 41808.0], [54.5, 41809.0], [54.6, 41813.0], [54.7, 41813.0], [54.8, 41814.0], [54.9, 41816.0], [55.0, 41816.0], [55.1, 41816.0], [55.2, 41817.0], [55.3, 41819.0], [55.4, 41819.0], [55.5, 41819.0], [55.6, 41820.0], [55.7, 41823.0], [55.8, 41823.0], [55.9, 41823.0], [56.0, 41823.0], [56.1, 41824.0], [56.2, 41825.0], [56.3, 41829.0], [56.4, 41830.0], [56.5, 41833.0], [56.6, 41833.0], [56.7, 41834.0], [56.8, 41835.0], [56.9, 41835.0], [57.0, 41835.0], [57.1, 41836.0], [57.2, 41836.0], [57.3, 41837.0], [57.4, 41839.0], [57.5, 41840.0], [57.6, 41840.0], [57.7, 41841.0], [57.8, 41844.0], [57.9, 41844.0], [58.0, 41844.0], [58.1, 41844.0], [58.2, 41845.0], [58.3, 41845.0], [58.4, 41848.0], [58.5, 41850.0], [58.6, 41850.0], [58.7, 41851.0], [58.8, 41851.0], [58.9, 41851.0], [59.0, 41851.0], [59.1, 41852.0], [59.2, 41853.0], [59.3, 41855.0], [59.4, 41855.0], [59.5, 41857.0], [59.6, 41857.0], [59.7, 41857.0], [59.8, 41859.0], [59.9, 41860.0], [60.0, 41860.0], [60.1, 41861.0], [60.2, 41863.0], [60.3, 41863.0], [60.4, 41865.0], [60.5, 41865.0], [60.6, 41866.0], [60.7, 41867.0], [60.8, 41868.0], [60.9, 41869.0], [61.0, 41869.0], [61.1, 41870.0], [61.2, 41870.0], [61.3, 41870.0], [61.4, 41871.0], [61.5, 41872.0], [61.6, 41874.0], [61.7, 41875.0], [61.8, 41877.0], [61.9, 41878.0], [62.0, 41878.0], [62.1, 41878.0], [62.2, 41878.0], [62.3, 41879.0], [62.4, 41880.0], [62.5, 41880.0], [62.6, 41882.0], [62.7, 41883.0], [62.8, 41883.0], [62.9, 41883.0], [63.0, 41883.0], [63.1, 41883.0], [63.2, 41884.0], [63.3, 41884.0], [63.4, 41886.0], [63.5, 41887.0], [63.6, 41887.0], [63.7, 41888.0], [63.8, 41891.0], [63.9, 41892.0], [64.0, 41892.0], [64.1, 41894.0], [64.2, 41894.0], [64.3, 41896.0], [64.4, 41896.0], [64.5, 41897.0], [64.6, 41897.0], [64.7, 41898.0], [64.8, 41899.0], [64.9, 41900.0], [65.0, 41900.0], [65.1, 41901.0], [65.2, 41902.0], [65.3, 41902.0], [65.4, 41903.0], [65.5, 41905.0], [65.6, 41907.0], [65.7, 41908.0], [65.8, 41910.0], [65.9, 41914.0], [66.0, 41914.0], [66.1, 41915.0], [66.2, 41916.0], [66.3, 41919.0], [66.4, 41920.0], [66.5, 41920.0], [66.6, 41921.0], [66.7, 41921.0], [66.8, 41921.0], [66.9, 41924.0], [67.0, 41924.0], [67.1, 41924.0], [67.2, 41924.0], [67.3, 41925.0], [67.4, 41926.0], [67.5, 41929.0], [67.6, 41931.0], [67.7, 41933.0], [67.8, 41933.0], [67.9, 41933.0], [68.0, 41933.0], [68.1, 41936.0], [68.2, 41936.0], [68.3, 41937.0], [68.4, 41938.0], [68.5, 41938.0], [68.6, 41939.0], [68.7, 41941.0], [68.8, 41942.0], [68.9, 41943.0], [69.0, 41943.0], [69.1, 41943.0], [69.2, 41943.0], [69.3, 41946.0], [69.4, 41948.0], [69.5, 41950.0], [69.6, 41952.0], [69.7, 41957.0], [69.8, 41959.0], [69.9, 41961.0], [70.0, 41961.0], [70.1, 41961.0], [70.2, 41961.0], [70.3, 41965.0], [70.4, 41966.0], [70.5, 41968.0], [70.6, 41968.0], [70.7, 41968.0], [70.8, 41969.0], [70.9, 41970.0], [71.0, 41970.0], [71.1, 41971.0], [71.2, 41972.0], [71.3, 41973.0], [71.4, 41973.0], [71.5, 41973.0], [71.6, 41973.0], [71.7, 41974.0], [71.8, 41976.0], [71.9, 41978.0], [72.0, 41978.0], [72.1, 41981.0], [72.2, 41981.0], [72.3, 41986.0], [72.4, 41987.0], [72.5, 41987.0], [72.6, 41991.0], [72.7, 41991.0], [72.8, 41993.0], [72.9, 41993.0], [73.0, 41993.0], [73.1, 41994.0], [73.2, 41995.0], [73.3, 41997.0], [73.4, 41997.0], [73.5, 41999.0], [73.6, 41999.0], [73.7, 42000.0], [73.8, 42003.0], [73.9, 42004.0], [74.0, 42004.0], [74.1, 42005.0], [74.2, 42005.0], [74.3, 42009.0], [74.4, 42009.0], [74.5, 42010.0], [74.6, 42010.0], [74.7, 42011.0], [74.8, 42011.0], [74.9, 42014.0], [75.0, 42014.0], [75.1, 42014.0], [75.2, 42016.0], [75.3, 42016.0], [75.4, 42016.0], [75.5, 42017.0], [75.6, 42018.0], [75.7, 42019.0], [75.8, 42019.0], [75.9, 42021.0], [76.0, 42021.0], [76.1, 42022.0], [76.2, 42022.0], [76.3, 42023.0], [76.4, 42024.0], [76.5, 42024.0], [76.6, 42026.0], [76.7, 42027.0], [76.8, 42028.0], [76.9, 42028.0], [77.0, 42028.0], [77.1, 42033.0], [77.2, 42036.0], [77.3, 42036.0], [77.4, 42036.0], [77.5, 42038.0], [77.6, 42038.0], [77.7, 42039.0], [77.8, 42039.0], [77.9, 42041.0], [78.0, 42041.0], [78.1, 42044.0], [78.2, 42049.0], [78.3, 42052.0], [78.4, 42054.0], [78.5, 42055.0], [78.6, 42058.0], [78.7, 42059.0], [78.8, 42060.0], [78.9, 42063.0], [79.0, 42063.0], [79.1, 42063.0], [79.2, 42064.0], [79.3, 42066.0], [79.4, 42069.0], [79.5, 42071.0], [79.6, 42071.0], [79.7, 42072.0], [79.8, 42072.0], [79.9, 42075.0], [80.0, 42075.0], [80.1, 42075.0], [80.2, 42076.0], [80.3, 42079.0], [80.4, 42080.0], [80.5, 42081.0], [80.6, 42081.0], [80.7, 42082.0], [80.8, 42082.0], [80.9, 42083.0], [81.0, 42083.0], [81.1, 42084.0], [81.2, 42085.0], [81.3, 42088.0], [81.4, 42090.0], [81.5, 42090.0], [81.6, 42090.0], [81.7, 42091.0], [81.8, 42092.0], [81.9, 42092.0], [82.0, 42092.0], [82.1, 42094.0], [82.2, 42095.0], [82.3, 42095.0], [82.4, 42096.0], [82.5, 42097.0], [82.6, 42098.0], [82.7, 42098.0], [82.8, 42099.0], [82.9, 42100.0], [83.0, 42100.0], [83.1, 42101.0], [83.2, 42101.0], [83.3, 42102.0], [83.4, 42104.0], [83.5, 42104.0], [83.6, 42104.0], [83.7, 42104.0], [83.8, 42105.0], [83.9, 42106.0], [84.0, 42106.0], [84.1, 42109.0], [84.2, 42109.0], [84.3, 42109.0], [84.4, 42109.0], [84.5, 42113.0], [84.6, 42114.0], [84.7, 42114.0], [84.8, 42114.0], [84.9, 42116.0], [85.0, 42116.0], [85.1, 42117.0], [85.2, 42118.0], [85.3, 42118.0], [85.4, 42120.0], [85.5, 42122.0], [85.6, 42122.0], [85.7, 42126.0], [85.8, 42128.0], [85.9, 42130.0], [86.0, 42130.0], [86.1, 42130.0], [86.2, 42130.0], [86.3, 42131.0], [86.4, 42133.0], [86.5, 42133.0], [86.6, 42135.0], [86.7, 42137.0], [86.8, 42138.0], [86.9, 42138.0], [87.0, 42138.0], [87.1, 42138.0], [87.2, 42139.0], [87.3, 42141.0], [87.4, 42143.0], [87.5, 42143.0], [87.6, 42144.0], [87.7, 42146.0], [87.8, 42148.0], [87.9, 42148.0], [88.0, 42148.0], [88.1, 42150.0], [88.2, 42150.0], [88.3, 42151.0], [88.4, 42151.0], [88.5, 42152.0], [88.6, 42153.0], [88.7, 42155.0], [88.8, 42156.0], [88.9, 42156.0], [89.0, 42156.0], [89.1, 42156.0], [89.2, 42161.0], [89.3, 42162.0], [89.4, 42164.0], [89.5, 42164.0], [89.6, 42164.0], [89.7, 42164.0], [89.8, 42164.0], [89.9, 42165.0], [90.0, 42165.0], [90.1, 42165.0], [90.2, 42166.0], [90.3, 42169.0], [90.4, 42171.0], [90.5, 42171.0], [90.6, 42171.0], [90.7, 42173.0], [90.8, 42176.0], [90.9, 42178.0], [91.0, 42178.0], [91.1, 42179.0], [91.2, 42179.0], [91.3, 42179.0], [91.4, 42184.0], [91.5, 42184.0], [91.6, 42188.0], [91.7, 42189.0], [91.8, 42211.0], [91.9, 42222.0], [92.0, 42222.0], [92.1, 42225.0], [92.2, 42233.0], [92.3, 42255.0], [92.4, 42304.0], [92.5, 42330.0], [92.6, 42381.0], [92.7, 42431.0], [92.8, 42463.0], [92.9, 42521.0], [93.0, 42521.0], [93.1, 42546.0], [93.2, 42598.0], [93.3, 42623.0], [93.4, 42668.0], [93.5, 42722.0], [93.6, 42766.0], [93.7, 42798.0], [93.8, 42832.0], [93.9, 42882.0], [94.0, 42882.0], [94.1, 42915.0], [94.2, 42961.0], [94.3, 42981.0], [94.4, 43036.0], [94.5, 43059.0], [94.6, 43097.0], [94.7, 43152.0], [94.8, 43189.0], [94.9, 43253.0], [95.0, 43253.0], [95.1, 43272.0], [95.2, 43314.0], [95.3, 43345.0], [95.4, 43403.0], [95.5, 43435.0], [95.6, 43462.0], [95.7, 43531.0], [95.8, 43607.0], [95.9, 43615.0], [96.0, 43615.0], [96.1, 43645.0], [96.2, 43705.0], [96.3, 43725.0], [96.4, 43815.0], [96.5, 43816.0], [96.6, 43890.0], [96.7, 43902.0], [96.8, 43927.0], [96.9, 43991.0], [97.0, 43991.0], [97.1, 44029.0], [97.2, 44101.0], [97.3, 44121.0], [97.4, 44147.0], [97.5, 44207.0], [97.6, 44233.0], [97.7, 44268.0], [97.8, 44351.0], [97.9, 44355.0], [98.0, 44355.0], [98.1, 44390.0], [98.2, 44446.0], [98.3, 44478.0], [98.4, 44519.0], [98.5, 44548.0], [98.6, 44609.0], [98.7, 44643.0], [98.8, 44665.0], [98.9, 44729.0], [99.0, 44729.0], [99.1, 44751.0], [99.2, 44788.0], [99.3, 44844.0], [99.4, 44858.0], [99.5, 44925.0], [99.6, 44965.0], [99.7, 45015.0], [99.8, 45043.0], [99.9, 45085.0], [100.0, 45085.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2200.0, "maxY": 103.0, "series": [{"data": [[2200.0, 1.0], [2800.0, 10.0], [2700.0, 14.0], [3300.0, 26.0], [3400.0, 96.0], [3500.0, 11.0], [40100.0, 1.0], [40300.0, 1.0], [40400.0, 1.0], [40500.0, 1.0], [40600.0, 1.0], [40700.0, 1.0], [40800.0, 1.0], [40900.0, 1.0], [41300.0, 2.0], [41800.0, 103.0], [41000.0, 2.0], [41100.0, 2.0], [41200.0, 2.0], [41400.0, 52.0], [42500.0, 3.0], [42600.0, 2.0], [42700.0, 3.0], [42800.0, 2.0], [42900.0, 3.0], [43000.0, 3.0], [42000.0, 83.0], [42100.0, 80.0], [42200.0, 5.0], [42300.0, 3.0], [42400.0, 2.0], [41500.0, 79.0], [41600.0, 86.0], [41700.0, 90.0], [41900.0, 79.0], [43200.0, 2.0], [43700.0, 2.0], [43100.0, 2.0], [44000.0, 1.0], [43800.0, 3.0], [43900.0, 3.0], [43300.0, 2.0], [43400.0, 3.0], [43500.0, 1.0], [44600.0, 3.0], [44700.0, 3.0], [44800.0, 2.0], [44900.0, 2.0], [45000.0, 3.0], [44100.0, 3.0], [44200.0, 3.0], [44300.0, 3.0], [44400.0, 2.0], [44500.0, 2.0], [43600.0, 3.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[2200.0, 1.0], [2800.0, 10.0], [2700.0, 14.0], [3300.0, 26.0], [3400.0, 96.0], [3500.0, 11.0], [40100.0, 1.0], [40300.0, 1.0], [40400.0, 1.0], [40500.0, 1.0], [40600.0, 1.0], [40700.0, 1.0], [40800.0, 1.0], [40900.0, 1.0], [41300.0, 2.0], [41800.0, 103.0], [41000.0, 2.0], [41100.0, 2.0], [41200.0, 2.0], [41400.0, 52.0], [42500.0, 3.0], [42600.0, 2.0], [42700.0, 3.0], [42800.0, 2.0], [42900.0, 3.0], [43000.0, 3.0], [42000.0, 83.0], [42100.0, 80.0], [42200.0, 5.0], [42300.0, 3.0], [42400.0, 2.0], [41500.0, 79.0], [41600.0, 86.0], [41700.0, 90.0], [41900.0, 79.0], [43200.0, 2.0], [43700.0, 2.0], [43100.0, 2.0], [44000.0, 1.0], [43800.0, 3.0], [43900.0, 3.0], [43300.0, 2.0], [43400.0, 3.0], [43500.0, 1.0], [44600.0, 3.0], [44700.0, 3.0], [44800.0, 2.0], [44900.0, 2.0], [45000.0, 3.0], [44100.0, 3.0], [44200.0, 3.0], [44300.0, 3.0], [44400.0, 2.0], [44500.0, 2.0], [43600.0, 3.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 158.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 742.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 742.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 158.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 372.07412398921815, "minX": 1.68042528E12, "maxY": 865.3227848101266, "series": [{"data": [[1.68042528E12, 865.3227848101266], [1.68042534E12, 372.07412398921815]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042534E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2293.0, "minX": 1.0, "maxY": 45085.0, "series": [{"data": [[2.0, 45043.0], [3.0, 45015.0], [4.0, 44965.0], [5.0, 44925.0], [6.0, 44858.0], [7.0, 44844.0], [8.0, 44788.0], [9.0, 44751.0], [10.0, 44729.0], [11.0, 44665.0], [12.0, 44643.0], [13.0, 44609.0], [14.0, 44548.0], [15.0, 44519.0], [16.0, 44478.0], [17.0, 44446.0], [18.0, 44390.0], [19.0, 44351.0], [20.0, 44355.0], [21.0, 44268.0], [22.0, 44233.0], [23.0, 44207.0], [24.0, 44147.0], [25.0, 44121.0], [26.0, 44101.0], [27.0, 44029.0], [28.0, 43991.0], [29.0, 43927.0], [31.0, 43896.0], [33.0, 43815.5], [35.0, 43705.0], [34.0, 43725.0], [36.0, 43645.0], [39.0, 43531.0], [38.0, 43611.0], [41.0, 43435.0], [40.0, 43462.0], [43.0, 43345.0], [42.0, 43403.0], [45.0, 43272.0], [44.0, 43314.0], [47.0, 43189.0], [46.0, 43253.0], [49.0, 43097.0], [48.0, 43152.0], [51.0, 43036.0], [50.0, 43059.0], [53.0, 42961.0], [52.0, 42981.0], [55.0, 42882.0], [54.0, 42915.0], [57.0, 42798.0], [56.0, 42832.0], [59.0, 42722.0], [58.0, 42766.0], [61.0, 42623.0], [60.0, 42668.0], [63.0, 42546.0], [62.0, 42598.0], [67.0, 42381.0], [66.0, 42431.0], [65.0, 42463.0], [64.0, 42521.0], [71.0, 42233.0], [70.0, 42255.0], [69.0, 42304.0], [68.0, 42330.0], [74.0, 42223.5], [72.0, 42211.0], [79.0, 42171.0], [78.0, 42184.0], [77.0, 42178.0], [76.0, 42188.5], [83.0, 42165.0], [82.0, 42179.0], [81.0, 42171.0], [80.0, 42184.0], [87.0, 42165.333333333336], [84.0, 42169.0], [95.0, 42167.28571428571], [93.0, 42179.0], [99.0, 42159.0], [103.0, 42153.0], [101.0, 42163.5], [106.0, 42156.0], [105.0, 42148.0], [104.0, 42153.0], [111.0, 42150.0], [110.0, 42138.0], [109.0, 42152.0], [108.0, 42151.0], [115.0, 42126.0], [114.0, 42138.5], [112.0, 42141.0], [118.0, 42130.0], [116.0, 42138.0], [123.0, 42139.0], [122.0, 42138.0], [121.0, 42143.0], [120.0, 42142.5], [127.0, 42133.0], [126.0, 42128.5], [124.0, 42118.0], [134.0, 42117.0], [133.0, 42131.0], [132.0, 42116.0], [131.0, 42128.0], [130.0, 42117.5], [128.0, 42130.0], [143.0, 42118.0], [142.0, 42109.0], [141.0, 42101.0], [139.0, 42111.0], [137.0, 42114.0], [136.0, 42114.0], [151.0, 42114.0], [150.0, 42106.5], [148.0, 42109.0], [147.0, 42109.0], [146.0, 42105.5], [144.0, 42104.0], [158.0, 42095.0], [157.0, 42104.0], [156.0, 42107.0], [154.0, 42101.0], [153.0, 42097.0], [167.0, 42082.0], [166.0, 42092.0], [165.0, 42086.0], [163.0, 42096.0], [162.0, 42087.0], [161.0, 42094.0], [175.0, 42082.5], [173.0, 42095.0], [172.0, 42084.0], [171.0, 42091.0], [170.0, 42083.0], [183.0, 42076.0], [181.0, 42088.0], [180.0, 42071.0], [179.0, 42080.0], [177.0, 42078.0], [191.0, 42055.0], [190.0, 42054.0], [189.0, 42063.0], [188.0, 42069.8], [198.0, 42044.0], [197.0, 42039.0], [196.0, 42049.0], [195.0, 42060.0], [194.0, 42063.0], [193.0, 42061.0], [207.0, 42022.0], [206.0, 42036.0], [205.0, 42033.0], [204.0, 42038.66666666667], [215.0, 42014.0], [214.0, 42031.333333333336], [211.0, 42009.0], [210.0, 42016.0], [209.0, 42025.0], [223.0, 42014.0], [222.0, 42019.0], [221.0, 42010.0], [220.0, 42027.0], [219.0, 42016.0], [218.0, 42028.0], [216.0, 42011.0], [231.0, 42005.0], [230.0, 42003.0], [229.0, 42018.0], [228.0, 42021.0], [227.0, 41999.0], [226.0, 42017.0], [225.0, 42010.0], [224.0, 42023.0], [239.0, 42005.0], [238.0, 42011.0], [237.0, 42000.0], [235.0, 42008.0], [233.0, 41999.0], [232.0, 42016.0], [247.0, 41988.0], [245.0, 41969.0], [244.0, 41990.5], [242.0, 41994.0], [241.0, 42004.0], [240.0, 41987.0], [255.0, 41991.0], [254.0, 41993.0], [253.0, 41981.5], [251.0, 41979.0], [249.0, 41986.0], [248.0, 41997.0], [258.0, 41978.0], [271.0, 41968.0], [265.0, 41967.0], [263.0, 41973.0], [262.0, 41959.0], [261.0, 41961.0], [260.0, 41971.0], [259.0, 41972.0], [257.0, 41970.0], [256.0, 41973.0], [275.0, 41948.0], [285.0, 41936.0], [287.0, 41940.0], [284.0, 41943.0], [283.0, 41934.666666666664], [280.0, 41938.0], [279.0, 41936.0], [278.0, 41944.0], [276.0, 41950.0], [274.0, 41965.2], [272.0, 41957.0], [303.0, 41915.0], [302.0, 41916.0], [301.0, 41924.555555555555], [292.0, 41933.0], [291.0, 41929.0], [290.0, 41943.0], [289.0, 41940.0], [318.0, 41896.5], [316.0, 41899.0], [314.0, 41902.75], [312.0, 41903.0], [309.0, 41921.0], [308.0, 41902.0], [307.0, 41917.0], [305.0, 41911.5], [323.0, 41896.0], [334.0, 41883.0], [335.0, 41875.0], [333.0, 41893.5], [331.0, 41878.5], [329.0, 41888.5], [325.0, 41887.0], [324.0, 41883.0], [322.0, 41897.0], [320.0, 41901.0], [339.0, 41877.0], [350.0, 41879.0], [348.0, 41883.0], [347.0, 41868.0], [346.0, 41866.0], [344.0, 41878.0], [343.0, 41857.0], [342.0, 41882.0], [341.0, 41883.5], [338.0, 41886.0], [337.0, 41884.0], [336.0, 41880.0], [355.0, 41865.5], [366.0, 41858.5], [364.0, 41857.0], [363.0, 41855.0], [362.0, 41860.5], [360.0, 41862.0], [358.0, 41870.0], [357.0, 41872.0], [356.0, 41874.0], [353.0, 41865.0], [352.0, 41863.0], [371.0, 41844.0], [382.0, 41842.0], [379.0, 41855.0], [377.0, 41846.0], [375.0, 41839.5], [373.0, 41855.0], [372.0, 41851.0], [370.0, 41850.0], [369.0, 41844.0], [368.0, 41855.5], [399.0, 41823.0], [396.0, 41824.25], [392.0, 41834.875], [384.0, 41840.0], [415.0, 41806.0], [414.0, 41796.5], [412.0, 41808.0], [409.0, 41810.75], [405.0, 41819.5], [403.0, 41821.5], [401.0, 41825.0], [400.0, 41830.0], [431.0, 41789.75], [427.0, 41796.857142857145], [420.0, 41805.0], [419.0, 41793.0], [418.0, 41806.0], [417.0, 41800.0], [416.0, 41793.0], [435.0, 41795.0], [447.0, 41774.0], [445.0, 41783.0], [443.0, 41777.0], [442.0, 41774.0], [441.0, 41772.0], [439.0, 41769.0], [438.0, 41781.0], [437.0, 41777.5], [434.0, 41771.0], [433.0, 41783.0], [432.0, 41790.0], [462.0, 41748.0], [463.0, 41762.0], [461.0, 41751.0], [460.0, 41757.0], [459.0, 41754.0], [458.0, 41764.0], [456.0, 41766.0], [454.0, 41760.0], [451.0, 41771.0], [450.0, 41766.0], [449.0, 41774.0], [452.0, 41770.0], [477.0, 41748.0], [478.0, 41740.0], [476.0, 41754.0], [467.0, 41759.0], [466.0, 41739.0], [465.0, 41749.0], [464.0, 41736.0], [475.0, 41737.0], [474.0, 41747.0], [473.0, 41753.0], [472.0, 41748.0], [471.0, 41756.0], [470.0, 41748.0], [468.0, 41742.0], [483.0, 41744.0], [494.0, 41727.0], [495.0, 41729.0], [493.0, 41711.5], [482.0, 41716.0], [481.0, 41746.333333333336], [491.0, 41724.5], [489.0, 41729.0], [487.0, 41718.0], [486.0, 41738.0], [485.0, 41725.0], [484.0, 41732.0], [510.0, 41698.0], [511.0, 41682.0], [509.0, 41693.5], [507.0, 41692.0], [506.0, 41710.0], [504.0, 41705.5], [502.0, 41715.0], [500.0, 41718.0], [499.0, 41718.0], [498.0, 41723.0], [497.0, 41715.0], [496.0, 41702.0], [536.0, 41675.0], [540.0, 41669.0], [543.0, 41672.0], [531.0, 41681.333333333336], [528.0, 41674.0], [542.0, 41675.0], [541.0, 41674.0], [539.0, 41683.0], [538.0, 41654.0], [537.0, 41665.0], [527.0, 41672.0], [515.0, 41697.666666666664], [512.0, 41714.0], [517.0, 41693.0], [516.0, 41702.0], [519.0, 41690.0], [518.0, 41683.0], [526.0, 41674.0], [525.0, 41686.0], [524.0, 41684.0], [523.0, 41685.0], [522.0, 41682.0], [521.0, 41684.0], [520.0, 41686.0], [535.0, 41685.5], [533.0, 41669.0], [569.0, 41636.0], [563.0, 41634.0], [572.0, 41634.0], [575.0, 41616.0], [561.0, 41647.0], [560.0, 41631.0], [571.0, 41620.0], [568.0, 41632.0], [551.0, 41658.0], [550.0, 41664.5], [544.0, 41670.0], [559.0, 41653.0], [558.0, 41655.0], [557.0, 41648.0], [556.0, 41640.0], [555.0, 41651.0], [554.0, 41645.0], [553.0, 41652.0], [552.0, 41642.0], [566.0, 41645.0], [565.0, 41630.0], [564.0, 41646.0], [602.0, 41585.0], [595.0, 41589.0], [606.0, 41584.5], [607.0, 41598.0], [594.0, 41607.0], [593.0, 41605.0], [605.0, 41591.0], [600.0, 41599.5], [582.0, 41602.5], [580.0, 41621.0], [579.0, 41622.0], [578.0, 41610.0], [577.0, 41611.0], [576.0, 41619.0], [591.0, 41599.0], [590.0, 41601.0], [589.0, 41607.0], [588.0, 41620.0], [587.0, 41602.0], [586.0, 41620.0], [585.0, 41613.0], [584.0, 41607.0], [599.0, 41605.0], [597.0, 41599.0], [596.0, 41606.0], [636.0, 41573.0], [639.0, 41548.666666666664], [635.0, 41561.333333333336], [632.0, 41565.0], [631.0, 41565.0], [630.0, 41571.666666666664], [628.0, 41568.0], [625.0, 41572.0], [621.0, 41572.0], [611.0, 41595.5], [610.0, 41592.0], [613.0, 41570.0], [612.0, 41587.666666666664], [615.0, 41582.0], [614.0, 41561.0], [619.0, 41562.0], [618.0, 41563.0], [617.0, 41568.0], [616.0, 41563.0], [669.0, 41491.0], [659.0, 41536.0], [670.0, 41508.5], [656.0, 41537.0], [658.0, 41538.0], [657.0, 41522.0], [668.0, 41500.0], [666.0, 41525.0], [664.0, 41518.0], [646.0, 41545.0], [645.0, 41558.5], [643.0, 41562.0], [642.0, 41549.0], [641.0, 41542.0], [640.0, 41548.0], [655.0, 41537.0], [654.0, 41541.0], [653.0, 41542.0], [651.0, 41538.0], [650.0, 41556.0], [649.0, 41539.0], [648.0, 41556.0], [663.0, 41531.0], [662.0, 41527.0], [660.0, 41521.0], [697.0, 41476.0], [691.0, 41493.5], [700.0, 41478.0], [702.0, 41483.0], [689.0, 41477.0], [688.0, 41501.0], [699.0, 41475.0], [696.0, 41467.5], [678.0, 41489.666666666664], [675.0, 41496.0], [674.0, 41498.0], [673.0, 41499.0], [672.0, 41511.5], [687.0, 41486.5], [685.0, 41494.0], [684.0, 41489.0], [683.0, 41477.0], [682.0, 41502.0], [681.0, 41472.0], [680.0, 41497.5], [694.0, 41484.0], [693.0, 41484.0], [692.0, 41484.0], [732.0, 41109.0], [735.0, 40937.0], [721.0, 41452.0], [720.0, 41449.0], [723.0, 41452.0], [722.0, 41437.0], [725.0, 41428.0], [724.0, 41446.0], [734.0, 41000.0], [733.0, 41020.0], [731.0, 41195.0], [730.0, 41207.0], [729.0, 41292.0], [728.0, 41333.0], [719.0, 41455.5], [705.0, 41466.5], [704.0, 41468.0], [710.0, 41457.333333333336], [707.0, 41462.5], [717.0, 41442.0], [716.0, 41460.8], [712.0, 41469.0], [727.0, 41368.0], [726.0, 41417.0], [742.0, 40177.0], [752.0, 3514.5], [753.0, 3523.0], [748.0, 3523.0], [737.0, 40738.0], [736.0, 40872.0], [739.0, 40528.0], [738.0, 40668.0], [741.0, 40312.0], [740.0, 40466.0], [747.0, 3522.0], [746.0, 3536.0], [745.0, 3516.0], [744.0, 3517.0], [743.0, 3535.0], [798.0, 3427.0], [819.0, 3417.5], [846.0, 3412.0], [843.0, 3423.0], [861.0, 3416.0], [893.0, 2800.3333333333335], [894.0, 2803.0], [892.0, 2786.0], [891.0, 2793.5], [890.0, 2796.0], [864.0, 3418.0], [886.0, 2805.0], [885.0, 2802.0], [881.0, 2802.8], [876.0, 2836.0], [875.0, 3382.0], [874.0, 3364.0], [873.0, 3416.7610619469033], [900.0, 2293.0], [899.0, 2793.2], [1.0, 45085.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[458.6633333333328, 35189.75111111112]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 45043.0], [3.0, 45015.0], [4.0, 44965.0], [5.0, 44925.0], [6.0, 44858.0], [7.0, 44844.0], [8.0, 44788.0], [9.0, 44751.0], [10.0, 44729.0], [11.0, 44665.0], [12.0, 44643.0], [13.0, 44609.0], [14.0, 44548.0], [15.0, 44519.0], [16.0, 44478.0], [17.0, 44446.0], [18.0, 44390.0], [19.0, 44351.0], [20.0, 44355.0], [21.0, 44268.0], [22.0, 44233.0], [23.0, 44207.0], [24.0, 44147.0], [25.0, 44121.0], [26.0, 44101.0], [27.0, 44029.0], [28.0, 43991.0], [29.0, 43927.0], [31.0, 43896.0], [33.0, 43815.5], [35.0, 43705.0], [34.0, 43725.0], [36.0, 43645.0], [39.0, 43531.0], [38.0, 43611.0], [41.0, 43435.0], [40.0, 43462.0], [43.0, 43345.0], [42.0, 43403.0], [45.0, 43272.0], [44.0, 43314.0], [47.0, 43189.0], [46.0, 43253.0], [49.0, 43097.0], [48.0, 43152.0], [51.0, 43036.0], [50.0, 43059.0], [53.0, 42961.0], [52.0, 42981.0], [55.0, 42882.0], [54.0, 42915.0], [57.0, 42798.0], [56.0, 42832.0], [59.0, 42722.0], [58.0, 42766.0], [61.0, 42623.0], [60.0, 42668.0], [63.0, 42546.0], [62.0, 42598.0], [67.0, 42381.0], [66.0, 42431.0], [65.0, 42463.0], [64.0, 42521.0], [71.0, 42233.0], [70.0, 42255.0], [69.0, 42304.0], [68.0, 42330.0], [74.0, 42223.5], [72.0, 42211.0], [79.0, 42171.0], [78.0, 42184.0], [77.0, 42178.0], [76.0, 42188.5], [83.0, 42165.0], [82.0, 42179.0], [81.0, 42171.0], [80.0, 42184.0], [87.0, 42165.333333333336], [84.0, 42169.0], [95.0, 42167.28571428571], [93.0, 42179.0], [99.0, 42159.0], [103.0, 42153.0], [101.0, 42163.5], [106.0, 42156.0], [105.0, 42148.0], [104.0, 42153.0], [111.0, 42150.0], [110.0, 42138.0], [109.0, 42152.0], [108.0, 42151.0], [115.0, 42126.0], [114.0, 42138.5], [112.0, 42141.0], [118.0, 42130.0], [116.0, 42138.0], [123.0, 42139.0], [122.0, 42138.0], [121.0, 42143.0], [120.0, 42142.5], [127.0, 42133.0], [126.0, 42128.5], [124.0, 42118.0], [134.0, 42117.0], [133.0, 42131.0], [132.0, 42116.0], [131.0, 42128.0], [130.0, 42117.5], [128.0, 42130.0], [143.0, 42118.0], [142.0, 42109.0], [141.0, 42101.0], [139.0, 42111.0], [137.0, 42114.0], [136.0, 42114.0], [151.0, 42114.0], [150.0, 42106.5], [148.0, 42109.0], [147.0, 42109.0], [146.0, 42105.5], [144.0, 42104.0], [158.0, 42095.0], [157.0, 42104.0], [156.0, 42107.0], [154.0, 42101.0], [153.0, 42097.0], [167.0, 42082.0], [166.0, 42092.0], [165.0, 42086.0], [163.0, 42096.0], [162.0, 42087.0], [161.0, 42094.0], [175.0, 42082.5], [173.0, 42095.0], [172.0, 42084.0], [171.0, 42091.0], [170.0, 42083.0], [183.0, 42076.0], [181.0, 42088.0], [180.0, 42071.0], [179.0, 42080.0], [177.0, 42078.0], [191.0, 42055.0], [190.0, 42054.0], [189.0, 42063.0], [188.0, 42069.8], [198.0, 42044.0], [197.0, 42039.0], [196.0, 42049.0], [195.0, 42060.0], [194.0, 42063.0], [193.0, 42061.0], [207.0, 42022.0], [206.0, 42036.0], [205.0, 42033.0], [204.0, 42038.66666666667], [215.0, 42014.0], [214.0, 42031.333333333336], [211.0, 42009.0], [210.0, 42016.0], [209.0, 42025.0], [223.0, 42014.0], [222.0, 42019.0], [221.0, 42010.0], [220.0, 42027.0], [219.0, 42016.0], [218.0, 42028.0], [216.0, 42011.0], [231.0, 42005.0], [230.0, 42003.0], [229.0, 42018.0], [228.0, 42021.0], [227.0, 41999.0], [226.0, 42017.0], [225.0, 42010.0], [224.0, 42023.0], [239.0, 42005.0], [238.0, 42011.0], [237.0, 42000.0], [235.0, 42008.0], [233.0, 41999.0], [232.0, 42016.0], [247.0, 41988.0], [245.0, 41969.0], [244.0, 41990.5], [242.0, 41994.0], [241.0, 42004.0], [240.0, 41987.0], [255.0, 41991.0], [254.0, 41993.0], [253.0, 41981.5], [251.0, 41979.0], [249.0, 41986.0], [248.0, 41997.0], [258.0, 41978.0], [271.0, 41968.0], [265.0, 41967.0], [263.0, 41973.0], [262.0, 41959.0], [261.0, 41961.0], [260.0, 41971.0], [259.0, 41972.0], [257.0, 41970.0], [256.0, 41973.0], [275.0, 41948.0], [285.0, 41936.0], [287.0, 41940.0], [284.0, 41943.0], [283.0, 41934.666666666664], [280.0, 41938.0], [279.0, 41936.0], [278.0, 41944.0], [276.0, 41950.0], [274.0, 41965.2], [272.0, 41957.0], [303.0, 41915.0], [302.0, 41916.0], [301.0, 41924.55555555555], [292.0, 41933.0], [291.0, 41929.0], [290.0, 41943.0], [289.0, 41940.0], [318.0, 41896.5], [316.0, 41899.0], [314.0, 41902.75], [312.0, 41903.0], [309.0, 41921.0], [308.0, 41902.0], [307.0, 41917.0], [305.0, 41911.5], [323.0, 41896.0], [334.0, 41883.0], [335.0, 41875.0], [333.0, 41893.5], [331.0, 41878.5], [329.0, 41888.5], [325.0, 41887.0], [324.0, 41883.0], [322.0, 41897.0], [320.0, 41901.0], [339.0, 41877.0], [350.0, 41879.0], [348.0, 41883.0], [347.0, 41868.0], [346.0, 41866.0], [344.0, 41878.0], [343.0, 41857.0], [342.0, 41882.0], [341.0, 41883.5], [338.0, 41886.0], [337.0, 41884.0], [336.0, 41880.0], [355.0, 41865.5], [366.0, 41858.5], [364.0, 41857.0], [363.0, 41855.0], [362.0, 41860.5], [360.0, 41862.0], [358.0, 41870.0], [357.0, 41872.0], [356.0, 41874.0], [353.0, 41865.0], [352.0, 41863.0], [371.0, 41845.0], [382.0, 41842.0], [379.0, 41855.0], [377.0, 41846.0], [375.0, 41839.5], [373.0, 41855.0], [372.0, 41851.0], [370.0, 41850.0], [369.0, 41844.0], [368.0, 41855.5], [399.0, 41823.0], [396.0, 41824.25], [392.0, 41834.87500000001], [384.0, 41840.0], [415.0, 41806.0], [414.0, 41796.5], [412.0, 41808.0], [409.0, 41810.75], [405.0, 41819.5], [403.0, 41821.5], [401.0, 41825.0], [400.0, 41830.0], [431.0, 41789.75], [427.0, 41796.857142857145], [420.0, 41805.0], [419.0, 41793.0], [418.0, 41806.0], [417.0, 41800.0], [416.0, 41793.0], [435.0, 41795.0], [447.0, 41774.0], [445.0, 41783.0], [443.0, 41777.0], [442.0, 41774.0], [441.0, 41772.0], [439.0, 41769.0], [438.0, 41781.0], [437.0, 41777.5], [434.0, 41771.0], [433.0, 41783.0], [432.0, 41790.0], [462.0, 41748.0], [463.0, 41762.0], [461.0, 41751.0], [460.0, 41757.0], [459.0, 41754.0], [458.0, 41764.0], [456.0, 41766.0], [454.0, 41760.0], [451.0, 41771.0], [450.0, 41766.0], [449.0, 41774.0], [452.0, 41770.0], [477.0, 41748.0], [478.0, 41740.0], [476.0, 41754.0], [467.0, 41759.0], [466.0, 41739.0], [465.0, 41749.0], [464.0, 41736.0], [475.0, 41737.0], [474.0, 41747.0], [473.0, 41753.0], [472.0, 41748.0], [471.0, 41756.0], [470.0, 41748.0], [468.0, 41742.0], [483.0, 41744.0], [494.0, 41727.0], [495.0, 41729.0], [493.0, 41711.5], [482.0, 41716.0], [481.0, 41746.333333333336], [491.0, 41724.5], [489.0, 41729.0], [487.0, 41718.0], [486.0, 41738.0], [485.0, 41725.0], [484.0, 41732.0], [510.0, 41698.0], [511.0, 41682.0], [509.0, 41693.5], [507.0, 41692.0], [506.0, 41710.0], [504.0, 41705.5], [502.0, 41715.0], [500.0, 41718.0], [499.0, 41718.0], [498.0, 41723.0], [497.0, 41715.0], [496.0, 41702.0], [536.0, 41675.0], [540.0, 41669.0], [543.0, 41672.0], [531.0, 41681.333333333336], [528.0, 41674.0], [542.0, 41675.0], [541.0, 41674.0], [539.0, 41683.0], [538.0, 41654.0], [537.0, 41665.0], [527.0, 41672.0], [515.0, 41697.666666666664], [512.0, 41714.0], [517.0, 41693.0], [516.0, 41702.0], [519.0, 41690.0], [518.0, 41683.0], [526.0, 41674.0], [525.0, 41686.0], [524.0, 41684.0], [523.0, 41685.0], [522.0, 41682.0], [521.0, 41684.0], [520.0, 41686.0], [535.0, 41685.5], [533.0, 41669.0], [569.0, 41636.0], [563.0, 41634.0], [572.0, 41634.0], [575.0, 41616.0], [561.0, 41647.0], [560.0, 41631.0], [571.0, 41620.0], [568.0, 41632.0], [551.0, 41658.0], [550.0, 41664.5], [544.0, 41670.0], [559.0, 41653.0], [558.0, 41655.0], [557.0, 41648.0], [556.0, 41640.0], [555.0, 41651.0], [554.0, 41645.0], [553.0, 41652.0], [552.0, 41642.0], [566.0, 41645.0], [565.0, 41630.0], [564.0, 41646.0], [602.0, 41585.0], [595.0, 41589.0], [606.0, 41584.5], [607.0, 41598.0], [594.0, 41607.0], [593.0, 41605.0], [605.0, 41591.0], [600.0, 41599.5], [582.0, 41602.5], [580.0, 41621.0], [579.0, 41622.0], [578.0, 41610.0], [577.0, 41611.0], [576.0, 41619.0], [591.0, 41599.0], [590.0, 41601.0], [589.0, 41607.0], [588.0, 41620.0], [587.0, 41602.0], [586.0, 41620.0], [585.0, 41613.0], [584.0, 41607.0], [599.0, 41605.0], [597.0, 41599.0], [596.0, 41606.0], [636.0, 41573.0], [639.0, 41548.666666666664], [635.0, 41561.333333333336], [632.0, 41565.0], [631.0, 41565.0], [630.0, 41571.666666666664], [628.0, 41568.0], [625.0, 41572.0], [621.0, 41572.0], [611.0, 41595.5], [610.0, 41592.0], [613.0, 41570.0], [612.0, 41587.666666666664], [615.0, 41582.0], [614.0, 41561.0], [619.0, 41562.0], [618.0, 41563.0], [617.0, 41568.0], [616.0, 41563.0], [669.0, 41491.0], [659.0, 41536.0], [670.0, 41508.5], [656.0, 41537.0], [658.0, 41538.0], [657.0, 41522.0], [668.0, 41500.0], [666.0, 41525.0], [664.0, 41518.0], [646.0, 41545.0], [645.0, 41558.5], [643.0, 41562.0], [642.0, 41549.0], [641.0, 41542.0], [640.0, 41548.0], [655.0, 41537.0], [654.0, 41541.0], [653.0, 41542.0], [651.0, 41538.0], [650.0, 41556.0], [649.0, 41539.0], [648.0, 41556.0], [663.0, 41531.0], [662.0, 41527.0], [660.0, 41521.0], [697.0, 41476.0], [691.0, 41493.5], [700.0, 41478.0], [702.0, 41483.0], [689.0, 41477.0], [688.0, 41501.0], [699.0, 41475.0], [696.0, 41467.5], [678.0, 41489.666666666664], [675.0, 41496.0], [674.0, 41498.0], [673.0, 41499.0], [672.0, 41511.5], [687.0, 41486.5], [685.0, 41494.0], [684.0, 41489.0], [683.0, 41477.0], [682.0, 41502.0], [681.0, 41472.0], [680.0, 41497.5], [694.0, 41484.0], [693.0, 41484.0], [692.0, 41484.0], [732.0, 41109.0], [735.0, 40937.0], [721.0, 41452.0], [720.0, 41449.0], [723.0, 41452.0], [722.0, 41437.0], [725.0, 41428.0], [724.0, 41446.0], [734.0, 41000.0], [733.0, 41020.0], [731.0, 41195.0], [730.0, 41207.0], [729.0, 41292.0], [728.0, 41333.0], [719.0, 41455.5], [705.0, 41466.5], [704.0, 41468.0], [710.0, 41457.333333333336], [707.0, 41462.5], [717.0, 41442.0], [716.0, 41460.8], [712.0, 41469.0], [727.0, 41368.0], [726.0, 41417.0], [742.0, 40177.0], [752.0, 3514.5], [753.0, 3523.0], [748.0, 3523.0], [737.0, 40738.0], [736.0, 40872.0], [739.0, 40528.0], [738.0, 40668.0], [741.0, 40312.0], [740.0, 40466.0], [747.0, 3522.0], [746.0, 3536.0], [745.0, 3516.0], [744.0, 3517.0], [743.0, 3535.0], [798.0, 3427.0], [819.0, 3417.5], [846.0, 3412.0], [843.0, 3423.0], [861.0, 3416.0], [893.0, 2800.3333333333335], [894.0, 2803.0], [892.0, 2786.0], [891.0, 2793.5], [890.0, 2796.0], [864.0, 3418.0], [886.0, 2805.0], [885.0, 2802.0], [881.0, 2802.8], [876.0, 2836.0], [875.0, 3382.0], [874.0, 3364.0], [873.0, 3416.7610619469033], [900.0, 2293.0], [899.0, 2793.2], [1.0, 45085.0]], "isOverall": false, "label": "Test Fragment", "isController": true}, {"data": [[458.6633333333328, 35189.752222222196]], "isOverall": false, "label": "Test Fragment-Aggregated", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 900.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 211.83333333333334, "minX": 1.68042528E12, "maxY": 10070.666666666666, "series": [{"data": [[1.68042528E12, 7434.516666666666], [1.68042534E12, 10070.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68042528E12, 211.83333333333334], [1.68042534E12, 6275.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042534E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3322.759493670886, "minX": 1.68042528E12, "maxY": 41975.446091644175, "series": [{"data": [[1.68042528E12, 3322.759493670887], [1.68042534E12, 41975.444743935346]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042528E12, 3322.759493670886], [1.68042534E12, 41975.446091644175]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042534E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 471.51265822784785, "minX": 1.68042528E12, "maxY": 41975.416442048525, "series": [{"data": [[1.68042528E12, 471.51265822784785], [1.68042534E12, 41975.416442048525]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042528E12, 471.51265822784796], [1.68042534E12, 41975.416442048525]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042534E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2026.6361185983822, "minX": 1.68042528E12, "maxY": 3303.6455696202543, "series": [{"data": [[1.68042528E12, 3303.6455696202543], [1.68042534E12, 2026.6361185983824]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042528E12, 3303.6455696202534], [1.68042534E12, 2026.6361185983822]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042534E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 40177.0, "minX": 1.68042534E12, "maxY": 45085.0, "series": [{"data": [[1.68042534E12, 45085.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68042534E12, 42204.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68042534E12, 44819.920000000006]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68042534E12, 43613.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68042534E12, 40177.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68042534E12, 41851.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042534E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2796.0, "minX": 3.0, "maxY": 45043.0, "series": [{"data": [[8.0, 40598.0], [24.0, 43448.5], [3.0, 45043.0], [25.0, 44478.0], [222.0, 42092.0], [460.0, 41707.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[133.0, 3421.0], [25.0, 2796.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 460.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 45043.0, "series": [{"data": [[8.0, 40598.0], [24.0, 43448.5], [3.0, 45043.0], [25.0, 44478.0], [222.0, 42091.5], [460.0, 41707.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[133.0, 0.0], [25.0, 2792.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 460.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.68042528E12, "maxY": 15.0, "series": [{"data": [[1.68042528E12, 15.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042528E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68042528E12, "maxY": 12.366666666666667, "series": [{"data": [[1.68042528E12, 0.13333333333333333]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.68042528E12, 2.033333333333333]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.68042534E12, 12.366666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68042528E12, 0.016666666666666666]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.68042528E12, 0.4]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68042528E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042534E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.6333333333333333, "minX": 1.68042528E12, "maxY": 12.366666666666667, "series": [{"data": [[1.68042528E12, 2.6333333333333333]], "isOverall": false, "label": "Test Fragment-failure", "isController": true}, {"data": [[1.68042534E12, 12.366666666666667]], "isOverall": false, "label": "Test Fragment-success", "isController": true}, {"data": [[1.68042528E12, 2.6333333333333333]], "isOverall": false, "label": "Login-failure", "isController": false}, {"data": [[1.68042534E12, 12.366666666666667]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042534E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.266666666666667, "minX": 1.68042528E12, "maxY": 24.733333333333334, "series": [{"data": [[1.68042534E12, 24.733333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68042528E12, 5.266666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042534E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

