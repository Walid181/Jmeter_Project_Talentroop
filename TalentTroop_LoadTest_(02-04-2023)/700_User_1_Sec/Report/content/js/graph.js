/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1211.0, "minX": 0.0, "maxY": 26177.0, "series": [{"data": [[0.0, 1211.0], [0.1, 1211.0], [0.2, 17860.0], [0.3, 23258.0], [0.4, 23258.0], [0.5, 23484.0], [0.6, 23836.0], [0.7, 23836.0], [0.8, 23935.0], [0.9, 24001.0], [1.0, 24030.0], [1.1, 24030.0], [1.2, 24079.0], [1.3, 24108.0], [1.4, 24108.0], [1.5, 24119.0], [1.6, 24121.0], [1.7, 24121.0], [1.8, 24127.0], [1.9, 24134.0], [2.0, 24144.0], [2.1, 24144.0], [2.2, 24144.0], [2.3, 24148.0], [2.4, 24148.0], [2.5, 24149.0], [2.6, 24164.0], [2.7, 24164.0], [2.8, 24167.0], [2.9, 24167.0], [3.0, 24171.0], [3.1, 24171.0], [3.2, 24172.0], [3.3, 24173.0], [3.4, 24173.0], [3.5, 24173.0], [3.6, 24173.0], [3.7, 24173.0], [3.8, 24174.0], [3.9, 24175.0], [4.0, 24176.0], [4.1, 24176.0], [4.2, 24177.0], [4.3, 24178.0], [4.4, 24178.0], [4.5, 24178.0], [4.6, 24179.0], [4.7, 24179.0], [4.8, 24180.0], [4.9, 24181.0], [5.0, 24183.0], [5.1, 24183.0], [5.2, 24183.0], [5.3, 24184.0], [5.4, 24184.0], [5.5, 24184.0], [5.6, 24184.0], [5.7, 24184.0], [5.8, 24185.0], [5.9, 24185.0], [6.0, 24186.0], [6.1, 24186.0], [6.2, 24186.0], [6.3, 24186.0], [6.4, 24186.0], [6.5, 24187.0], [6.6, 24188.0], [6.7, 24188.0], [6.8, 24188.0], [6.9, 24189.0], [7.0, 24189.0], [7.1, 24189.0], [7.2, 24189.0], [7.3, 24189.0], [7.4, 24189.0], [7.5, 24189.0], [7.6, 24191.0], [7.7, 24191.0], [7.8, 24191.0], [7.9, 24192.0], [8.0, 24194.0], [8.1, 24194.0], [8.2, 24194.0], [8.3, 24194.0], [8.4, 24194.0], [8.5, 24195.0], [8.6, 24195.0], [8.7, 24195.0], [8.8, 24197.0], [8.9, 24197.0], [9.0, 24197.0], [9.1, 24200.0], [9.2, 24200.0], [9.3, 24201.0], [9.4, 24201.0], [9.5, 24201.0], [9.6, 24201.0], [9.7, 24201.0], [9.8, 24202.0], [9.9, 24202.0], [10.0, 24202.0], [10.1, 24203.0], [10.2, 24203.0], [10.3, 24205.0], [10.4, 24205.0], [10.5, 24206.0], [10.6, 24208.0], [10.7, 24208.0], [10.8, 24208.0], [10.9, 24209.0], [11.0, 24209.0], [11.1, 24209.0], [11.2, 24210.0], [11.3, 24210.0], [11.4, 24210.0], [11.5, 24211.0], [11.6, 24212.0], [11.7, 24212.0], [11.8, 24213.0], [11.9, 24213.0], [12.0, 24213.0], [12.1, 24214.0], [12.2, 24214.0], [12.3, 24216.0], [12.4, 24216.0], [12.5, 24216.0], [12.6, 24216.0], [12.7, 24216.0], [12.8, 24217.0], [12.9, 24218.0], [13.0, 24218.0], [13.1, 24219.0], [13.2, 24219.0], [13.3, 24222.0], [13.4, 24222.0], [13.5, 24225.0], [13.6, 24227.0], [13.7, 24227.0], [13.8, 24228.0], [13.9, 24231.0], [14.0, 24231.0], [14.1, 24233.0], [14.2, 24233.0], [14.3, 24233.0], [14.4, 24233.0], [14.5, 24236.0], [14.6, 24239.0], [14.7, 24239.0], [14.8, 24239.0], [14.9, 24240.0], [15.0, 24240.0], [15.1, 24240.0], [15.2, 24242.0], [15.3, 24243.0], [15.4, 24243.0], [15.5, 24244.0], [15.6, 24246.0], [15.7, 24246.0], [15.8, 24247.0], [15.9, 24247.0], [16.0, 24247.0], [16.1, 24248.0], [16.2, 24248.0], [16.3, 24249.0], [16.4, 24249.0], [16.5, 24251.0], [16.6, 24251.0], [16.7, 24251.0], [16.8, 24251.0], [16.9, 24251.0], [17.0, 24251.0], [17.1, 24251.0], [17.2, 24253.0], [17.3, 24254.0], [17.4, 24254.0], [17.5, 24255.0], [17.6, 24255.0], [17.7, 24255.0], [17.8, 24255.0], [17.9, 24256.0], [18.0, 24256.0], [18.1, 24256.0], [18.2, 24256.0], [18.3, 24256.0], [18.4, 24256.0], [18.5, 24258.0], [18.6, 24259.0], [18.7, 24259.0], [18.8, 24259.0], [18.9, 24259.0], [19.0, 24261.0], [19.1, 24261.0], [19.2, 24262.0], [19.3, 24262.0], [19.4, 24262.0], [19.5, 24262.0], [19.6, 24263.0], [19.7, 24263.0], [19.8, 24264.0], [19.9, 24264.0], [20.0, 24265.0], [20.1, 24265.0], [20.2, 24266.0], [20.3, 24266.0], [20.4, 24266.0], [20.5, 24266.0], [20.6, 24268.0], [20.7, 24268.0], [20.8, 24268.0], [20.9, 24268.0], [21.0, 24268.0], [21.1, 24268.0], [21.2, 24269.0], [21.3, 24269.0], [21.4, 24269.0], [21.5, 24270.0], [21.6, 24270.0], [21.7, 24270.0], [21.8, 24270.0], [21.9, 24270.0], [22.0, 24271.0], [22.1, 24271.0], [22.2, 24271.0], [22.3, 24272.0], [22.4, 24272.0], [22.5, 24272.0], [22.6, 24273.0], [22.7, 24273.0], [22.8, 24273.0], [22.9, 24274.0], [23.0, 24274.0], [23.1, 24274.0], [23.2, 24275.0], [23.3, 24276.0], [23.4, 24276.0], [23.5, 24278.0], [23.6, 24278.0], [23.7, 24278.0], [23.8, 24279.0], [23.9, 24281.0], [24.0, 24282.0], [24.1, 24282.0], [24.2, 24283.0], [24.3, 24283.0], [24.4, 24283.0], [24.5, 24283.0], [24.6, 24284.0], [24.7, 24284.0], [24.8, 24285.0], [24.9, 24286.0], [25.0, 24287.0], [25.1, 24287.0], [25.2, 24287.0], [25.3, 24288.0], [25.4, 24288.0], [25.5, 24289.0], [25.6, 24289.0], [25.7, 24289.0], [25.8, 24291.0], [25.9, 24291.0], [26.0, 24292.0], [26.1, 24292.0], [26.2, 24294.0], [26.3, 24294.0], [26.4, 24294.0], [26.5, 24295.0], [26.6, 24296.0], [26.7, 24296.0], [26.8, 24296.0], [26.9, 24297.0], [27.0, 24297.0], [27.1, 24297.0], [27.2, 24298.0], [27.3, 24298.0], [27.4, 24298.0], [27.5, 24298.0], [27.6, 24299.0], [27.7, 24299.0], [27.8, 24299.0], [27.9, 24303.0], [28.0, 24304.0], [28.1, 24304.0], [28.2, 24305.0], [28.3, 24309.0], [28.4, 24309.0], [28.5, 24309.0], [28.6, 24310.0], [28.7, 24310.0], [28.8, 24312.0], [28.9, 24314.0], [29.0, 24315.0], [29.1, 24315.0], [29.2, 24316.0], [29.3, 24329.0], [29.4, 24329.0], [29.5, 24330.0], [29.6, 24334.0], [29.7, 24334.0], [29.8, 24345.0], [29.9, 24352.0], [30.0, 24354.0], [30.1, 24354.0], [30.2, 24355.0], [30.3, 24360.0], [30.4, 24360.0], [30.5, 24373.0], [30.6, 24374.0], [30.7, 24374.0], [30.8, 24374.0], [30.9, 24390.0], [31.0, 24398.0], [31.1, 24398.0], [31.2, 24400.0], [31.3, 24403.0], [31.4, 24403.0], [31.5, 24407.0], [31.6, 24416.0], [31.7, 24416.0], [31.8, 24423.0], [31.9, 24430.0], [32.0, 24430.0], [32.1, 24430.0], [32.2, 24441.0], [32.3, 24443.0], [32.4, 24443.0], [32.5, 24445.0], [32.6, 24448.0], [32.7, 24448.0], [32.8, 24450.0], [32.9, 24450.0], [33.0, 24455.0], [33.1, 24455.0], [33.2, 24455.0], [33.3, 24456.0], [33.4, 24456.0], [33.5, 24456.0], [33.6, 24457.0], [33.7, 24457.0], [33.8, 24458.0], [33.9, 24458.0], [34.0, 24463.0], [34.1, 24463.0], [34.2, 24463.0], [34.3, 24467.0], [34.4, 24467.0], [34.5, 24469.0], [34.6, 24469.0], [34.7, 24469.0], [34.8, 24470.0], [34.9, 24471.0], [35.0, 24472.0], [35.1, 24472.0], [35.2, 24472.0], [35.3, 24472.0], [35.4, 24472.0], [35.5, 24473.0], [35.6, 24473.0], [35.7, 24473.0], [35.8, 24475.0], [35.9, 24475.0], [36.0, 24475.0], [36.1, 24475.0], [36.2, 24475.0], [36.3, 24476.0], [36.4, 24476.0], [36.5, 24476.0], [36.6, 24477.0], [36.7, 24477.0], [36.8, 24477.0], [36.9, 24477.0], [37.0, 24479.0], [37.1, 24479.0], [37.2, 24482.0], [37.3, 24483.0], [37.4, 24483.0], [37.5, 24483.0], [37.6, 24483.0], [37.7, 24483.0], [37.8, 24486.0], [37.9, 24486.0], [38.0, 24486.0], [38.1, 24486.0], [38.2, 24486.0], [38.3, 24487.0], [38.4, 24487.0], [38.5, 24487.0], [38.6, 24490.0], [38.7, 24490.0], [38.8, 24490.0], [38.9, 24491.0], [39.0, 24493.0], [39.1, 24493.0], [39.2, 24494.0], [39.3, 24494.0], [39.4, 24494.0], [39.5, 24494.0], [39.6, 24494.0], [39.7, 24494.0], [39.8, 24495.0], [39.9, 24496.0], [40.0, 24497.0], [40.1, 24497.0], [40.2, 24498.0], [40.3, 24498.0], [40.4, 24498.0], [40.5, 24498.0], [40.6, 24499.0], [40.7, 24499.0], [40.8, 24500.0], [40.9, 24500.0], [41.0, 24502.0], [41.1, 24502.0], [41.2, 24502.0], [41.3, 24502.0], [41.4, 24502.0], [41.5, 24502.0], [41.6, 24502.0], [41.7, 24502.0], [41.8, 24503.0], [41.9, 24505.0], [42.0, 24505.0], [42.1, 24505.0], [42.2, 24505.0], [42.3, 24505.0], [42.4, 24505.0], [42.5, 24506.0], [42.6, 24507.0], [42.7, 24507.0], [42.8, 24507.0], [42.9, 24507.0], [43.0, 24507.0], [43.1, 24507.0], [43.2, 24507.0], [43.3, 24508.0], [43.4, 24508.0], [43.5, 24508.0], [43.6, 24510.0], [43.7, 24510.0], [43.8, 24511.0], [43.9, 24511.0], [44.0, 24511.0], [44.1, 24511.0], [44.2, 24512.0], [44.3, 24512.0], [44.4, 24512.0], [44.5, 24512.0], [44.6, 24513.0], [44.7, 24513.0], [44.8, 24514.0], [44.9, 24514.0], [45.0, 24514.0], [45.1, 24518.0], [45.2, 24519.0], [45.3, 24519.0], [45.4, 24519.0], [45.5, 24519.0], [45.6, 24520.0], [45.7, 24520.0], [45.8, 24521.0], [45.9, 24521.0], [46.0, 24521.0], [46.1, 24522.0], [46.2, 24522.0], [46.3, 24522.0], [46.4, 24522.0], [46.5, 24523.0], [46.6, 24524.0], [46.7, 24524.0], [46.8, 24525.0], [46.9, 24525.0], [47.0, 24525.0], [47.1, 24526.0], [47.2, 24526.0], [47.3, 24528.0], [47.4, 24528.0], [47.5, 24530.0], [47.6, 24530.0], [47.7, 24530.0], [47.8, 24531.0], [47.9, 24531.0], [48.0, 24531.0], [48.1, 24534.0], [48.2, 24535.0], [48.3, 24535.0], [48.4, 24535.0], [48.5, 24536.0], [48.6, 24536.0], [48.7, 24536.0], [48.8, 24537.0], [48.9, 24537.0], [49.0, 24537.0], [49.1, 24538.0], [49.2, 24538.0], [49.3, 24538.0], [49.4, 24538.0], [49.5, 24538.0], [49.6, 24543.0], [49.7, 24543.0], [49.8, 24543.0], [49.9, 24544.0], [50.0, 24544.0], [50.1, 24545.0], [50.2, 24546.0], [50.3, 24546.0], [50.4, 24546.0], [50.5, 24547.0], [50.6, 24548.0], [50.7, 24548.0], [50.8, 24550.0], [50.9, 24550.0], [51.0, 24550.0], [51.1, 24550.0], [51.2, 24551.0], [51.3, 24551.0], [51.4, 24551.0], [51.5, 24552.0], [51.6, 24553.0], [51.7, 24553.0], [51.8, 24553.0], [51.9, 24553.0], [52.0, 24553.0], [52.1, 24553.0], [52.2, 24556.0], [52.3, 24557.0], [52.4, 24557.0], [52.5, 24557.0], [52.6, 24559.0], [52.7, 24559.0], [52.8, 24559.0], [52.9, 24560.0], [53.0, 24560.0], [53.1, 24562.0], [53.2, 24563.0], [53.3, 24563.0], [53.4, 24563.0], [53.5, 24564.0], [53.6, 24565.0], [53.7, 24565.0], [53.8, 24566.0], [53.9, 24566.0], [54.0, 24566.0], [54.1, 24567.0], [54.2, 24567.0], [54.3, 24567.0], [54.4, 24567.0], [54.5, 24568.0], [54.6, 24568.0], [54.7, 24568.0], [54.8, 24568.0], [54.9, 24569.0], [55.0, 24569.0], [55.1, 24570.0], [55.2, 24571.0], [55.3, 24571.0], [55.4, 24571.0], [55.5, 24572.0], [55.6, 24572.0], [55.7, 24572.0], [55.8, 24574.0], [55.9, 24574.0], [56.0, 24574.0], [56.1, 24575.0], [56.2, 24575.0], [56.3, 24575.0], [56.4, 24575.0], [56.5, 24576.0], [56.6, 24576.0], [56.7, 24576.0], [56.8, 24576.0], [56.9, 24576.0], [57.0, 24576.0], [57.1, 24577.0], [57.2, 24577.0], [57.3, 24578.0], [57.4, 24578.0], [57.5, 24578.0], [57.6, 24578.0], [57.7, 24578.0], [57.8, 24579.0], [57.9, 24579.0], [58.0, 24579.0], [58.1, 24582.0], [58.2, 24582.0], [58.3, 24582.0], [58.4, 24582.0], [58.5, 24583.0], [58.6, 24583.0], [58.7, 24583.0], [58.8, 24584.0], [58.9, 24584.0], [59.0, 24584.0], [59.1, 24585.0], [59.2, 24585.0], [59.3, 24585.0], [59.4, 24585.0], [59.5, 24585.0], [59.6, 24586.0], [59.7, 24586.0], [59.8, 24586.0], [59.9, 24587.0], [60.0, 24587.0], [60.1, 24587.0], [60.2, 24588.0], [60.3, 24588.0], [60.4, 24588.0], [60.5, 24589.0], [60.6, 24591.0], [60.7, 24591.0], [60.8, 24592.0], [60.9, 24592.0], [61.0, 24592.0], [61.1, 24592.0], [61.2, 24593.0], [61.3, 24594.0], [61.4, 24594.0], [61.5, 24595.0], [61.6, 24596.0], [61.7, 24596.0], [61.8, 24597.0], [61.9, 24598.0], [62.0, 24598.0], [62.1, 24598.0], [62.2, 24599.0], [62.3, 24599.0], [62.4, 24599.0], [62.5, 24599.0], [62.6, 24602.0], [62.7, 24602.0], [62.8, 24603.0], [62.9, 24605.0], [63.0, 24605.0], [63.1, 24605.0], [63.2, 24607.0], [63.3, 24607.0], [63.4, 24607.0], [63.5, 24608.0], [63.6, 24609.0], [63.7, 24609.0], [63.8, 24610.0], [63.9, 24611.0], [64.0, 24611.0], [64.1, 24613.0], [64.2, 24613.0], [64.3, 24616.0], [64.4, 24616.0], [64.5, 24616.0], [64.6, 24616.0], [64.7, 24616.0], [64.8, 24618.0], [64.9, 24619.0], [65.0, 24619.0], [65.1, 24619.0], [65.2, 24619.0], [65.3, 24620.0], [65.4, 24620.0], [65.5, 24620.0], [65.6, 24620.0], [65.7, 24620.0], [65.8, 24621.0], [65.9, 24621.0], [66.0, 24621.0], [66.1, 24621.0], [66.2, 24621.0], [66.3, 24622.0], [66.4, 24622.0], [66.5, 24624.0], [66.6, 24625.0], [66.7, 24625.0], [66.8, 24625.0], [66.9, 24626.0], [67.0, 24626.0], [67.1, 24629.0], [67.2, 24629.0], [67.3, 24629.0], [67.4, 24629.0], [67.5, 24630.0], [67.6, 24631.0], [67.7, 24631.0], [67.8, 24632.0], [67.9, 24635.0], [68.0, 24635.0], [68.1, 24635.0], [68.2, 24636.0], [68.3, 24637.0], [68.4, 24637.0], [68.5, 24638.0], [68.6, 24639.0], [68.7, 24639.0], [68.8, 24639.0], [68.9, 24640.0], [69.0, 24640.0], [69.1, 24641.0], [69.2, 24641.0], [69.3, 24642.0], [69.4, 24642.0], [69.5, 24643.0], [69.6, 24644.0], [69.7, 24644.0], [69.8, 24644.0], [69.9, 24647.0], [70.0, 24647.0], [70.1, 24647.0], [70.2, 24648.0], [70.3, 24648.0], [70.4, 24648.0], [70.5, 24649.0], [70.6, 24649.0], [70.7, 24649.0], [70.8, 24650.0], [70.9, 24653.0], [71.0, 24653.0], [71.1, 24654.0], [71.2, 24657.0], [71.3, 24657.0], [71.4, 24657.0], [71.5, 24659.0], [71.6, 24659.0], [71.7, 24659.0], [71.8, 24660.0], [71.9, 24660.0], [72.0, 24660.0], [72.1, 24661.0], [72.2, 24661.0], [72.3, 24663.0], [72.4, 24663.0], [72.5, 24663.0], [72.6, 24664.0], [72.7, 24664.0], [72.8, 24664.0], [72.9, 24665.0], [73.0, 24665.0], [73.1, 24665.0], [73.2, 24666.0], [73.3, 24666.0], [73.4, 24666.0], [73.5, 24666.0], [73.6, 24666.0], [73.7, 24666.0], [73.8, 24667.0], [73.9, 24667.0], [74.0, 24667.0], [74.1, 24668.0], [74.2, 24669.0], [74.3, 24669.0], [74.4, 24669.0], [74.5, 24670.0], [74.6, 24671.0], [74.7, 24671.0], [74.8, 24671.0], [74.9, 24671.0], [75.0, 24671.0], [75.1, 24672.0], [75.2, 24675.0], [75.3, 24677.0], [75.4, 24677.0], [75.5, 24678.0], [75.6, 24678.0], [75.7, 24678.0], [75.8, 24681.0], [75.9, 24681.0], [76.0, 24681.0], [76.1, 24682.0], [76.2, 24684.0], [76.3, 24684.0], [76.4, 24684.0], [76.5, 24686.0], [76.6, 24687.0], [76.7, 24687.0], [76.8, 24688.0], [76.9, 24688.0], [77.0, 24688.0], [77.1, 24689.0], [77.2, 24689.0], [77.3, 24690.0], [77.4, 24690.0], [77.5, 24691.0], [77.6, 24691.0], [77.7, 24691.0], [77.8, 24691.0], [77.9, 24692.0], [78.0, 24692.0], [78.1, 24693.0], [78.2, 24693.0], [78.3, 24694.0], [78.4, 24694.0], [78.5, 24694.0], [78.6, 24696.0], [78.7, 24696.0], [78.8, 24697.0], [78.9, 24697.0], [79.0, 24697.0], [79.1, 24697.0], [79.2, 24698.0], [79.3, 24699.0], [79.4, 24699.0], [79.5, 24702.0], [79.6, 24702.0], [79.7, 24702.0], [79.8, 24702.0], [79.9, 24702.0], [80.0, 24702.0], [80.1, 24703.0], [80.2, 24703.0], [80.3, 24706.0], [80.4, 24706.0], [80.5, 24707.0], [80.6, 24707.0], [80.7, 24707.0], [80.8, 24708.0], [80.9, 24708.0], [81.0, 24708.0], [81.1, 24708.0], [81.2, 24709.0], [81.3, 24709.0], [81.4, 24709.0], [81.5, 24709.0], [81.6, 24709.0], [81.7, 24709.0], [81.8, 24710.0], [81.9, 24711.0], [82.0, 24711.0], [82.1, 24711.0], [82.2, 24712.0], [82.3, 24713.0], [82.4, 24713.0], [82.5, 24713.0], [82.6, 24713.0], [82.7, 24713.0], [82.8, 24714.0], [82.9, 24715.0], [83.0, 24715.0], [83.1, 24715.0], [83.2, 24718.0], [83.3, 24718.0], [83.4, 24718.0], [83.5, 24721.0], [83.6, 24721.0], [83.7, 24721.0], [83.8, 24722.0], [83.9, 24724.0], [84.0, 24724.0], [84.1, 24724.0], [84.2, 24726.0], [84.3, 24727.0], [84.4, 24727.0], [84.5, 24727.0], [84.6, 24727.0], [84.7, 24727.0], [84.8, 24729.0], [84.9, 24730.0], [85.0, 24730.0], [85.1, 24731.0], [85.2, 24732.0], [85.3, 24732.0], [85.4, 24732.0], [85.5, 24734.0], [85.6, 24735.0], [85.7, 24735.0], [85.8, 24735.0], [85.9, 24736.0], [86.0, 24736.0], [86.1, 24738.0], [86.2, 24738.0], [86.3, 24740.0], [86.4, 24740.0], [86.5, 24741.0], [86.6, 24741.0], [86.7, 24741.0], [86.8, 24743.0], [86.9, 24744.0], [87.0, 24744.0], [87.1, 24744.0], [87.2, 24745.0], [87.3, 24747.0], [87.4, 24747.0], [87.5, 24749.0], [87.6, 24755.0], [87.7, 24755.0], [87.8, 24755.0], [87.9, 24758.0], [88.0, 24758.0], [88.1, 24758.0], [88.2, 24759.0], [88.3, 24760.0], [88.4, 24760.0], [88.5, 24764.0], [88.6, 24765.0], [88.7, 24765.0], [88.8, 24766.0], [88.9, 24768.0], [89.0, 24768.0], [89.1, 24769.0], [89.2, 24772.0], [89.3, 24772.0], [89.4, 24772.0], [89.5, 24774.0], [89.6, 24776.0], [89.7, 24776.0], [89.8, 24776.0], [89.9, 24779.0], [90.0, 24779.0], [90.1, 24782.0], [90.2, 24784.0], [90.3, 24793.0], [90.4, 24793.0], [90.5, 24797.0], [90.6, 24800.0], [90.7, 24800.0], [90.8, 24801.0], [90.9, 24805.0], [91.0, 24805.0], [91.1, 24806.0], [91.2, 24808.0], [91.3, 24815.0], [91.4, 24815.0], [91.5, 24816.0], [91.6, 24817.0], [91.7, 24817.0], [91.8, 24818.0], [91.9, 24836.0], [92.0, 24836.0], [92.1, 24836.0], [92.2, 24843.0], [92.3, 24852.0], [92.4, 24852.0], [92.5, 24852.0], [92.6, 24867.0], [92.7, 24867.0], [92.8, 24873.0], [92.9, 24888.0], [93.0, 24888.0], [93.1, 24897.0], [93.2, 24938.0], [93.3, 24955.0], [93.4, 24955.0], [93.5, 24978.0], [93.6, 25015.0], [93.7, 25015.0], [93.8, 25031.0], [93.9, 25040.0], [94.0, 25040.0], [94.1, 25054.0], [94.2, 25078.0], [94.3, 25111.0], [94.4, 25111.0], [94.5, 25131.0], [94.6, 25169.0], [94.7, 25169.0], [94.8, 25194.0], [94.9, 25238.0], [95.0, 25238.0], [95.1, 25247.0], [95.2, 25288.0], [95.3, 25304.0], [95.4, 25304.0], [95.5, 25322.0], [95.6, 25354.0], [95.7, 25354.0], [95.8, 25382.0], [95.9, 25406.0], [96.0, 25497.0], [96.1, 25497.0], [96.2, 25503.0], [96.3, 25531.0], [96.4, 25531.0], [96.5, 25551.0], [96.6, 25600.0], [96.7, 25600.0], [96.8, 25614.0], [96.9, 25625.0], [97.0, 25663.0], [97.1, 25663.0], [97.2, 25671.0], [97.3, 25709.0], [97.4, 25709.0], [97.5, 25737.0], [97.6, 25755.0], [97.7, 25755.0], [97.8, 25798.0], [97.9, 25814.0], [98.0, 25855.0], [98.1, 25855.0], [98.2, 25891.0], [98.3, 25896.0], [98.4, 25896.0], [98.5, 25909.0], [98.6, 25959.0], [98.7, 25959.0], [98.8, 25981.0], [98.9, 25994.0], [99.0, 26025.0], [99.1, 26025.0], [99.2, 26059.0], [99.3, 26064.0], [99.4, 26064.0], [99.5, 26101.0], [99.6, 26143.0], [99.7, 26143.0], [99.8, 26149.0], [99.9, 26177.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 1211.0], [0.1, 1211.0], [0.2, 17860.0], [0.3, 23258.0], [0.4, 23258.0], [0.5, 23484.0], [0.6, 23836.0], [0.7, 23836.0], [0.8, 23935.0], [0.9, 24001.0], [1.0, 24030.0], [1.1, 24030.0], [1.2, 24079.0], [1.3, 24108.0], [1.4, 24108.0], [1.5, 24119.0], [1.6, 24121.0], [1.7, 24121.0], [1.8, 24127.0], [1.9, 24134.0], [2.0, 24144.0], [2.1, 24144.0], [2.2, 24144.0], [2.3, 24148.0], [2.4, 24148.0], [2.5, 24149.0], [2.6, 24164.0], [2.7, 24164.0], [2.8, 24167.0], [2.9, 24167.0], [3.0, 24171.0], [3.1, 24171.0], [3.2, 24172.0], [3.3, 24173.0], [3.4, 24173.0], [3.5, 24173.0], [3.6, 24173.0], [3.7, 24173.0], [3.8, 24174.0], [3.9, 24175.0], [4.0, 24176.0], [4.1, 24176.0], [4.2, 24177.0], [4.3, 24178.0], [4.4, 24178.0], [4.5, 24178.0], [4.6, 24179.0], [4.7, 24179.0], [4.8, 24180.0], [4.9, 24181.0], [5.0, 24183.0], [5.1, 24183.0], [5.2, 24183.0], [5.3, 24184.0], [5.4, 24184.0], [5.5, 24184.0], [5.6, 24184.0], [5.7, 24184.0], [5.8, 24185.0], [5.9, 24185.0], [6.0, 24186.0], [6.1, 24186.0], [6.2, 24186.0], [6.3, 24186.0], [6.4, 24186.0], [6.5, 24187.0], [6.6, 24188.0], [6.7, 24188.0], [6.8, 24188.0], [6.9, 24189.0], [7.0, 24189.0], [7.1, 24189.0], [7.2, 24189.0], [7.3, 24189.0], [7.4, 24189.0], [7.5, 24189.0], [7.6, 24191.0], [7.7, 24191.0], [7.8, 24191.0], [7.9, 24192.0], [8.0, 24194.0], [8.1, 24194.0], [8.2, 24194.0], [8.3, 24194.0], [8.4, 24194.0], [8.5, 24195.0], [8.6, 24195.0], [8.7, 24195.0], [8.8, 24197.0], [8.9, 24197.0], [9.0, 24197.0], [9.1, 24200.0], [9.2, 24200.0], [9.3, 24201.0], [9.4, 24201.0], [9.5, 24201.0], [9.6, 24201.0], [9.7, 24201.0], [9.8, 24202.0], [9.9, 24202.0], [10.0, 24202.0], [10.1, 24203.0], [10.2, 24203.0], [10.3, 24205.0], [10.4, 24205.0], [10.5, 24206.0], [10.6, 24208.0], [10.7, 24208.0], [10.8, 24208.0], [10.9, 24209.0], [11.0, 24209.0], [11.1, 24209.0], [11.2, 24210.0], [11.3, 24210.0], [11.4, 24210.0], [11.5, 24211.0], [11.6, 24212.0], [11.7, 24212.0], [11.8, 24213.0], [11.9, 24213.0], [12.0, 24213.0], [12.1, 24214.0], [12.2, 24214.0], [12.3, 24216.0], [12.4, 24216.0], [12.5, 24216.0], [12.6, 24216.0], [12.7, 24216.0], [12.8, 24217.0], [12.9, 24218.0], [13.0, 24218.0], [13.1, 24219.0], [13.2, 24219.0], [13.3, 24222.0], [13.4, 24222.0], [13.5, 24225.0], [13.6, 24227.0], [13.7, 24227.0], [13.8, 24228.0], [13.9, 24231.0], [14.0, 24231.0], [14.1, 24233.0], [14.2, 24233.0], [14.3, 24233.0], [14.4, 24233.0], [14.5, 24236.0], [14.6, 24239.0], [14.7, 24239.0], [14.8, 24239.0], [14.9, 24240.0], [15.0, 24240.0], [15.1, 24240.0], [15.2, 24242.0], [15.3, 24243.0], [15.4, 24243.0], [15.5, 24244.0], [15.6, 24246.0], [15.7, 24246.0], [15.8, 24247.0], [15.9, 24247.0], [16.0, 24247.0], [16.1, 24248.0], [16.2, 24248.0], [16.3, 24249.0], [16.4, 24249.0], [16.5, 24251.0], [16.6, 24251.0], [16.7, 24251.0], [16.8, 24251.0], [16.9, 24251.0], [17.0, 24251.0], [17.1, 24251.0], [17.2, 24253.0], [17.3, 24254.0], [17.4, 24254.0], [17.5, 24255.0], [17.6, 24255.0], [17.7, 24255.0], [17.8, 24255.0], [17.9, 24256.0], [18.0, 24256.0], [18.1, 24256.0], [18.2, 24256.0], [18.3, 24256.0], [18.4, 24256.0], [18.5, 24258.0], [18.6, 24259.0], [18.7, 24259.0], [18.8, 24259.0], [18.9, 24259.0], [19.0, 24261.0], [19.1, 24261.0], [19.2, 24262.0], [19.3, 24262.0], [19.4, 24262.0], [19.5, 24262.0], [19.6, 24263.0], [19.7, 24263.0], [19.8, 24264.0], [19.9, 24264.0], [20.0, 24265.0], [20.1, 24265.0], [20.2, 24266.0], [20.3, 24266.0], [20.4, 24266.0], [20.5, 24266.0], [20.6, 24268.0], [20.7, 24268.0], [20.8, 24268.0], [20.9, 24268.0], [21.0, 24268.0], [21.1, 24268.0], [21.2, 24269.0], [21.3, 24269.0], [21.4, 24269.0], [21.5, 24270.0], [21.6, 24270.0], [21.7, 24270.0], [21.8, 24270.0], [21.9, 24270.0], [22.0, 24271.0], [22.1, 24271.0], [22.2, 24271.0], [22.3, 24272.0], [22.4, 24272.0], [22.5, 24272.0], [22.6, 24273.0], [22.7, 24273.0], [22.8, 24273.0], [22.9, 24274.0], [23.0, 24274.0], [23.1, 24274.0], [23.2, 24275.0], [23.3, 24276.0], [23.4, 24276.0], [23.5, 24278.0], [23.6, 24278.0], [23.7, 24278.0], [23.8, 24279.0], [23.9, 24281.0], [24.0, 24282.0], [24.1, 24282.0], [24.2, 24283.0], [24.3, 24283.0], [24.4, 24283.0], [24.5, 24283.0], [24.6, 24284.0], [24.7, 24284.0], [24.8, 24285.0], [24.9, 24286.0], [25.0, 24287.0], [25.1, 24287.0], [25.2, 24287.0], [25.3, 24288.0], [25.4, 24288.0], [25.5, 24289.0], [25.6, 24289.0], [25.7, 24289.0], [25.8, 24291.0], [25.9, 24291.0], [26.0, 24292.0], [26.1, 24292.0], [26.2, 24294.0], [26.3, 24294.0], [26.4, 24294.0], [26.5, 24295.0], [26.6, 24296.0], [26.7, 24296.0], [26.8, 24296.0], [26.9, 24297.0], [27.0, 24297.0], [27.1, 24297.0], [27.2, 24298.0], [27.3, 24298.0], [27.4, 24298.0], [27.5, 24298.0], [27.6, 24299.0], [27.7, 24299.0], [27.8, 24299.0], [27.9, 24303.0], [28.0, 24304.0], [28.1, 24304.0], [28.2, 24305.0], [28.3, 24309.0], [28.4, 24309.0], [28.5, 24309.0], [28.6, 24310.0], [28.7, 24310.0], [28.8, 24312.0], [28.9, 24314.0], [29.0, 24315.0], [29.1, 24315.0], [29.2, 24316.0], [29.3, 24329.0], [29.4, 24329.0], [29.5, 24330.0], [29.6, 24334.0], [29.7, 24334.0], [29.8, 24345.0], [29.9, 24352.0], [30.0, 24354.0], [30.1, 24354.0], [30.2, 24355.0], [30.3, 24360.0], [30.4, 24360.0], [30.5, 24373.0], [30.6, 24374.0], [30.7, 24374.0], [30.8, 24374.0], [30.9, 24390.0], [31.0, 24398.0], [31.1, 24398.0], [31.2, 24400.0], [31.3, 24403.0], [31.4, 24403.0], [31.5, 24407.0], [31.6, 24416.0], [31.7, 24416.0], [31.8, 24423.0], [31.9, 24430.0], [32.0, 24430.0], [32.1, 24430.0], [32.2, 24441.0], [32.3, 24443.0], [32.4, 24443.0], [32.5, 24445.0], [32.6, 24448.0], [32.7, 24448.0], [32.8, 24450.0], [32.9, 24450.0], [33.0, 24455.0], [33.1, 24455.0], [33.2, 24455.0], [33.3, 24456.0], [33.4, 24456.0], [33.5, 24456.0], [33.6, 24457.0], [33.7, 24457.0], [33.8, 24458.0], [33.9, 24458.0], [34.0, 24463.0], [34.1, 24463.0], [34.2, 24463.0], [34.3, 24467.0], [34.4, 24467.0], [34.5, 24469.0], [34.6, 24469.0], [34.7, 24469.0], [34.8, 24470.0], [34.9, 24471.0], [35.0, 24472.0], [35.1, 24472.0], [35.2, 24472.0], [35.3, 24472.0], [35.4, 24472.0], [35.5, 24473.0], [35.6, 24473.0], [35.7, 24473.0], [35.8, 24475.0], [35.9, 24475.0], [36.0, 24475.0], [36.1, 24475.0], [36.2, 24475.0], [36.3, 24476.0], [36.4, 24476.0], [36.5, 24476.0], [36.6, 24477.0], [36.7, 24477.0], [36.8, 24477.0], [36.9, 24477.0], [37.0, 24479.0], [37.1, 24479.0], [37.2, 24482.0], [37.3, 24483.0], [37.4, 24483.0], [37.5, 24483.0], [37.6, 24483.0], [37.7, 24483.0], [37.8, 24486.0], [37.9, 24486.0], [38.0, 24486.0], [38.1, 24486.0], [38.2, 24486.0], [38.3, 24487.0], [38.4, 24487.0], [38.5, 24487.0], [38.6, 24490.0], [38.7, 24490.0], [38.8, 24490.0], [38.9, 24491.0], [39.0, 24493.0], [39.1, 24493.0], [39.2, 24494.0], [39.3, 24494.0], [39.4, 24494.0], [39.5, 24494.0], [39.6, 24494.0], [39.7, 24494.0], [39.8, 24495.0], [39.9, 24496.0], [40.0, 24497.0], [40.1, 24497.0], [40.2, 24498.0], [40.3, 24498.0], [40.4, 24498.0], [40.5, 24498.0], [40.6, 24499.0], [40.7, 24499.0], [40.8, 24500.0], [40.9, 24500.0], [41.0, 24502.0], [41.1, 24502.0], [41.2, 24502.0], [41.3, 24502.0], [41.4, 24502.0], [41.5, 24502.0], [41.6, 24502.0], [41.7, 24502.0], [41.8, 24503.0], [41.9, 24505.0], [42.0, 24505.0], [42.1, 24505.0], [42.2, 24505.0], [42.3, 24505.0], [42.4, 24505.0], [42.5, 24506.0], [42.6, 24507.0], [42.7, 24507.0], [42.8, 24507.0], [42.9, 24507.0], [43.0, 24507.0], [43.1, 24507.0], [43.2, 24507.0], [43.3, 24508.0], [43.4, 24508.0], [43.5, 24508.0], [43.6, 24510.0], [43.7, 24510.0], [43.8, 24511.0], [43.9, 24511.0], [44.0, 24511.0], [44.1, 24511.0], [44.2, 24512.0], [44.3, 24512.0], [44.4, 24512.0], [44.5, 24512.0], [44.6, 24513.0], [44.7, 24513.0], [44.8, 24514.0], [44.9, 24514.0], [45.0, 24514.0], [45.1, 24518.0], [45.2, 24519.0], [45.3, 24519.0], [45.4, 24519.0], [45.5, 24519.0], [45.6, 24520.0], [45.7, 24520.0], [45.8, 24521.0], [45.9, 24521.0], [46.0, 24521.0], [46.1, 24522.0], [46.2, 24522.0], [46.3, 24522.0], [46.4, 24522.0], [46.5, 24523.0], [46.6, 24524.0], [46.7, 24524.0], [46.8, 24525.0], [46.9, 24525.0], [47.0, 24525.0], [47.1, 24526.0], [47.2, 24526.0], [47.3, 24528.0], [47.4, 24528.0], [47.5, 24530.0], [47.6, 24530.0], [47.7, 24530.0], [47.8, 24531.0], [47.9, 24531.0], [48.0, 24531.0], [48.1, 24534.0], [48.2, 24535.0], [48.3, 24535.0], [48.4, 24535.0], [48.5, 24536.0], [48.6, 24536.0], [48.7, 24536.0], [48.8, 24537.0], [48.9, 24537.0], [49.0, 24537.0], [49.1, 24538.0], [49.2, 24538.0], [49.3, 24538.0], [49.4, 24538.0], [49.5, 24538.0], [49.6, 24543.0], [49.7, 24543.0], [49.8, 24543.0], [49.9, 24544.0], [50.0, 24544.0], [50.1, 24545.0], [50.2, 24546.0], [50.3, 24546.0], [50.4, 24546.0], [50.5, 24547.0], [50.6, 24548.0], [50.7, 24548.0], [50.8, 24550.0], [50.9, 24550.0], [51.0, 24550.0], [51.1, 24550.0], [51.2, 24551.0], [51.3, 24551.0], [51.4, 24551.0], [51.5, 24552.0], [51.6, 24553.0], [51.7, 24553.0], [51.8, 24553.0], [51.9, 24553.0], [52.0, 24553.0], [52.1, 24553.0], [52.2, 24556.0], [52.3, 24557.0], [52.4, 24557.0], [52.5, 24557.0], [52.6, 24559.0], [52.7, 24559.0], [52.8, 24559.0], [52.9, 24560.0], [53.0, 24560.0], [53.1, 24562.0], [53.2, 24563.0], [53.3, 24563.0], [53.4, 24563.0], [53.5, 24564.0], [53.6, 24565.0], [53.7, 24565.0], [53.8, 24566.0], [53.9, 24566.0], [54.0, 24566.0], [54.1, 24567.0], [54.2, 24567.0], [54.3, 24567.0], [54.4, 24567.0], [54.5, 24568.0], [54.6, 24568.0], [54.7, 24568.0], [54.8, 24568.0], [54.9, 24569.0], [55.0, 24569.0], [55.1, 24570.0], [55.2, 24571.0], [55.3, 24571.0], [55.4, 24571.0], [55.5, 24572.0], [55.6, 24572.0], [55.7, 24572.0], [55.8, 24574.0], [55.9, 24574.0], [56.0, 24574.0], [56.1, 24575.0], [56.2, 24575.0], [56.3, 24575.0], [56.4, 24575.0], [56.5, 24576.0], [56.6, 24576.0], [56.7, 24576.0], [56.8, 24576.0], [56.9, 24576.0], [57.0, 24576.0], [57.1, 24577.0], [57.2, 24577.0], [57.3, 24578.0], [57.4, 24578.0], [57.5, 24578.0], [57.6, 24578.0], [57.7, 24578.0], [57.8, 24579.0], [57.9, 24579.0], [58.0, 24579.0], [58.1, 24582.0], [58.2, 24582.0], [58.3, 24582.0], [58.4, 24582.0], [58.5, 24583.0], [58.6, 24583.0], [58.7, 24583.0], [58.8, 24584.0], [58.9, 24584.0], [59.0, 24584.0], [59.1, 24585.0], [59.2, 24585.0], [59.3, 24585.0], [59.4, 24585.0], [59.5, 24585.0], [59.6, 24586.0], [59.7, 24586.0], [59.8, 24586.0], [59.9, 24587.0], [60.0, 24587.0], [60.1, 24587.0], [60.2, 24588.0], [60.3, 24588.0], [60.4, 24588.0], [60.5, 24589.0], [60.6, 24591.0], [60.7, 24591.0], [60.8, 24592.0], [60.9, 24592.0], [61.0, 24592.0], [61.1, 24592.0], [61.2, 24593.0], [61.3, 24594.0], [61.4, 24594.0], [61.5, 24595.0], [61.6, 24596.0], [61.7, 24596.0], [61.8, 24597.0], [61.9, 24598.0], [62.0, 24598.0], [62.1, 24598.0], [62.2, 24599.0], [62.3, 24599.0], [62.4, 24599.0], [62.5, 24599.0], [62.6, 24602.0], [62.7, 24602.0], [62.8, 24603.0], [62.9, 24605.0], [63.0, 24605.0], [63.1, 24605.0], [63.2, 24607.0], [63.3, 24607.0], [63.4, 24607.0], [63.5, 24608.0], [63.6, 24609.0], [63.7, 24609.0], [63.8, 24610.0], [63.9, 24611.0], [64.0, 24611.0], [64.1, 24613.0], [64.2, 24613.0], [64.3, 24616.0], [64.4, 24616.0], [64.5, 24616.0], [64.6, 24616.0], [64.7, 24616.0], [64.8, 24618.0], [64.9, 24619.0], [65.0, 24619.0], [65.1, 24619.0], [65.2, 24619.0], [65.3, 24620.0], [65.4, 24620.0], [65.5, 24620.0], [65.6, 24620.0], [65.7, 24620.0], [65.8, 24621.0], [65.9, 24621.0], [66.0, 24621.0], [66.1, 24621.0], [66.2, 24621.0], [66.3, 24622.0], [66.4, 24622.0], [66.5, 24624.0], [66.6, 24625.0], [66.7, 24625.0], [66.8, 24625.0], [66.9, 24626.0], [67.0, 24626.0], [67.1, 24629.0], [67.2, 24629.0], [67.3, 24629.0], [67.4, 24629.0], [67.5, 24630.0], [67.6, 24631.0], [67.7, 24631.0], [67.8, 24632.0], [67.9, 24635.0], [68.0, 24635.0], [68.1, 24635.0], [68.2, 24636.0], [68.3, 24637.0], [68.4, 24637.0], [68.5, 24638.0], [68.6, 24639.0], [68.7, 24639.0], [68.8, 24639.0], [68.9, 24640.0], [69.0, 24640.0], [69.1, 24641.0], [69.2, 24641.0], [69.3, 24642.0], [69.4, 24642.0], [69.5, 24643.0], [69.6, 24644.0], [69.7, 24644.0], [69.8, 24644.0], [69.9, 24647.0], [70.0, 24647.0], [70.1, 24647.0], [70.2, 24648.0], [70.3, 24648.0], [70.4, 24648.0], [70.5, 24649.0], [70.6, 24649.0], [70.7, 24649.0], [70.8, 24650.0], [70.9, 24653.0], [71.0, 24653.0], [71.1, 24654.0], [71.2, 24657.0], [71.3, 24657.0], [71.4, 24657.0], [71.5, 24659.0], [71.6, 24659.0], [71.7, 24659.0], [71.8, 24660.0], [71.9, 24660.0], [72.0, 24660.0], [72.1, 24661.0], [72.2, 24661.0], [72.3, 24663.0], [72.4, 24663.0], [72.5, 24663.0], [72.6, 24664.0], [72.7, 24664.0], [72.8, 24664.0], [72.9, 24665.0], [73.0, 24665.0], [73.1, 24665.0], [73.2, 24666.0], [73.3, 24666.0], [73.4, 24666.0], [73.5, 24666.0], [73.6, 24666.0], [73.7, 24666.0], [73.8, 24667.0], [73.9, 24667.0], [74.0, 24667.0], [74.1, 24668.0], [74.2, 24669.0], [74.3, 24669.0], [74.4, 24669.0], [74.5, 24670.0], [74.6, 24671.0], [74.7, 24671.0], [74.8, 24671.0], [74.9, 24671.0], [75.0, 24671.0], [75.1, 24672.0], [75.2, 24675.0], [75.3, 24677.0], [75.4, 24677.0], [75.5, 24678.0], [75.6, 24678.0], [75.7, 24678.0], [75.8, 24681.0], [75.9, 24681.0], [76.0, 24681.0], [76.1, 24682.0], [76.2, 24684.0], [76.3, 24684.0], [76.4, 24684.0], [76.5, 24686.0], [76.6, 24687.0], [76.7, 24687.0], [76.8, 24688.0], [76.9, 24688.0], [77.0, 24688.0], [77.1, 24689.0], [77.2, 24689.0], [77.3, 24690.0], [77.4, 24690.0], [77.5, 24691.0], [77.6, 24691.0], [77.7, 24691.0], [77.8, 24691.0], [77.9, 24692.0], [78.0, 24692.0], [78.1, 24693.0], [78.2, 24693.0], [78.3, 24694.0], [78.4, 24694.0], [78.5, 24694.0], [78.6, 24696.0], [78.7, 24696.0], [78.8, 24697.0], [78.9, 24697.0], [79.0, 24697.0], [79.1, 24697.0], [79.2, 24698.0], [79.3, 24699.0], [79.4, 24699.0], [79.5, 24702.0], [79.6, 24702.0], [79.7, 24702.0], [79.8, 24702.0], [79.9, 24702.0], [80.0, 24702.0], [80.1, 24703.0], [80.2, 24703.0], [80.3, 24706.0], [80.4, 24706.0], [80.5, 24707.0], [80.6, 24707.0], [80.7, 24707.0], [80.8, 24708.0], [80.9, 24708.0], [81.0, 24708.0], [81.1, 24708.0], [81.2, 24709.0], [81.3, 24709.0], [81.4, 24709.0], [81.5, 24709.0], [81.6, 24709.0], [81.7, 24709.0], [81.8, 24710.0], [81.9, 24711.0], [82.0, 24711.0], [82.1, 24711.0], [82.2, 24712.0], [82.3, 24713.0], [82.4, 24713.0], [82.5, 24713.0], [82.6, 24713.0], [82.7, 24713.0], [82.8, 24714.0], [82.9, 24715.0], [83.0, 24715.0], [83.1, 24715.0], [83.2, 24718.0], [83.3, 24718.0], [83.4, 24718.0], [83.5, 24721.0], [83.6, 24721.0], [83.7, 24721.0], [83.8, 24722.0], [83.9, 24724.0], [84.0, 24724.0], [84.1, 24724.0], [84.2, 24726.0], [84.3, 24727.0], [84.4, 24727.0], [84.5, 24727.0], [84.6, 24727.0], [84.7, 24727.0], [84.8, 24729.0], [84.9, 24730.0], [85.0, 24730.0], [85.1, 24731.0], [85.2, 24732.0], [85.3, 24732.0], [85.4, 24732.0], [85.5, 24734.0], [85.6, 24735.0], [85.7, 24735.0], [85.8, 24735.0], [85.9, 24736.0], [86.0, 24736.0], [86.1, 24738.0], [86.2, 24738.0], [86.3, 24740.0], [86.4, 24740.0], [86.5, 24741.0], [86.6, 24741.0], [86.7, 24741.0], [86.8, 24743.0], [86.9, 24744.0], [87.0, 24744.0], [87.1, 24744.0], [87.2, 24745.0], [87.3, 24747.0], [87.4, 24747.0], [87.5, 24749.0], [87.6, 24755.0], [87.7, 24755.0], [87.8, 24755.0], [87.9, 24758.0], [88.0, 24758.0], [88.1, 24758.0], [88.2, 24759.0], [88.3, 24760.0], [88.4, 24760.0], [88.5, 24764.0], [88.6, 24765.0], [88.7, 24765.0], [88.8, 24766.0], [88.9, 24768.0], [89.0, 24768.0], [89.1, 24769.0], [89.2, 24772.0], [89.3, 24772.0], [89.4, 24772.0], [89.5, 24774.0], [89.6, 24776.0], [89.7, 24776.0], [89.8, 24776.0], [89.9, 24779.0], [90.0, 24779.0], [90.1, 24782.0], [90.2, 24784.0], [90.3, 24793.0], [90.4, 24793.0], [90.5, 24797.0], [90.6, 24800.0], [90.7, 24800.0], [90.8, 24801.0], [90.9, 24805.0], [91.0, 24805.0], [91.1, 24806.0], [91.2, 24808.0], [91.3, 24815.0], [91.4, 24815.0], [91.5, 24816.0], [91.6, 24817.0], [91.7, 24817.0], [91.8, 24818.0], [91.9, 24836.0], [92.0, 24836.0], [92.1, 24836.0], [92.2, 24843.0], [92.3, 24852.0], [92.4, 24852.0], [92.5, 24852.0], [92.6, 24867.0], [92.7, 24867.0], [92.8, 24873.0], [92.9, 24888.0], [93.0, 24888.0], [93.1, 24897.0], [93.2, 24938.0], [93.3, 24955.0], [93.4, 24955.0], [93.5, 24978.0], [93.6, 25015.0], [93.7, 25015.0], [93.8, 25031.0], [93.9, 25040.0], [94.0, 25040.0], [94.1, 25054.0], [94.2, 25078.0], [94.3, 25111.0], [94.4, 25111.0], [94.5, 25131.0], [94.6, 25169.0], [94.7, 25169.0], [94.8, 25194.0], [94.9, 25238.0], [95.0, 25238.0], [95.1, 25247.0], [95.2, 25288.0], [95.3, 25304.0], [95.4, 25304.0], [95.5, 25322.0], [95.6, 25354.0], [95.7, 25354.0], [95.8, 25382.0], [95.9, 25406.0], [96.0, 25497.0], [96.1, 25497.0], [96.2, 25503.0], [96.3, 25531.0], [96.4, 25531.0], [96.5, 25551.0], [96.6, 25600.0], [96.7, 25600.0], [96.8, 25614.0], [96.9, 25625.0], [97.0, 25663.0], [97.1, 25663.0], [97.2, 25671.0], [97.3, 25709.0], [97.4, 25709.0], [97.5, 25737.0], [97.6, 25755.0], [97.7, 25755.0], [97.8, 25798.0], [97.9, 25814.0], [98.0, 25855.0], [98.1, 25855.0], [98.2, 25891.0], [98.3, 25896.0], [98.4, 25896.0], [98.5, 25909.0], [98.6, 25959.0], [98.7, 25959.0], [98.8, 25981.0], [98.9, 25994.0], [99.0, 26025.0], [99.1, 26025.0], [99.2, 26059.0], [99.3, 26064.0], [99.4, 26064.0], [99.5, 26101.0], [99.6, 26143.0], [99.7, 26143.0], [99.8, 26149.0], [99.9, 26177.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1200.0, "maxY": 153.0, "series": [{"data": [[17800.0, 1.0], [1200.0, 1.0], [23200.0, 1.0], [23400.0, 1.0], [23800.0, 1.0], [23900.0, 1.0], [24000.0, 3.0], [24100.0, 54.0], [24200.0, 132.0], [24300.0, 23.0], [24400.0, 67.0], [24500.0, 153.0], [24700.0, 78.0], [24600.0, 118.0], [24800.0, 18.0], [25000.0, 5.0], [24900.0, 3.0], [25100.0, 4.0], [25200.0, 3.0], [25300.0, 4.0], [25400.0, 2.0], [25500.0, 3.0], [25600.0, 5.0], [25700.0, 4.0], [25800.0, 4.0], [25900.0, 4.0], [26000.0, 3.0], [26100.0, 4.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[17800.0, 1.0], [1200.0, 1.0], [23200.0, 1.0], [23400.0, 1.0], [23800.0, 1.0], [23900.0, 1.0], [24000.0, 3.0], [24100.0, 54.0], [24200.0, 132.0], [24300.0, 23.0], [24400.0, 67.0], [24500.0, 153.0], [24700.0, 78.0], [24600.0, 118.0], [24800.0, 18.0], [25000.0, 5.0], [24900.0, 3.0], [25100.0, 4.0], [25200.0, 3.0], [25300.0, 4.0], [25400.0, 2.0], [25500.0, 3.0], [25600.0, 5.0], [25700.0, 4.0], [25800.0, 4.0], [25900.0, 4.0], [26000.0, 3.0], [26100.0, 4.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 26100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 699.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 699.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 351.52217453505006, "minX": 1.68041766E12, "maxY": 700.0, "series": [{"data": [[1.68041766E12, 700.0], [1.68041772E12, 351.52217453505006]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041772E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1211.0, "minX": 1.0, "maxY": 26177.0, "series": [{"data": [[2.0, 26149.0], [3.0, 26143.0], [4.0, 26101.0], [5.0, 26064.0], [6.0, 26059.0], [7.0, 26025.0], [8.0, 25994.0], [9.0, 25981.0], [10.0, 25959.0], [11.0, 25909.0], [12.0, 25891.0], [13.0, 25896.0], [14.0, 25855.0], [15.0, 25814.0], [16.0, 25798.0], [17.0, 25755.0], [18.0, 25737.0], [19.0, 25709.0], [20.0, 25671.0], [21.0, 25663.0], [22.0, 25625.0], [24.0, 25607.0], [25.0, 25551.0], [26.0, 25531.0], [27.0, 25497.0], [28.0, 25503.0], [29.0, 25406.0], [30.0, 25382.0], [31.0, 25354.0], [33.0, 25304.0], [32.0, 25322.0], [35.0, 25238.0], [34.0, 25288.0], [37.0, 25194.0], [36.0, 25247.0], [39.0, 25131.0], [38.0, 25169.0], [41.0, 25078.0], [40.0, 25111.0], [43.0, 25040.0], [42.0, 25054.0], [45.0, 24978.0], [44.0, 25015.0], [47.0, 24938.0], [46.0, 24955.0], [49.0, 24873.0], [48.0, 24888.0], [51.0, 24808.0], [50.0, 24836.0], [53.0, 24743.0], [52.0, 24784.0], [55.0, 24712.0], [54.0, 24724.0], [57.0, 24665.0], [56.0, 24664.0], [59.0, 24597.0], [58.0, 24624.0], [61.0, 24536.0], [60.0, 24582.0], [63.0, 24483.0], [62.0, 24526.0], [67.0, 24390.0], [66.0, 24423.0], [65.0, 24443.0], [64.0, 24472.0], [71.0, 24314.0], [70.0, 24330.0], [69.0, 24334.0], [68.0, 24355.0], [72.0, 25031.0], [77.0, 24294.4], [83.0, 24296.0], [82.0, 24299.0], [81.0, 24295.5], [87.0, 24288.666666666668], [84.0, 24283.0], [91.0, 24289.666666666668], [90.0, 24286.0], [94.0, 24279.0], [99.0, 24289.0], [97.0, 24279.0], [96.0, 24295.0], [102.0, 24270.0], [101.0, 24264.0], [100.0, 24274.0], [107.0, 24263.0], [106.0, 24264.0], [105.0, 24268.0], [104.0, 24270.0], [109.0, 24269.0], [108.0, 24273.0], [119.0, 24268.0], [118.0, 24268.0], [117.0, 24266.0], [116.0, 24265.428571428572], [123.0, 24266.0], [122.0, 24278.0], [121.0, 24262.0], [120.0, 24283.0], [127.0, 24257.5], [125.0, 24291.0], [124.0, 24270.0], [134.0, 24248.0], [133.0, 24251.5], [131.0, 24281.0], [130.0, 24242.5], [128.0, 24287.0], [142.0, 24259.0], [141.0, 24258.0], [140.0, 24246.0], [138.0, 24272.0], [137.0, 24273.0], [136.0, 24256.5], [151.0, 24201.0], [150.0, 24233.0], [149.0, 24208.0], [148.0, 24225.666666666668], [145.0, 24216.0], [144.0, 24237.5], [158.0, 24219.0], [157.0, 24211.5], [155.0, 24222.0], [153.0, 24203.0], [152.0, 24233.0], [167.0, 24191.0], [166.0, 24201.0], [165.0, 24202.666666666668], [162.0, 24204.0], [161.0, 24194.0], [175.0, 24186.0], [174.0, 24194.666666666668], [171.0, 24210.0], [170.0, 24215.666666666668], [183.0, 24197.75], [179.0, 24183.0], [178.0, 24192.0], [177.0, 24206.0], [176.0, 24189.0], [191.0, 24210.0], [190.0, 24197.0], [185.0, 24178.0], [184.0, 24189.0], [198.0, 24185.0], [197.0, 24185.0], [196.0, 24188.0], [195.0, 24202.0], [194.0, 24190.0], [192.0, 24188.0], [207.0, 24167.0], [206.0, 24176.0], [205.0, 24180.0], [203.0, 24177.0], [202.0, 24721.0], [201.0, 24178.666666666668], [214.0, 24242.0], [213.0, 24178.0], [212.0, 24172.0], [210.0, 24198.666666666668], [223.0, 24197.5], [218.0, 24671.0], [217.0, 24379.666666666668], [231.0, 24524.333333333332], [227.0, 24758.0], [226.0, 24620.0], [224.0, 24475.5], [239.0, 24475.0], [238.0, 24776.0], [237.0, 24594.0], [235.0, 24475.5], [234.0, 24714.5], [285.0, 24765.0], [286.0, 24441.0], [284.0, 24793.0], [274.0, 24656.36666666667], [283.0, 24727.0], [282.0, 24722.0], [281.0, 24708.0], [280.0, 24693.0], [279.0, 24817.0], [278.0, 24712.77777777778], [295.0, 24759.0], [294.0, 24599.0], [293.0, 24477.0], [292.0, 24764.0], [291.0, 24491.5], [289.0, 24772.0], [288.0, 24741.5], [318.0, 24741.0], [319.0, 24568.0], [317.0, 24553.5], [307.0, 24776.0], [306.0, 24430.0], [315.0, 24769.5], [313.0, 24745.0], [312.0, 24475.0], [311.0, 24476.0], [310.0, 24623.81818181818], [308.0, 24620.5], [334.0, 24731.0], [335.0, 24727.0], [333.0, 24732.0], [332.0, 24574.0], [331.0, 24735.0], [330.0, 24579.5], [328.0, 24618.666666666668], [326.0, 24514.0], [322.0, 24583.666666666668], [324.0, 24718.0], [351.0, 24672.666666666668], [348.0, 24702.0], [337.0, 24563.0], [336.0, 24715.0], [347.0, 24710.0], [346.0, 24557.0], [345.0, 24726.0], [344.0, 24713.0], [343.0, 24729.0], [342.0, 24738.5], [340.0, 24613.333333333332], [364.0, 24694.0], [366.0, 24536.0], [367.0, 24502.0], [365.0, 24692.0], [363.0, 24591.666666666668], [360.0, 24538.0], [359.0, 24639.0], [357.0, 24600.333333333332], [354.0, 24530.0], [353.0, 24552.0], [352.0, 24553.0], [381.0, 24724.0], [383.0, 24689.0], [380.0, 24714.0], [371.0, 24522.0], [370.0, 24539.0], [368.0, 24513.0], [379.0, 24684.0], [378.0, 24472.0], [377.0, 24521.0], [376.0, 24518.666666666668], [373.0, 24523.0], [372.0, 24550.0], [398.0, 24666.0], [399.0, 24699.0], [397.0, 24713.0], [396.0, 24702.0], [395.0, 24718.0], [394.0, 24685.5], [392.0, 24697.0], [391.0, 24621.0], [384.0, 24520.0], [387.0, 24722.0], [385.0, 24649.0], [390.0, 24519.0], [389.0, 24702.0], [388.0, 24500.0], [403.0, 24706.0], [413.0, 24693.0], [412.0, 24691.0], [402.0, 24708.0], [401.0, 24644.0], [400.0, 24703.0], [411.0, 24698.0], [410.0, 24619.0], [409.0, 24572.0], [407.0, 24626.0], [406.0, 24566.0], [405.0, 24688.0], [404.0, 24678.0], [428.0, 24671.0], [423.0, 24682.0], [421.0, 24678.0], [420.0, 24688.0], [419.0, 24689.0], [418.0, 24616.0], [417.0, 24677.0], [416.0, 24684.0], [447.0, 24647.0], [446.0, 24660.5], [443.0, 24642.0], [441.0, 24648.0], [440.0, 24665.75], [437.0, 24674.333333333332], [434.0, 24686.0], [462.0, 24641.0], [463.0, 24620.0], [461.0, 24639.0], [460.0, 24629.0], [459.0, 24632.0], [457.0, 24643.0], [456.0, 24637.0], [455.0, 24659.0], [449.0, 24635.0], [448.0, 24644.0], [451.0, 24684.0], [450.0, 24647.0], [454.0, 24649.0], [453.0, 24643.0], [478.0, 24640.0], [479.0, 24619.0], [477.0, 24620.0], [476.0, 24629.0], [475.0, 24618.0], [474.0, 24621.0], [473.0, 24610.0], [472.0, 24632.0], [471.0, 24611.0], [465.0, 24629.0], [464.0, 24641.0], [467.0, 24636.0], [466.0, 24631.0], [470.0, 24616.0], [469.0, 24616.0], [468.0, 24622.0], [494.0, 24610.5], [491.0, 24593.0], [487.0, 24616.833333333332], [481.0, 24621.0], [480.0, 24625.0], [509.0, 24563.0], [511.0, 24581.0], [508.0, 24585.0], [496.0, 24617.5], [507.0, 24585.0], [506.0, 24577.0], [504.0, 24578.0], [503.0, 24599.0], [502.0, 24588.0], [501.0, 24599.2], [500.0, 24596.0], [536.0, 24563.0], [540.0, 24588.0], [541.0, 24564.0], [529.0, 24565.0], [528.0, 24587.0], [539.0, 24575.0], [538.0, 24560.0], [537.0, 24586.0], [527.0, 24569.0], [514.0, 24582.0], [513.0, 24603.0], [516.0, 24603.0], [515.0, 24579.0], [519.0, 24575.0], [517.0, 24578.0], [526.0, 24580.5], [524.0, 24571.0], [523.0, 24567.0], [522.0, 24572.0], [521.0, 24577.0], [520.0, 24585.0], [534.0, 24557.0], [533.0, 24560.0], [531.0, 24553.0], [530.0, 24575.0], [572.0, 24511.0], [575.0, 24508.0], [560.0, 24522.0], [562.0, 24525.0], [561.0, 24528.0], [564.0, 24519.0], [563.0, 24537.0], [574.0, 24526.0], [573.0, 24522.0], [571.0, 24518.0], [570.0, 24531.0], [569.0, 24531.0], [568.0, 24514.5], [559.0, 24546.0], [544.0, 24565.0], [546.0, 24547.0], [545.0, 24559.0], [549.0, 24536.0], [547.0, 24551.0], [551.0, 24550.0], [550.0, 24553.0], [558.0, 24542.0], [555.0, 24556.0], [554.0, 24568.0], [553.0, 24545.0], [552.0, 24537.0], [566.0, 24512.0], [565.0, 24525.0], [602.0, 24494.0], [606.0, 24494.0], [607.0, 24487.0], [593.0, 24504.0], [595.0, 24506.0], [594.0, 24511.0], [597.0, 24502.0], [596.0, 24491.0], [605.0, 24498.0], [604.0, 24493.0], [603.0, 24486.0], [600.0, 24505.0], [583.0, 24507.0], [582.0, 24505.0], [581.0, 24494.0], [580.0, 24503.0], [579.0, 24500.0], [578.0, 24512.0], [577.0, 24497.0], [576.0, 24507.0], [591.0, 24499.0], [590.0, 24507.0], [589.0, 24507.0], [587.0, 24502.0], [586.0, 24505.0], [585.0, 24496.0], [584.0, 24519.0], [599.0, 24507.0], [598.0, 24507.0], [637.0, 24456.0], [628.0, 24458.0], [639.0, 24452.5], [624.0, 24469.0], [635.0, 24450.0], [634.0, 24450.0], [623.0, 24474.0], [608.0, 24494.0], [611.0, 24471.5], [609.0, 24476.0], [613.0, 24482.0], [612.0, 24495.0], [615.0, 24487.0], [614.0, 24490.0], [621.0, 24475.0], [620.0, 24479.6], [631.0, 24463.0], [630.0, 24455.0], [629.0, 24458.0], [627.0, 24463.0], [626.0, 24473.5], [664.0, 24251.0], [670.0, 24251.0], [671.0, 24255.0], [657.0, 24298.0], [656.0, 24305.25], [669.0, 24256.0], [668.0, 24255.0], [667.0, 24257.0], [652.0, 24312.0], [640.0, 24430.0], [642.0, 24374.0], [641.0, 24400.0], [644.0, 24360.0], [643.0, 24373.0], [647.0, 24353.0], [645.0, 24345.0], [649.0, 24316.0], [648.0, 24329.0], [663.0, 24253.0], [661.0, 24268.0], [660.0, 24276.5], [659.0, 24270.0], [699.0, 17860.0], [692.0, 24079.0], [700.0, 1211.0], [689.0, 24120.0], [698.0, 23258.0], [697.0, 23484.0], [696.0, 23836.0], [679.0, 24189.0], [678.0, 24212.0], [677.0, 24218.0], [676.0, 24216.0], [675.0, 24243.0], [674.0, 24250.0], [687.0, 24127.0], [686.0, 24144.0], [685.0, 24146.5], [683.0, 24148.0], [682.0, 24178.0], [681.0, 24180.0], [680.0, 24186.0], [695.0, 23935.0], [694.0, 24001.0], [693.0, 24030.0], [691.0, 24108.0], [690.0, 24134.0], [1.0, 26177.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[352.02, 24513.938571428556]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 26149.0], [3.0, 26143.0], [4.0, 26101.0], [5.0, 26064.0], [6.0, 26059.0], [7.0, 26025.0], [8.0, 25994.0], [9.0, 25981.0], [10.0, 25959.0], [11.0, 25909.0], [12.0, 25891.0], [13.0, 25896.0], [14.0, 25855.0], [15.0, 25814.0], [16.0, 25798.0], [17.0, 25755.0], [18.0, 25737.0], [19.0, 25709.0], [20.0, 25671.0], [21.0, 25663.0], [22.0, 25625.0], [24.0, 25607.0], [25.0, 25551.0], [26.0, 25531.0], [27.0, 25497.0], [28.0, 25503.0], [29.0, 25406.0], [30.0, 25382.0], [31.0, 25354.0], [33.0, 25304.0], [32.0, 25322.0], [35.0, 25238.0], [34.0, 25288.0], [37.0, 25194.0], [36.0, 25247.0], [39.0, 25131.0], [38.0, 25169.0], [41.0, 25078.0], [40.0, 25111.0], [43.0, 25040.0], [42.0, 25054.0], [45.0, 24978.0], [44.0, 25015.0], [47.0, 24938.0], [46.0, 24955.0], [49.0, 24873.0], [48.0, 24888.0], [51.0, 24808.0], [50.0, 24836.0], [53.0, 24743.0], [52.0, 24784.0], [55.0, 24712.0], [54.0, 24724.0], [57.0, 24665.0], [56.0, 24664.0], [59.0, 24597.0], [58.0, 24624.0], [61.0, 24536.0], [60.0, 24582.0], [63.0, 24483.0], [62.0, 24526.0], [67.0, 24390.0], [66.0, 24423.0], [65.0, 24443.0], [64.0, 24472.0], [71.0, 24314.0], [70.0, 24330.0], [69.0, 24334.0], [68.0, 24355.0], [72.0, 25031.0], [77.0, 24294.4], [83.0, 24296.0], [82.0, 24299.0], [81.0, 24295.5], [87.0, 24288.666666666668], [84.0, 24283.0], [91.0, 24289.666666666668], [90.0, 24286.0], [94.0, 24279.0], [99.0, 24289.0], [97.0, 24279.0], [96.0, 24295.0], [102.0, 24270.0], [101.0, 24264.0], [100.0, 24274.0], [107.0, 24263.0], [106.0, 24264.0], [105.0, 24268.0], [104.0, 24270.0], [109.0, 24269.0], [108.0, 24273.0], [119.0, 24268.0], [118.0, 24268.0], [117.0, 24266.0], [116.0, 24265.428571428572], [123.0, 24266.0], [122.0, 24278.0], [121.0, 24262.0], [120.0, 24283.0], [127.0, 24257.5], [125.0, 24291.0], [124.0, 24270.0], [134.0, 24248.0], [133.0, 24251.5], [131.0, 24281.0], [130.0, 24242.5], [128.0, 24287.0], [142.0, 24259.0], [141.0, 24258.0], [140.0, 24246.0], [138.0, 24272.0], [137.0, 24273.0], [136.0, 24256.5], [151.0, 24201.0], [150.0, 24233.0], [149.0, 24208.0], [148.0, 24225.666666666668], [145.0, 24216.0], [144.0, 24237.5], [158.0, 24219.0], [157.0, 24211.5], [155.0, 24222.0], [153.0, 24203.0], [152.0, 24233.0], [167.0, 24191.0], [166.0, 24201.0], [165.0, 24202.666666666668], [162.0, 24204.0], [161.0, 24194.0], [175.0, 24186.0], [174.0, 24194.666666666668], [171.0, 24210.0], [170.0, 24215.666666666668], [183.0, 24197.75], [179.0, 24183.0], [178.0, 24192.0], [177.0, 24206.0], [176.0, 24189.0], [191.0, 24210.0], [190.0, 24197.0], [185.0, 24178.0], [184.0, 24189.0], [198.0, 24185.0], [197.0, 24185.0], [196.0, 24188.0], [195.0, 24202.0], [194.0, 24190.0], [192.0, 24188.0], [207.0, 24167.0], [206.0, 24176.0], [205.0, 24180.0], [203.0, 24177.0], [202.0, 24721.0], [201.0, 24178.666666666668], [214.0, 24242.0], [213.0, 24178.0], [212.0, 24172.0], [210.0, 24198.666666666668], [223.0, 24197.5], [218.0, 24671.0], [217.0, 24379.666666666668], [231.0, 24524.333333333332], [227.0, 24758.0], [226.0, 24620.0], [224.0, 24475.5], [239.0, 24475.0], [238.0, 24776.0], [237.0, 24594.0], [235.0, 24475.5], [234.0, 24714.5], [285.0, 24765.0], [286.0, 24441.0], [284.0, 24793.0], [274.0, 24656.36666666667], [283.0, 24727.0], [282.0, 24722.0], [281.0, 24708.0], [280.0, 24693.0], [279.0, 24817.0], [278.0, 24712.77777777778], [295.0, 24759.0], [294.0, 24599.0], [293.0, 24477.0], [292.0, 24764.0], [291.0, 24491.5], [289.0, 24772.0], [288.0, 24741.5], [318.0, 24741.0], [319.0, 24568.0], [317.0, 24553.5], [307.0, 24776.0], [306.0, 24430.0], [315.0, 24769.5], [313.0, 24745.0], [312.0, 24475.0], [311.0, 24476.0], [310.0, 24623.818181818184], [308.0, 24620.5], [334.0, 24731.0], [335.0, 24727.0], [333.0, 24732.0], [332.0, 24574.0], [331.0, 24735.0], [330.0, 24579.5], [328.0, 24618.666666666668], [326.0, 24514.0], [322.0, 24583.666666666668], [324.0, 24718.0], [351.0, 24672.666666666668], [348.0, 24702.0], [337.0, 24563.0], [336.0, 24715.0], [347.0, 24710.0], [346.0, 24557.0], [345.0, 24726.0], [344.0, 24713.0], [343.0, 24729.0], [342.0, 24738.5], [340.0, 24613.333333333332], [364.0, 24694.0], [366.0, 24536.0], [367.0, 24502.0], [365.0, 24692.0], [363.0, 24591.666666666668], [360.0, 24538.0], [359.0, 24639.0], [357.0, 24600.333333333332], [354.0, 24530.0], [353.0, 24552.0], [352.0, 24553.0], [381.0, 24724.0], [383.0, 24689.0], [380.0, 24714.0], [371.0, 24522.0], [370.0, 24539.0], [368.0, 24513.0], [379.0, 24684.0], [378.0, 24472.0], [377.0, 24521.0], [376.0, 24518.666666666668], [373.0, 24523.0], [372.0, 24550.0], [398.0, 24666.0], [399.0, 24699.0], [397.0, 24713.0], [396.0, 24702.0], [395.0, 24718.0], [394.0, 24685.5], [392.0, 24697.0], [391.0, 24621.0], [384.0, 24520.0], [387.0, 24722.0], [385.0, 24649.0], [390.0, 24519.0], [389.0, 24702.0], [388.0, 24500.0], [403.0, 24706.0], [413.0, 24693.0], [412.0, 24691.0], [402.0, 24708.0], [401.0, 24644.0], [400.0, 24703.0], [411.0, 24698.0], [410.0, 24619.0], [409.0, 24572.0], [407.0, 24626.0], [406.0, 24566.0], [405.0, 24688.0], [404.0, 24678.0], [428.0, 24671.0], [423.0, 24682.0], [421.0, 24678.0], [420.0, 24688.0], [419.0, 24689.0], [418.0, 24616.0], [417.0, 24677.0], [416.0, 24684.0], [447.0, 24647.0], [446.0, 24660.5], [443.0, 24642.0], [441.0, 24648.0], [440.0, 24665.75], [437.0, 24674.333333333332], [434.0, 24686.0], [462.0, 24641.0], [463.0, 24620.0], [461.0, 24639.0], [460.0, 24629.0], [459.0, 24632.0], [457.0, 24643.0], [456.0, 24637.0], [455.0, 24659.0], [449.0, 24635.0], [448.0, 24644.0], [451.0, 24684.0], [450.0, 24647.0], [454.0, 24649.0], [453.0, 24643.0], [478.0, 24640.0], [479.0, 24619.0], [477.0, 24620.0], [476.0, 24629.0], [475.0, 24618.0], [474.0, 24621.0], [473.0, 24610.0], [472.0, 24632.0], [471.0, 24611.0], [465.0, 24629.0], [464.0, 24641.0], [467.0, 24636.0], [466.0, 24631.0], [470.0, 24616.0], [469.0, 24616.0], [468.0, 24622.0], [494.0, 24610.5], [491.0, 24593.0], [487.0, 24616.833333333332], [481.0, 24621.0], [480.0, 24625.0], [509.0, 24563.0], [511.0, 24581.0], [508.0, 24585.0], [496.0, 24617.5], [507.0, 24585.0], [506.0, 24577.0], [504.0, 24578.0], [503.0, 24599.0], [502.0, 24588.0], [501.0, 24599.2], [500.0, 24596.0], [536.0, 24563.0], [540.0, 24588.0], [541.0, 24564.0], [529.0, 24565.0], [528.0, 24587.0], [539.0, 24575.0], [538.0, 24560.0], [537.0, 24586.0], [527.0, 24569.0], [514.0, 24582.0], [513.0, 24603.0], [516.0, 24603.0], [515.0, 24579.0], [519.0, 24575.0], [517.0, 24578.0], [526.0, 24580.5], [524.0, 24571.0], [523.0, 24567.0], [522.0, 24572.0], [521.0, 24577.0], [520.0, 24585.0], [534.0, 24557.0], [533.0, 24560.0], [531.0, 24553.0], [530.0, 24575.0], [572.0, 24511.0], [575.0, 24508.0], [560.0, 24522.0], [562.0, 24525.0], [561.0, 24528.0], [564.0, 24519.0], [563.0, 24537.0], [574.0, 24526.0], [573.0, 24522.0], [571.0, 24518.0], [570.0, 24531.0], [569.0, 24531.0], [568.0, 24514.5], [559.0, 24546.0], [544.0, 24565.0], [546.0, 24547.0], [545.0, 24559.0], [549.0, 24536.0], [547.0, 24551.0], [551.0, 24550.0], [550.0, 24553.0], [558.0, 24542.0], [555.0, 24556.0], [554.0, 24568.0], [553.0, 24545.0], [552.0, 24537.0], [566.0, 24512.0], [565.0, 24525.0], [602.0, 24494.0], [606.0, 24494.0], [607.0, 24487.0], [593.0, 24504.0], [595.0, 24506.0], [594.0, 24511.0], [597.0, 24502.0], [596.0, 24491.0], [605.0, 24498.0], [604.0, 24493.0], [603.0, 24486.0], [600.0, 24505.0], [583.0, 24507.0], [582.0, 24505.0], [581.0, 24494.0], [580.0, 24503.0], [579.0, 24500.0], [578.0, 24512.0], [577.0, 24497.0], [576.0, 24507.0], [591.0, 24499.0], [590.0, 24507.0], [589.0, 24507.0], [587.0, 24502.0], [586.0, 24505.0], [585.0, 24496.0], [584.0, 24519.0], [599.0, 24507.0], [598.0, 24507.0], [637.0, 24456.0], [628.0, 24458.0], [639.0, 24452.5], [624.0, 24469.0], [635.0, 24450.0], [634.0, 24450.0], [623.0, 24474.0], [608.0, 24494.0], [611.0, 24471.5], [609.0, 24476.0], [613.0, 24482.0], [612.0, 24495.0], [615.0, 24487.0], [614.0, 24490.0], [621.0, 24475.0], [620.0, 24479.6], [631.0, 24463.0], [630.0, 24455.0], [629.0, 24458.0], [627.0, 24463.0], [626.0, 24473.5], [664.0, 24251.0], [670.0, 24251.0], [671.0, 24255.0], [657.0, 24298.0], [656.0, 24305.25], [669.0, 24256.0], [668.0, 24255.0], [667.0, 24257.0], [652.0, 24312.0], [640.0, 24430.0], [642.0, 24374.0], [641.0, 24400.0], [644.0, 24360.0], [643.0, 24373.0], [647.0, 24353.0], [645.0, 24345.0], [649.0, 24316.0], [648.0, 24329.0], [663.0, 24253.0], [661.0, 24268.0], [660.0, 24276.5], [659.0, 24270.0], [699.0, 17860.0], [692.0, 24079.0], [700.0, 1211.0], [689.0, 24120.0], [698.0, 23258.0], [697.0, 23484.0], [696.0, 23836.0], [679.0, 24189.0], [678.0, 24212.0], [677.0, 24218.0], [676.0, 24216.0], [675.0, 24243.0], [674.0, 24250.0], [687.0, 24127.0], [686.0, 24144.0], [685.0, 24146.5], [683.0, 24148.0], [682.0, 24178.0], [681.0, 24180.0], [680.0, 24186.0], [695.0, 23935.0], [694.0, 24001.0], [693.0, 24030.0], [691.0, 24108.0], [690.0, 24134.0], [1.0, 26177.0]], "isOverall": false, "label": "Test Fragment", "isController": true}, {"data": [[352.01999999999987, 24513.938571428556]], "isOverall": false, "label": "Test Fragment-Aggregated", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 700.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8.583333333333334, "minX": 1.68041766E12, "maxY": 9488.216666666667, "series": [{"data": [[1.68041766E12, 21.95], [1.68041772E12, 9488.216666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68041766E12, 8.583333333333334], [1.68041772E12, 5913.316666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041772E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1211.0, "minX": 1.68041766E12, "maxY": 24547.276108726768, "series": [{"data": [[1.68041766E12, 1211.0], [1.68041772E12, 24547.276108726768]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68041766E12, 1211.0], [1.68041772E12, 24547.27610872676]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041772E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1211.0, "minX": 1.68041766E12, "maxY": 24547.25035765378, "series": [{"data": [[1.68041766E12, 1211.0], [1.68041772E12, 24547.25035765376]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68041766E12, 1211.0], [1.68041772E12, 24547.25035765378]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041772E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 555.9012875536476, "minX": 1.68041766E12, "maxY": 577.0, "series": [{"data": [[1.68041766E12, 577.0], [1.68041772E12, 555.9012875536476]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68041766E12, 577.0], [1.68041772E12, 555.9012875536479]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041772E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 17860.0, "minX": 1.68041772E12, "maxY": 26177.0, "series": [{"data": [[1.68041772E12, 26177.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68041772E12, 24782.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68041772E12, 26025.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68041772E12, 25247.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68041772E12, 17860.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68041772E12, 24545.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041772E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1211.0, "minX": 1.0, "maxY": 26059.0, "series": [{"data": [[1.0, 17860.0], [2.0, 23371.0], [273.0, 24534.0], [36.0, 25394.0], [11.0, 26059.0], [376.0, 24519.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 1211.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 376.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1211.0, "minX": 1.0, "maxY": 26059.0, "series": [{"data": [[1.0, 17860.0], [2.0, 23371.0], [273.0, 24534.0], [36.0, 25394.0], [11.0, 26059.0], [376.0, 24519.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 1211.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 376.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 11.666666666666666, "minX": 1.68041766E12, "maxY": 11.666666666666666, "series": [{"data": [[1.68041766E12, 11.666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041766E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68041766E12, "maxY": 11.65, "series": [{"data": [[1.68041772E12, 11.65]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68041766E12, 0.016666666666666666]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041772E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68041766E12, "maxY": 11.65, "series": [{"data": [[1.68041766E12, 0.016666666666666666]], "isOverall": false, "label": "Test Fragment-failure", "isController": true}, {"data": [[1.68041772E12, 11.65]], "isOverall": false, "label": "Test Fragment-success", "isController": true}, {"data": [[1.68041766E12, 0.016666666666666666]], "isOverall": false, "label": "Login-failure", "isController": false}, {"data": [[1.68041772E12, 11.65]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041772E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.68041766E12, "maxY": 23.3, "series": [{"data": [[1.68041772E12, 23.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68041766E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041772E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

