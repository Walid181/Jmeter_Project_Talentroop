/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2961.0, "minX": 0.0, "maxY": 44658.0, "series": [{"data": [[0.0, 2961.0], [0.1, 2961.0], [0.2, 3429.0], [0.3, 3430.0], [0.4, 3430.0], [0.5, 3433.0], [0.6, 3433.0], [0.7, 3433.0], [0.8, 3435.0], [0.9, 3436.0], [1.0, 3437.0], [1.1, 3437.0], [1.2, 3437.0], [1.3, 3439.0], [1.4, 3439.0], [1.5, 3440.0], [1.6, 3443.0], [1.7, 3443.0], [1.8, 3443.0], [1.9, 3449.0], [2.0, 3450.0], [2.1, 3450.0], [2.2, 3451.0], [2.3, 3459.0], [2.4, 3459.0], [2.5, 3462.0], [2.6, 3464.0], [2.7, 3464.0], [2.8, 3469.0], [2.9, 3473.0], [3.0, 3485.0], [3.1, 3485.0], [3.2, 3486.0], [3.3, 3489.0], [3.4, 3489.0], [3.5, 3490.0], [3.6, 3492.0], [3.7, 3492.0], [3.8, 3493.0], [3.9, 3496.0], [4.0, 3497.0], [4.1, 3497.0], [4.2, 3498.0], [4.3, 3501.0], [4.4, 3501.0], [4.5, 3509.0], [4.6, 3511.0], [4.7, 3511.0], [4.8, 3512.0], [4.9, 3514.0], [5.0, 3514.0], [5.1, 3517.0], [5.2, 3519.0], [5.3, 3521.0], [5.4, 3521.0], [5.5, 3524.0], [5.6, 3531.0], [5.7, 3531.0], [5.8, 3533.0], [5.9, 3534.0], [6.0, 3534.0], [6.1, 3536.0], [6.2, 3548.0], [6.3, 3554.0], [6.4, 3554.0], [6.5, 3555.0], [6.6, 3566.0], [6.7, 3566.0], [6.8, 3571.0], [6.9, 3573.0], [7.0, 3573.0], [7.1, 3585.0], [7.2, 21101.0], [7.3, 37534.0], [7.4, 37534.0], [7.5, 39412.0], [7.6, 39457.0], [7.7, 39457.0], [7.8, 39466.0], [7.9, 39495.0], [8.0, 39495.0], [8.1, 39504.0], [8.2, 39512.0], [8.3, 39520.0], [8.4, 39520.0], [8.5, 39530.0], [8.6, 39550.0], [8.7, 39550.0], [8.8, 39559.0], [8.9, 39562.0], [9.0, 39562.0], [9.1, 39568.0], [9.2, 39585.0], [9.3, 39586.0], [9.4, 39586.0], [9.5, 39591.0], [9.6, 39629.0], [9.7, 39629.0], [9.8, 39640.0], [9.9, 39640.0], [10.0, 39640.0], [10.1, 39643.0], [10.2, 39663.0], [10.3, 39692.0], [10.4, 39692.0], [10.5, 39703.0], [10.6, 39705.0], [10.7, 39705.0], [10.8, 39712.0], [10.9, 39716.0], [11.0, 39718.0], [11.1, 39718.0], [11.2, 39721.0], [11.3, 39726.0], [11.4, 39726.0], [11.5, 39755.0], [11.6, 39755.0], [11.7, 39755.0], [11.8, 39759.0], [11.9, 39782.0], [12.0, 39793.0], [12.1, 39793.0], [12.2, 39799.0], [12.3, 39818.0], [12.4, 39818.0], [12.5, 39827.0], [12.6, 39865.0], [12.7, 39865.0], [12.8, 39867.0], [12.9, 39880.0], [13.0, 39888.0], [13.1, 39888.0], [13.2, 39915.0], [13.3, 39935.0], [13.4, 39935.0], [13.5, 39953.0], [13.6, 39995.0], [13.7, 39995.0], [13.8, 40005.0], [13.9, 40051.0], [14.0, 40087.0], [14.1, 40087.0], [14.2, 40109.0], [14.3, 40117.0], [14.4, 40117.0], [14.5, 40160.0], [14.6, 40167.0], [14.7, 40167.0], [14.8, 40176.0], [14.9, 40180.0], [15.0, 40262.0], [15.1, 40262.0], [15.2, 40271.0], [15.3, 40290.0], [15.4, 40290.0], [15.5, 40293.0], [15.6, 40293.0], [15.7, 40293.0], [15.8, 40293.0], [15.9, 40296.0], [16.0, 40299.0], [16.1, 40299.0], [16.2, 40307.0], [16.3, 40308.0], [16.4, 40308.0], [16.5, 40311.0], [16.6, 40313.0], [16.7, 40313.0], [16.8, 40324.0], [16.9, 40325.0], [17.0, 40326.0], [17.1, 40326.0], [17.2, 40326.0], [17.3, 40331.0], [17.4, 40331.0], [17.5, 40334.0], [17.6, 40335.0], [17.7, 40335.0], [17.8, 40336.0], [17.9, 40336.0], [18.0, 40345.0], [18.1, 40345.0], [18.2, 40350.0], [18.3, 40355.0], [18.4, 40355.0], [18.5, 40355.0], [18.6, 40357.0], [18.7, 40357.0], [18.8, 40358.0], [18.9, 40358.0], [19.0, 40358.0], [19.1, 40358.0], [19.2, 40360.0], [19.3, 40364.0], [19.4, 40364.0], [19.5, 40364.0], [19.6, 40367.0], [19.7, 40367.0], [19.8, 40367.0], [19.9, 40368.0], [20.0, 40371.0], [20.1, 40371.0], [20.2, 40373.0], [20.3, 40375.0], [20.4, 40375.0], [20.5, 40380.0], [20.6, 40383.0], [20.7, 40383.0], [20.8, 40384.0], [20.9, 40385.0], [21.0, 40387.0], [21.1, 40387.0], [21.2, 40388.0], [21.3, 40392.0], [21.4, 40392.0], [21.5, 40395.0], [21.6, 40395.0], [21.7, 40395.0], [21.8, 40400.0], [21.9, 40402.0], [22.0, 40403.0], [22.1, 40403.0], [22.2, 40404.0], [22.3, 40407.0], [22.4, 40407.0], [22.5, 40414.0], [22.6, 40415.0], [22.7, 40415.0], [22.8, 40415.0], [22.9, 40418.0], [23.0, 40419.0], [23.1, 40419.0], [23.2, 40429.0], [23.3, 40431.0], [23.4, 40431.0], [23.5, 40433.0], [23.6, 40437.0], [23.7, 40437.0], [23.8, 40439.0], [23.9, 40444.0], [24.0, 40444.0], [24.1, 40444.0], [24.2, 40445.0], [24.3, 40449.0], [24.4, 40449.0], [24.5, 40449.0], [24.6, 40459.0], [24.7, 40459.0], [24.8, 40459.0], [24.9, 40460.0], [25.0, 40461.0], [25.1, 40461.0], [25.2, 40464.0], [25.3, 40464.0], [25.4, 40464.0], [25.5, 40464.0], [25.6, 40465.0], [25.7, 40465.0], [25.8, 40467.0], [25.9, 40468.0], [26.0, 40469.0], [26.1, 40469.0], [26.2, 40469.0], [26.3, 40469.0], [26.4, 40469.0], [26.5, 40469.0], [26.6, 40472.0], [26.7, 40472.0], [26.8, 40472.0], [26.9, 40472.0], [27.0, 40475.0], [27.1, 40475.0], [27.2, 40477.0], [27.3, 40481.0], [27.4, 40481.0], [27.5, 40482.0], [27.6, 40484.0], [27.7, 40484.0], [27.8, 40487.0], [27.9, 40488.0], [28.0, 40491.0], [28.1, 40491.0], [28.2, 40491.0], [28.3, 40492.0], [28.4, 40492.0], [28.5, 40492.0], [28.6, 40494.0], [28.7, 40494.0], [28.8, 40494.0], [28.9, 40494.0], [29.0, 40502.0], [29.1, 40502.0], [29.2, 40502.0], [29.3, 40503.0], [29.4, 40503.0], [29.5, 40505.0], [29.6, 40507.0], [29.7, 40507.0], [29.8, 40511.0], [29.9, 40513.0], [30.0, 40515.0], [30.1, 40515.0], [30.2, 40515.0], [30.3, 40515.0], [30.4, 40515.0], [30.5, 40518.0], [30.6, 40518.0], [30.7, 40518.0], [30.8, 40518.0], [30.9, 40520.0], [31.0, 40523.0], [31.1, 40523.0], [31.2, 40523.0], [31.3, 40524.0], [31.4, 40524.0], [31.5, 40525.0], [31.6, 40526.0], [31.7, 40526.0], [31.8, 40528.0], [31.9, 40530.0], [32.0, 40530.0], [32.1, 40530.0], [32.2, 40532.0], [32.3, 40533.0], [32.4, 40533.0], [32.5, 40535.0], [32.6, 40535.0], [32.7, 40535.0], [32.8, 40536.0], [32.9, 40537.0], [33.0, 40537.0], [33.1, 40537.0], [33.2, 40538.0], [33.3, 40541.0], [33.4, 40541.0], [33.5, 40541.0], [33.6, 40542.0], [33.7, 40542.0], [33.8, 40542.0], [33.9, 40545.0], [34.0, 40551.0], [34.1, 40551.0], [34.2, 40554.0], [34.3, 40555.0], [34.4, 40555.0], [34.5, 40555.0], [34.6, 40555.0], [34.7, 40555.0], [34.8, 40555.0], [34.9, 40558.0], [35.0, 40559.0], [35.1, 40559.0], [35.2, 40559.0], [35.3, 40560.0], [35.4, 40560.0], [35.5, 40561.0], [35.6, 40566.0], [35.7, 40566.0], [35.8, 40567.0], [35.9, 40567.0], [36.0, 40568.0], [36.1, 40568.0], [36.2, 40568.0], [36.3, 40568.0], [36.4, 40568.0], [36.5, 40569.0], [36.6, 40570.0], [36.7, 40570.0], [36.8, 40573.0], [36.9, 40573.0], [37.0, 40573.0], [37.1, 40573.0], [37.2, 40574.0], [37.3, 40574.0], [37.4, 40574.0], [37.5, 40575.0], [37.6, 40576.0], [37.7, 40576.0], [37.8, 40577.0], [37.9, 40578.0], [38.0, 40584.0], [38.1, 40584.0], [38.2, 40585.0], [38.3, 40586.0], [38.4, 40586.0], [38.5, 40588.0], [38.6, 40588.0], [38.7, 40588.0], [38.8, 40591.0], [38.9, 40592.0], [39.0, 40592.0], [39.1, 40592.0], [39.2, 40592.0], [39.3, 40593.0], [39.4, 40593.0], [39.5, 40593.0], [39.6, 40595.0], [39.7, 40595.0], [39.8, 40597.0], [39.9, 40597.0], [40.0, 40599.0], [40.1, 40599.0], [40.2, 40600.0], [40.3, 40601.0], [40.4, 40601.0], [40.5, 40602.0], [40.6, 40603.0], [40.7, 40603.0], [40.8, 40603.0], [40.9, 40603.0], [41.0, 40603.0], [41.1, 40603.0], [41.2, 40609.0], [41.3, 40609.0], [41.4, 40609.0], [41.5, 40610.0], [41.6, 40611.0], [41.7, 40611.0], [41.8, 40612.0], [41.9, 40612.0], [42.0, 40612.0], [42.1, 40615.0], [42.2, 40617.0], [42.3, 40619.0], [42.4, 40619.0], [42.5, 40620.0], [42.6, 40625.0], [42.7, 40625.0], [42.8, 40627.0], [42.9, 40632.0], [43.0, 40632.0], [43.1, 40632.0], [43.2, 40633.0], [43.3, 40634.0], [43.4, 40634.0], [43.5, 40634.0], [43.6, 40635.0], [43.7, 40635.0], [43.8, 40636.0], [43.9, 40637.0], [44.0, 40637.0], [44.1, 40637.0], [44.2, 40637.0], [44.3, 40638.0], [44.4, 40638.0], [44.5, 40638.0], [44.6, 40638.0], [44.7, 40638.0], [44.8, 40639.0], [44.9, 40643.0], [45.0, 40643.0], [45.1, 40644.0], [45.2, 40645.0], [45.3, 40646.0], [45.4, 40646.0], [45.5, 40646.0], [45.6, 40646.0], [45.7, 40646.0], [45.8, 40647.0], [45.9, 40647.0], [46.0, 40647.0], [46.1, 40648.0], [46.2, 40648.0], [46.3, 40648.0], [46.4, 40648.0], [46.5, 40650.0], [46.6, 40652.0], [46.7, 40652.0], [46.8, 40652.0], [46.9, 40653.0], [47.0, 40653.0], [47.1, 40653.0], [47.2, 40654.0], [47.3, 40654.0], [47.4, 40654.0], [47.5, 40655.0], [47.6, 40657.0], [47.7, 40657.0], [47.8, 40659.0], [47.9, 40659.0], [48.0, 40659.0], [48.1, 40661.0], [48.2, 40662.0], [48.3, 40663.0], [48.4, 40663.0], [48.5, 40668.0], [48.6, 40668.0], [48.7, 40668.0], [48.8, 40670.0], [48.9, 40670.0], [49.0, 40670.0], [49.1, 40671.0], [49.2, 40672.0], [49.3, 40673.0], [49.4, 40673.0], [49.5, 40673.0], [49.6, 40673.0], [49.7, 40673.0], [49.8, 40674.0], [49.9, 40676.0], [50.0, 40676.0], [50.1, 40678.0], [50.2, 40678.0], [50.3, 40679.0], [50.4, 40679.0], [50.5, 40681.0], [50.6, 40683.0], [50.7, 40683.0], [50.8, 40684.0], [50.9, 40684.0], [51.0, 40684.0], [51.1, 40685.0], [51.2, 40685.0], [51.3, 40686.0], [51.4, 40686.0], [51.5, 40687.0], [51.6, 40687.0], [51.7, 40687.0], [51.8, 40693.0], [51.9, 40697.0], [52.0, 40697.0], [52.1, 40698.0], [52.2, 40699.0], [52.3, 40701.0], [52.4, 40701.0], [52.5, 40701.0], [52.6, 40702.0], [52.7, 40702.0], [52.8, 40704.0], [52.9, 40705.0], [53.0, 40705.0], [53.1, 40708.0], [53.2, 40708.0], [53.3, 40708.0], [53.4, 40708.0], [53.5, 40710.0], [53.6, 40711.0], [53.7, 40711.0], [53.8, 40712.0], [53.9, 40714.0], [54.0, 40714.0], [54.1, 40714.0], [54.2, 40715.0], [54.3, 40715.0], [54.4, 40715.0], [54.5, 40716.0], [54.6, 40716.0], [54.7, 40716.0], [54.8, 40717.0], [54.9, 40719.0], [55.0, 40719.0], [55.1, 40719.0], [55.2, 40720.0], [55.3, 40721.0], [55.4, 40721.0], [55.5, 40721.0], [55.6, 40721.0], [55.7, 40721.0], [55.8, 40721.0], [55.9, 40722.0], [56.0, 40722.0], [56.1, 40723.0], [56.2, 40723.0], [56.3, 40723.0], [56.4, 40723.0], [56.5, 40724.0], [56.6, 40725.0], [56.7, 40725.0], [56.8, 40725.0], [56.9, 40729.0], [57.0, 40729.0], [57.1, 40729.0], [57.2, 40736.0], [57.3, 40736.0], [57.4, 40736.0], [57.5, 40737.0], [57.6, 40737.0], [57.7, 40737.0], [57.8, 40737.0], [57.9, 40738.0], [58.0, 40738.0], [58.1, 40739.0], [58.2, 40742.0], [58.3, 40745.0], [58.4, 40745.0], [58.5, 40746.0], [58.6, 40747.0], [58.7, 40747.0], [58.8, 40748.0], [58.9, 40749.0], [59.0, 40749.0], [59.1, 40750.0], [59.2, 40752.0], [59.3, 40752.0], [59.4, 40752.0], [59.5, 40753.0], [59.6, 40755.0], [59.7, 40755.0], [59.8, 40755.0], [59.9, 40757.0], [60.0, 40757.0], [60.1, 40757.0], [60.2, 40758.0], [60.3, 40758.0], [60.4, 40758.0], [60.5, 40759.0], [60.6, 40759.0], [60.7, 40759.0], [60.8, 40759.0], [60.9, 40760.0], [61.0, 40760.0], [61.1, 40760.0], [61.2, 40761.0], [61.3, 40762.0], [61.4, 40762.0], [61.5, 40762.0], [61.6, 40762.0], [61.7, 40762.0], [61.8, 40762.0], [61.9, 40765.0], [62.0, 40765.0], [62.1, 40766.0], [62.2, 40766.0], [62.3, 40767.0], [62.4, 40767.0], [62.5, 40767.0], [62.6, 40769.0], [62.7, 40769.0], [62.8, 40771.0], [62.9, 40772.0], [63.0, 40772.0], [63.1, 40772.0], [63.2, 40772.0], [63.3, 40774.0], [63.4, 40774.0], [63.5, 40775.0], [63.6, 40776.0], [63.7, 40776.0], [63.8, 40777.0], [63.9, 40779.0], [64.0, 40779.0], [64.1, 40779.0], [64.2, 40780.0], [64.3, 40781.0], [64.4, 40781.0], [64.5, 40781.0], [64.6, 40782.0], [64.7, 40782.0], [64.8, 40783.0], [64.9, 40784.0], [65.0, 40784.0], [65.1, 40784.0], [65.2, 40785.0], [65.3, 40786.0], [65.4, 40786.0], [65.5, 40786.0], [65.6, 40788.0], [65.7, 40788.0], [65.8, 40788.0], [65.9, 40789.0], [66.0, 40789.0], [66.1, 40790.0], [66.2, 40791.0], [66.3, 40791.0], [66.4, 40791.0], [66.5, 40792.0], [66.6, 40795.0], [66.7, 40795.0], [66.8, 40795.0], [66.9, 40796.0], [67.0, 40796.0], [67.1, 40797.0], [67.2, 40797.0], [67.3, 40797.0], [67.4, 40797.0], [67.5, 40799.0], [67.6, 40801.0], [67.7, 40801.0], [67.8, 40803.0], [67.9, 40804.0], [68.0, 40804.0], [68.1, 40804.0], [68.2, 40805.0], [68.3, 40807.0], [68.4, 40807.0], [68.5, 40810.0], [68.6, 40810.0], [68.7, 40810.0], [68.8, 40812.0], [68.9, 40813.0], [69.0, 40813.0], [69.1, 40813.0], [69.2, 40814.0], [69.3, 40816.0], [69.4, 40816.0], [69.5, 40818.0], [69.6, 40819.0], [69.7, 40819.0], [69.8, 40819.0], [69.9, 40823.0], [70.0, 40823.0], [70.1, 40824.0], [70.2, 40826.0], [70.3, 40826.0], [70.4, 40826.0], [70.5, 40829.0], [70.6, 40832.0], [70.7, 40832.0], [70.8, 40833.0], [70.9, 40834.0], [71.0, 40834.0], [71.1, 40834.0], [71.2, 40836.0], [71.3, 40838.0], [71.4, 40838.0], [71.5, 40839.0], [71.6, 40839.0], [71.7, 40839.0], [71.8, 40841.0], [71.9, 40841.0], [72.0, 40841.0], [72.1, 40844.0], [72.2, 40844.0], [72.3, 40845.0], [72.4, 40845.0], [72.5, 40846.0], [72.6, 40847.0], [72.7, 40847.0], [72.8, 40847.0], [72.9, 40850.0], [73.0, 40850.0], [73.1, 40852.0], [73.2, 40855.0], [73.3, 40856.0], [73.4, 40856.0], [73.5, 40857.0], [73.6, 40860.0], [73.7, 40860.0], [73.8, 40861.0], [73.9, 40861.0], [74.0, 40861.0], [74.1, 40862.0], [74.2, 40864.0], [74.3, 40867.0], [74.4, 40867.0], [74.5, 40870.0], [74.6, 40872.0], [74.7, 40872.0], [74.8, 40872.0], [74.9, 40873.0], [75.0, 40873.0], [75.1, 40873.0], [75.2, 40874.0], [75.3, 40874.0], [75.4, 40874.0], [75.5, 40883.0], [75.6, 40883.0], [75.7, 40883.0], [75.8, 40886.0], [75.9, 40888.0], [76.0, 40888.0], [76.1, 40890.0], [76.2, 40890.0], [76.3, 40892.0], [76.4, 40892.0], [76.5, 40896.0], [76.6, 40900.0], [76.7, 40900.0], [76.8, 40901.0], [76.9, 40927.0], [77.0, 40927.0], [77.1, 40929.0], [77.2, 40931.0], [77.3, 40931.0], [77.4, 40931.0], [77.5, 40934.0], [77.6, 40934.0], [77.7, 40934.0], [77.8, 40934.0], [77.9, 40935.0], [78.0, 40935.0], [78.1, 40940.0], [78.2, 40952.0], [78.3, 40953.0], [78.4, 40953.0], [78.5, 40954.0], [78.6, 40957.0], [78.7, 40957.0], [78.8, 40957.0], [78.9, 40962.0], [79.0, 40962.0], [79.1, 40966.0], [79.2, 40967.0], [79.3, 40968.0], [79.4, 40968.0], [79.5, 40968.0], [79.6, 40969.0], [79.7, 40969.0], [79.8, 40972.0], [79.9, 40973.0], [80.0, 40973.0], [80.1, 40977.0], [80.2, 40978.0], [80.3, 40980.0], [80.4, 40980.0], [80.5, 40981.0], [80.6, 40985.0], [80.7, 40985.0], [80.8, 40986.0], [80.9, 40990.0], [81.0, 40990.0], [81.1, 40997.0], [81.2, 40997.0], [81.3, 40997.0], [81.4, 40997.0], [81.5, 40998.0], [81.6, 40998.0], [81.7, 40998.0], [81.8, 40998.0], [81.9, 40999.0], [82.0, 40999.0], [82.1, 40999.0], [82.2, 41000.0], [82.3, 41001.0], [82.4, 41001.0], [82.5, 41002.0], [82.6, 41004.0], [82.7, 41004.0], [82.8, 41005.0], [82.9, 41006.0], [83.0, 41006.0], [83.1, 41007.0], [83.2, 41008.0], [83.3, 41008.0], [83.4, 41008.0], [83.5, 41010.0], [83.6, 41011.0], [83.7, 41011.0], [83.8, 41012.0], [83.9, 41013.0], [84.0, 41013.0], [84.1, 41015.0], [84.2, 41021.0], [84.3, 41023.0], [84.4, 41023.0], [84.5, 41023.0], [84.6, 41023.0], [84.7, 41023.0], [84.8, 41025.0], [84.9, 41027.0], [85.0, 41027.0], [85.1, 41027.0], [85.2, 41029.0], [85.3, 41031.0], [85.4, 41031.0], [85.5, 41034.0], [85.6, 41040.0], [85.7, 41040.0], [85.8, 41040.0], [85.9, 41041.0], [86.0, 41041.0], [86.1, 41044.0], [86.2, 41045.0], [86.3, 41047.0], [86.4, 41047.0], [86.5, 41055.0], [86.6, 41056.0], [86.7, 41056.0], [86.8, 41056.0], [86.9, 41060.0], [87.0, 41060.0], [87.1, 41063.0], [87.2, 41064.0], [87.3, 41069.0], [87.4, 41069.0], [87.5, 41069.0], [87.6, 41075.0], [87.7, 41075.0], [87.8, 41077.0], [87.9, 41081.0], [88.0, 41081.0], [88.1, 41090.0], [88.2, 41090.0], [88.3, 41091.0], [88.4, 41091.0], [88.5, 41093.0], [88.6, 41093.0], [88.7, 41093.0], [88.8, 41103.0], [88.9, 41108.0], [89.0, 41108.0], [89.1, 41122.0], [89.2, 41122.0], [89.3, 41186.0], [89.4, 41186.0], [89.5, 41197.0], [89.6, 41223.0], [89.7, 41223.0], [89.8, 41262.0], [89.9, 41283.0], [90.0, 41365.0], [90.1, 41365.0], [90.2, 41409.0], [90.3, 41442.0], [90.4, 41442.0], [90.5, 41522.0], [90.6, 41539.0], [90.7, 41539.0], [90.8, 41582.0], [90.9, 41730.0], [91.0, 41742.0], [91.1, 41742.0], [91.2, 41771.0], [91.3, 41823.0], [91.4, 41823.0], [91.5, 41866.0], [91.6, 41891.0], [91.7, 41891.0], [91.8, 41918.0], [91.9, 42026.0], [92.0, 42055.0], [92.1, 42055.0], [92.2, 42068.0], [92.3, 42172.0], [92.4, 42172.0], [92.5, 42228.0], [92.6, 42231.0], [92.7, 42231.0], [92.8, 42250.0], [92.9, 42341.0], [93.0, 42345.0], [93.1, 42345.0], [93.2, 42429.0], [93.3, 42434.0], [93.4, 42434.0], [93.5, 42573.0], [93.6, 42606.0], [93.7, 42606.0], [93.8, 42610.0], [93.9, 42623.0], [94.0, 42764.0], [94.1, 42764.0], [94.2, 42768.0], [94.3, 42769.0], [94.4, 42769.0], [94.5, 42863.0], [94.6, 42904.0], [94.7, 42904.0], [94.8, 42907.0], [94.9, 42956.0], [95.0, 43048.0], [95.1, 43048.0], [95.2, 43060.0], [95.3, 43135.0], [95.4, 43135.0], [95.5, 43182.0], [95.6, 43289.0], [95.7, 43289.0], [95.8, 43312.0], [95.9, 43373.0], [96.0, 43387.0], [96.1, 43387.0], [96.2, 43422.0], [96.3, 43444.0], [96.4, 43444.0], [96.5, 43520.0], [96.6, 43600.0], [96.7, 43600.0], [96.8, 43623.0], [96.9, 43668.0], [97.0, 43680.0], [97.1, 43680.0], [97.2, 43691.0], [97.3, 43785.0], [97.4, 43785.0], [97.5, 43795.0], [97.6, 43843.0], [97.7, 43843.0], [97.8, 43878.0], [97.9, 44026.0], [98.0, 44029.0], [98.1, 44029.0], [98.2, 44047.0], [98.3, 44122.0], [98.4, 44122.0], [98.5, 44159.0], [98.6, 44244.0], [98.7, 44244.0], [98.8, 44342.0], [98.9, 44345.0], [99.0, 44356.0], [99.1, 44356.0], [99.2, 44389.0], [99.3, 44407.0], [99.4, 44407.0], [99.5, 44452.0], [99.6, 44553.0], [99.7, 44553.0], [99.8, 44576.0], [99.9, 44658.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 2961.0], [0.1, 2961.0], [0.2, 3429.0], [0.3, 3430.0], [0.4, 3430.0], [0.5, 3433.0], [0.6, 3433.0], [0.7, 3433.0], [0.8, 3435.0], [0.9, 3436.0], [1.0, 3437.0], [1.1, 3437.0], [1.2, 3437.0], [1.3, 3439.0], [1.4, 3439.0], [1.5, 3440.0], [1.6, 3443.0], [1.7, 3443.0], [1.8, 3443.0], [1.9, 3449.0], [2.0, 3450.0], [2.1, 3450.0], [2.2, 3451.0], [2.3, 3459.0], [2.4, 3459.0], [2.5, 3462.0], [2.6, 3464.0], [2.7, 3464.0], [2.8, 3469.0], [2.9, 3473.0], [3.0, 3485.0], [3.1, 3485.0], [3.2, 3486.0], [3.3, 3489.0], [3.4, 3489.0], [3.5, 3490.0], [3.6, 3492.0], [3.7, 3492.0], [3.8, 3493.0], [3.9, 3496.0], [4.0, 3497.0], [4.1, 3497.0], [4.2, 3498.0], [4.3, 3501.0], [4.4, 3501.0], [4.5, 3509.0], [4.6, 3511.0], [4.7, 3511.0], [4.8, 3512.0], [4.9, 3514.0], [5.0, 3514.0], [5.1, 3517.0], [5.2, 3519.0], [5.3, 3521.0], [5.4, 3521.0], [5.5, 3524.0], [5.6, 3531.0], [5.7, 3531.0], [5.8, 3533.0], [5.9, 3534.0], [6.0, 3534.0], [6.1, 3536.0], [6.2, 3548.0], [6.3, 3554.0], [6.4, 3554.0], [6.5, 3555.0], [6.6, 3566.0], [6.7, 3566.0], [6.8, 3571.0], [6.9, 3573.0], [7.0, 3573.0], [7.1, 3585.0], [7.2, 21101.0], [7.3, 37534.0], [7.4, 37534.0], [7.5, 39412.0], [7.6, 39457.0], [7.7, 39457.0], [7.8, 39466.0], [7.9, 39495.0], [8.0, 39495.0], [8.1, 39504.0], [8.2, 39512.0], [8.3, 39520.0], [8.4, 39520.0], [8.5, 39530.0], [8.6, 39550.0], [8.7, 39550.0], [8.8, 39559.0], [8.9, 39562.0], [9.0, 39562.0], [9.1, 39568.0], [9.2, 39585.0], [9.3, 39586.0], [9.4, 39586.0], [9.5, 39591.0], [9.6, 39629.0], [9.7, 39629.0], [9.8, 39640.0], [9.9, 39640.0], [10.0, 39640.0], [10.1, 39643.0], [10.2, 39663.0], [10.3, 39692.0], [10.4, 39692.0], [10.5, 39703.0], [10.6, 39705.0], [10.7, 39705.0], [10.8, 39712.0], [10.9, 39716.0], [11.0, 39718.0], [11.1, 39718.0], [11.2, 39721.0], [11.3, 39726.0], [11.4, 39726.0], [11.5, 39755.0], [11.6, 39755.0], [11.7, 39755.0], [11.8, 39759.0], [11.9, 39782.0], [12.0, 39793.0], [12.1, 39793.0], [12.2, 39799.0], [12.3, 39818.0], [12.4, 39818.0], [12.5, 39827.0], [12.6, 39865.0], [12.7, 39865.0], [12.8, 39867.0], [12.9, 39880.0], [13.0, 39888.0], [13.1, 39888.0], [13.2, 39915.0], [13.3, 39935.0], [13.4, 39935.0], [13.5, 39953.0], [13.6, 39995.0], [13.7, 39995.0], [13.8, 40005.0], [13.9, 40051.0], [14.0, 40087.0], [14.1, 40087.0], [14.2, 40109.0], [14.3, 40117.0], [14.4, 40117.0], [14.5, 40160.0], [14.6, 40167.0], [14.7, 40167.0], [14.8, 40176.0], [14.9, 40180.0], [15.0, 40262.0], [15.1, 40262.0], [15.2, 40271.0], [15.3, 40290.0], [15.4, 40290.0], [15.5, 40293.0], [15.6, 40293.0], [15.7, 40293.0], [15.8, 40293.0], [15.9, 40296.0], [16.0, 40299.0], [16.1, 40299.0], [16.2, 40307.0], [16.3, 40308.0], [16.4, 40308.0], [16.5, 40311.0], [16.6, 40313.0], [16.7, 40313.0], [16.8, 40324.0], [16.9, 40325.0], [17.0, 40326.0], [17.1, 40326.0], [17.2, 40326.0], [17.3, 40331.0], [17.4, 40331.0], [17.5, 40334.0], [17.6, 40335.0], [17.7, 40335.0], [17.8, 40336.0], [17.9, 40336.0], [18.0, 40345.0], [18.1, 40345.0], [18.2, 40350.0], [18.3, 40355.0], [18.4, 40355.0], [18.5, 40355.0], [18.6, 40357.0], [18.7, 40357.0], [18.8, 40358.0], [18.9, 40358.0], [19.0, 40358.0], [19.1, 40358.0], [19.2, 40360.0], [19.3, 40364.0], [19.4, 40364.0], [19.5, 40364.0], [19.6, 40367.0], [19.7, 40367.0], [19.8, 40367.0], [19.9, 40368.0], [20.0, 40371.0], [20.1, 40371.0], [20.2, 40373.0], [20.3, 40375.0], [20.4, 40375.0], [20.5, 40380.0], [20.6, 40383.0], [20.7, 40383.0], [20.8, 40384.0], [20.9, 40385.0], [21.0, 40387.0], [21.1, 40387.0], [21.2, 40388.0], [21.3, 40392.0], [21.4, 40392.0], [21.5, 40395.0], [21.6, 40395.0], [21.7, 40395.0], [21.8, 40400.0], [21.9, 40402.0], [22.0, 40403.0], [22.1, 40403.0], [22.2, 40404.0], [22.3, 40407.0], [22.4, 40407.0], [22.5, 40414.0], [22.6, 40415.0], [22.7, 40415.0], [22.8, 40415.0], [22.9, 40418.0], [23.0, 40419.0], [23.1, 40419.0], [23.2, 40429.0], [23.3, 40431.0], [23.4, 40431.0], [23.5, 40433.0], [23.6, 40437.0], [23.7, 40437.0], [23.8, 40439.0], [23.9, 40444.0], [24.0, 40444.0], [24.1, 40444.0], [24.2, 40445.0], [24.3, 40449.0], [24.4, 40449.0], [24.5, 40449.0], [24.6, 40459.0], [24.7, 40459.0], [24.8, 40459.0], [24.9, 40460.0], [25.0, 40461.0], [25.1, 40461.0], [25.2, 40464.0], [25.3, 40464.0], [25.4, 40464.0], [25.5, 40464.0], [25.6, 40465.0], [25.7, 40465.0], [25.8, 40467.0], [25.9, 40468.0], [26.0, 40469.0], [26.1, 40469.0], [26.2, 40469.0], [26.3, 40469.0], [26.4, 40469.0], [26.5, 40469.0], [26.6, 40472.0], [26.7, 40472.0], [26.8, 40472.0], [26.9, 40472.0], [27.0, 40475.0], [27.1, 40475.0], [27.2, 40477.0], [27.3, 40481.0], [27.4, 40481.0], [27.5, 40482.0], [27.6, 40484.0], [27.7, 40484.0], [27.8, 40487.0], [27.9, 40488.0], [28.0, 40491.0], [28.1, 40491.0], [28.2, 40491.0], [28.3, 40492.0], [28.4, 40492.0], [28.5, 40492.0], [28.6, 40494.0], [28.7, 40494.0], [28.8, 40494.0], [28.9, 40494.0], [29.0, 40502.0], [29.1, 40502.0], [29.2, 40502.0], [29.3, 40503.0], [29.4, 40503.0], [29.5, 40505.0], [29.6, 40507.0], [29.7, 40507.0], [29.8, 40511.0], [29.9, 40513.0], [30.0, 40515.0], [30.1, 40515.0], [30.2, 40515.0], [30.3, 40515.0], [30.4, 40515.0], [30.5, 40518.0], [30.6, 40518.0], [30.7, 40518.0], [30.8, 40518.0], [30.9, 40520.0], [31.0, 40523.0], [31.1, 40523.0], [31.2, 40523.0], [31.3, 40524.0], [31.4, 40524.0], [31.5, 40525.0], [31.6, 40526.0], [31.7, 40526.0], [31.8, 40528.0], [31.9, 40530.0], [32.0, 40530.0], [32.1, 40530.0], [32.2, 40532.0], [32.3, 40533.0], [32.4, 40533.0], [32.5, 40535.0], [32.6, 40535.0], [32.7, 40535.0], [32.8, 40536.0], [32.9, 40537.0], [33.0, 40537.0], [33.1, 40537.0], [33.2, 40538.0], [33.3, 40541.0], [33.4, 40541.0], [33.5, 40541.0], [33.6, 40542.0], [33.7, 40542.0], [33.8, 40542.0], [33.9, 40545.0], [34.0, 40551.0], [34.1, 40551.0], [34.2, 40554.0], [34.3, 40555.0], [34.4, 40555.0], [34.5, 40555.0], [34.6, 40555.0], [34.7, 40555.0], [34.8, 40555.0], [34.9, 40558.0], [35.0, 40559.0], [35.1, 40559.0], [35.2, 40559.0], [35.3, 40560.0], [35.4, 40560.0], [35.5, 40561.0], [35.6, 40566.0], [35.7, 40566.0], [35.8, 40567.0], [35.9, 40567.0], [36.0, 40568.0], [36.1, 40568.0], [36.2, 40568.0], [36.3, 40568.0], [36.4, 40568.0], [36.5, 40569.0], [36.6, 40570.0], [36.7, 40570.0], [36.8, 40573.0], [36.9, 40573.0], [37.0, 40573.0], [37.1, 40573.0], [37.2, 40574.0], [37.3, 40574.0], [37.4, 40574.0], [37.5, 40575.0], [37.6, 40576.0], [37.7, 40576.0], [37.8, 40577.0], [37.9, 40578.0], [38.0, 40584.0], [38.1, 40584.0], [38.2, 40585.0], [38.3, 40586.0], [38.4, 40586.0], [38.5, 40588.0], [38.6, 40588.0], [38.7, 40588.0], [38.8, 40591.0], [38.9, 40592.0], [39.0, 40592.0], [39.1, 40592.0], [39.2, 40592.0], [39.3, 40593.0], [39.4, 40593.0], [39.5, 40593.0], [39.6, 40595.0], [39.7, 40595.0], [39.8, 40597.0], [39.9, 40597.0], [40.0, 40599.0], [40.1, 40599.0], [40.2, 40600.0], [40.3, 40601.0], [40.4, 40601.0], [40.5, 40602.0], [40.6, 40603.0], [40.7, 40603.0], [40.8, 40603.0], [40.9, 40603.0], [41.0, 40603.0], [41.1, 40603.0], [41.2, 40609.0], [41.3, 40609.0], [41.4, 40609.0], [41.5, 40610.0], [41.6, 40611.0], [41.7, 40611.0], [41.8, 40612.0], [41.9, 40612.0], [42.0, 40612.0], [42.1, 40615.0], [42.2, 40617.0], [42.3, 40619.0], [42.4, 40619.0], [42.5, 40620.0], [42.6, 40625.0], [42.7, 40625.0], [42.8, 40627.0], [42.9, 40632.0], [43.0, 40632.0], [43.1, 40632.0], [43.2, 40633.0], [43.3, 40634.0], [43.4, 40634.0], [43.5, 40634.0], [43.6, 40635.0], [43.7, 40635.0], [43.8, 40636.0], [43.9, 40637.0], [44.0, 40637.0], [44.1, 40637.0], [44.2, 40637.0], [44.3, 40638.0], [44.4, 40638.0], [44.5, 40638.0], [44.6, 40638.0], [44.7, 40638.0], [44.8, 40639.0], [44.9, 40643.0], [45.0, 40643.0], [45.1, 40644.0], [45.2, 40645.0], [45.3, 40646.0], [45.4, 40646.0], [45.5, 40646.0], [45.6, 40646.0], [45.7, 40646.0], [45.8, 40647.0], [45.9, 40647.0], [46.0, 40647.0], [46.1, 40648.0], [46.2, 40648.0], [46.3, 40648.0], [46.4, 40648.0], [46.5, 40650.0], [46.6, 40652.0], [46.7, 40652.0], [46.8, 40652.0], [46.9, 40653.0], [47.0, 40653.0], [47.1, 40653.0], [47.2, 40654.0], [47.3, 40654.0], [47.4, 40654.0], [47.5, 40655.0], [47.6, 40657.0], [47.7, 40657.0], [47.8, 40659.0], [47.9, 40659.0], [48.0, 40659.0], [48.1, 40661.0], [48.2, 40662.0], [48.3, 40663.0], [48.4, 40663.0], [48.5, 40668.0], [48.6, 40668.0], [48.7, 40668.0], [48.8, 40670.0], [48.9, 40670.0], [49.0, 40670.0], [49.1, 40671.0], [49.2, 40672.0], [49.3, 40673.0], [49.4, 40673.0], [49.5, 40673.0], [49.6, 40673.0], [49.7, 40673.0], [49.8, 40674.0], [49.9, 40676.0], [50.0, 40676.0], [50.1, 40678.0], [50.2, 40678.0], [50.3, 40679.0], [50.4, 40679.0], [50.5, 40681.0], [50.6, 40683.0], [50.7, 40683.0], [50.8, 40684.0], [50.9, 40684.0], [51.0, 40684.0], [51.1, 40685.0], [51.2, 40685.0], [51.3, 40686.0], [51.4, 40686.0], [51.5, 40687.0], [51.6, 40687.0], [51.7, 40687.0], [51.8, 40693.0], [51.9, 40697.0], [52.0, 40697.0], [52.1, 40698.0], [52.2, 40699.0], [52.3, 40701.0], [52.4, 40701.0], [52.5, 40701.0], [52.6, 40702.0], [52.7, 40702.0], [52.8, 40704.0], [52.9, 40705.0], [53.0, 40705.0], [53.1, 40708.0], [53.2, 40708.0], [53.3, 40708.0], [53.4, 40708.0], [53.5, 40710.0], [53.6, 40711.0], [53.7, 40711.0], [53.8, 40712.0], [53.9, 40714.0], [54.0, 40714.0], [54.1, 40714.0], [54.2, 40715.0], [54.3, 40715.0], [54.4, 40715.0], [54.5, 40716.0], [54.6, 40716.0], [54.7, 40716.0], [54.8, 40717.0], [54.9, 40719.0], [55.0, 40719.0], [55.1, 40719.0], [55.2, 40720.0], [55.3, 40721.0], [55.4, 40721.0], [55.5, 40721.0], [55.6, 40721.0], [55.7, 40721.0], [55.8, 40721.0], [55.9, 40722.0], [56.0, 40722.0], [56.1, 40723.0], [56.2, 40723.0], [56.3, 40723.0], [56.4, 40723.0], [56.5, 40724.0], [56.6, 40725.0], [56.7, 40725.0], [56.8, 40725.0], [56.9, 40729.0], [57.0, 40729.0], [57.1, 40729.0], [57.2, 40736.0], [57.3, 40736.0], [57.4, 40736.0], [57.5, 40737.0], [57.6, 40737.0], [57.7, 40737.0], [57.8, 40737.0], [57.9, 40738.0], [58.0, 40738.0], [58.1, 40739.0], [58.2, 40742.0], [58.3, 40745.0], [58.4, 40745.0], [58.5, 40746.0], [58.6, 40747.0], [58.7, 40747.0], [58.8, 40748.0], [58.9, 40749.0], [59.0, 40749.0], [59.1, 40750.0], [59.2, 40752.0], [59.3, 40752.0], [59.4, 40752.0], [59.5, 40753.0], [59.6, 40755.0], [59.7, 40755.0], [59.8, 40755.0], [59.9, 40757.0], [60.0, 40757.0], [60.1, 40757.0], [60.2, 40758.0], [60.3, 40758.0], [60.4, 40758.0], [60.5, 40759.0], [60.6, 40759.0], [60.7, 40759.0], [60.8, 40759.0], [60.9, 40760.0], [61.0, 40760.0], [61.1, 40760.0], [61.2, 40761.0], [61.3, 40762.0], [61.4, 40762.0], [61.5, 40762.0], [61.6, 40762.0], [61.7, 40762.0], [61.8, 40762.0], [61.9, 40765.0], [62.0, 40765.0], [62.1, 40766.0], [62.2, 40766.0], [62.3, 40767.0], [62.4, 40767.0], [62.5, 40767.0], [62.6, 40769.0], [62.7, 40769.0], [62.8, 40771.0], [62.9, 40772.0], [63.0, 40772.0], [63.1, 40772.0], [63.2, 40772.0], [63.3, 40774.0], [63.4, 40774.0], [63.5, 40775.0], [63.6, 40776.0], [63.7, 40776.0], [63.8, 40777.0], [63.9, 40779.0], [64.0, 40779.0], [64.1, 40779.0], [64.2, 40780.0], [64.3, 40781.0], [64.4, 40781.0], [64.5, 40781.0], [64.6, 40782.0], [64.7, 40782.0], [64.8, 40783.0], [64.9, 40784.0], [65.0, 40784.0], [65.1, 40784.0], [65.2, 40785.0], [65.3, 40786.0], [65.4, 40786.0], [65.5, 40786.0], [65.6, 40788.0], [65.7, 40788.0], [65.8, 40788.0], [65.9, 40789.0], [66.0, 40789.0], [66.1, 40790.0], [66.2, 40791.0], [66.3, 40791.0], [66.4, 40791.0], [66.5, 40792.0], [66.6, 40795.0], [66.7, 40795.0], [66.8, 40795.0], [66.9, 40796.0], [67.0, 40796.0], [67.1, 40797.0], [67.2, 40797.0], [67.3, 40797.0], [67.4, 40797.0], [67.5, 40799.0], [67.6, 40801.0], [67.7, 40801.0], [67.8, 40803.0], [67.9, 40804.0], [68.0, 40804.0], [68.1, 40804.0], [68.2, 40805.0], [68.3, 40807.0], [68.4, 40807.0], [68.5, 40810.0], [68.6, 40810.0], [68.7, 40810.0], [68.8, 40812.0], [68.9, 40813.0], [69.0, 40813.0], [69.1, 40813.0], [69.2, 40814.0], [69.3, 40816.0], [69.4, 40816.0], [69.5, 40818.0], [69.6, 40819.0], [69.7, 40819.0], [69.8, 40819.0], [69.9, 40823.0], [70.0, 40823.0], [70.1, 40824.0], [70.2, 40826.0], [70.3, 40826.0], [70.4, 40826.0], [70.5, 40829.0], [70.6, 40832.0], [70.7, 40832.0], [70.8, 40833.0], [70.9, 40834.0], [71.0, 40834.0], [71.1, 40834.0], [71.2, 40836.0], [71.3, 40838.0], [71.4, 40838.0], [71.5, 40839.0], [71.6, 40839.0], [71.7, 40839.0], [71.8, 40841.0], [71.9, 40841.0], [72.0, 40841.0], [72.1, 40844.0], [72.2, 40844.0], [72.3, 40845.0], [72.4, 40845.0], [72.5, 40846.0], [72.6, 40847.0], [72.7, 40847.0], [72.8, 40847.0], [72.9, 40850.0], [73.0, 40850.0], [73.1, 40852.0], [73.2, 40855.0], [73.3, 40856.0], [73.4, 40856.0], [73.5, 40857.0], [73.6, 40860.0], [73.7, 40860.0], [73.8, 40861.0], [73.9, 40861.0], [74.0, 40861.0], [74.1, 40862.0], [74.2, 40864.0], [74.3, 40867.0], [74.4, 40867.0], [74.5, 40870.0], [74.6, 40872.0], [74.7, 40872.0], [74.8, 40872.0], [74.9, 40873.0], [75.0, 40873.0], [75.1, 40873.0], [75.2, 40874.0], [75.3, 40874.0], [75.4, 40874.0], [75.5, 40883.0], [75.6, 40883.0], [75.7, 40883.0], [75.8, 40886.0], [75.9, 40888.0], [76.0, 40888.0], [76.1, 40890.0], [76.2, 40890.0], [76.3, 40892.0], [76.4, 40892.0], [76.5, 40896.0], [76.6, 40900.0], [76.7, 40900.0], [76.8, 40901.0], [76.9, 40927.0], [77.0, 40927.0], [77.1, 40929.0], [77.2, 40931.0], [77.3, 40931.0], [77.4, 40931.0], [77.5, 40934.0], [77.6, 40934.0], [77.7, 40934.0], [77.8, 40934.0], [77.9, 40935.0], [78.0, 40935.0], [78.1, 40940.0], [78.2, 40952.0], [78.3, 40953.0], [78.4, 40953.0], [78.5, 40954.0], [78.6, 40957.0], [78.7, 40957.0], [78.8, 40957.0], [78.9, 40962.0], [79.0, 40962.0], [79.1, 40966.0], [79.2, 40967.0], [79.3, 40968.0], [79.4, 40968.0], [79.5, 40968.0], [79.6, 40969.0], [79.7, 40969.0], [79.8, 40972.0], [79.9, 40973.0], [80.0, 40973.0], [80.1, 40977.0], [80.2, 40978.0], [80.3, 40980.0], [80.4, 40980.0], [80.5, 40981.0], [80.6, 40985.0], [80.7, 40985.0], [80.8, 40986.0], [80.9, 40990.0], [81.0, 40990.0], [81.1, 40997.0], [81.2, 40997.0], [81.3, 40997.0], [81.4, 40997.0], [81.5, 40998.0], [81.6, 40998.0], [81.7, 40998.0], [81.8, 40998.0], [81.9, 40999.0], [82.0, 40999.0], [82.1, 40999.0], [82.2, 41000.0], [82.3, 41001.0], [82.4, 41001.0], [82.5, 41002.0], [82.6, 41004.0], [82.7, 41004.0], [82.8, 41005.0], [82.9, 41006.0], [83.0, 41006.0], [83.1, 41007.0], [83.2, 41008.0], [83.3, 41008.0], [83.4, 41008.0], [83.5, 41010.0], [83.6, 41011.0], [83.7, 41011.0], [83.8, 41012.0], [83.9, 41013.0], [84.0, 41013.0], [84.1, 41015.0], [84.2, 41021.0], [84.3, 41023.0], [84.4, 41023.0], [84.5, 41023.0], [84.6, 41023.0], [84.7, 41023.0], [84.8, 41025.0], [84.9, 41027.0], [85.0, 41027.0], [85.1, 41027.0], [85.2, 41029.0], [85.3, 41031.0], [85.4, 41031.0], [85.5, 41034.0], [85.6, 41040.0], [85.7, 41040.0], [85.8, 41040.0], [85.9, 41041.0], [86.0, 41041.0], [86.1, 41044.0], [86.2, 41045.0], [86.3, 41047.0], [86.4, 41047.0], [86.5, 41055.0], [86.6, 41056.0], [86.7, 41056.0], [86.8, 41056.0], [86.9, 41060.0], [87.0, 41060.0], [87.1, 41063.0], [87.2, 41064.0], [87.3, 41069.0], [87.4, 41069.0], [87.5, 41069.0], [87.6, 41075.0], [87.7, 41075.0], [87.8, 41077.0], [87.9, 41081.0], [88.0, 41081.0], [88.1, 41090.0], [88.2, 41090.0], [88.3, 41091.0], [88.4, 41091.0], [88.5, 41093.0], [88.6, 41093.0], [88.7, 41093.0], [88.8, 41103.0], [88.9, 41108.0], [89.0, 41108.0], [89.1, 41122.0], [89.2, 41122.0], [89.3, 41186.0], [89.4, 41186.0], [89.5, 41197.0], [89.6, 41223.0], [89.7, 41223.0], [89.8, 41262.0], [89.9, 41283.0], [90.0, 41365.0], [90.1, 41365.0], [90.2, 41409.0], [90.3, 41442.0], [90.4, 41442.0], [90.5, 41522.0], [90.6, 41539.0], [90.7, 41539.0], [90.8, 41582.0], [90.9, 41730.0], [91.0, 41742.0], [91.1, 41742.0], [91.2, 41771.0], [91.3, 41823.0], [91.4, 41823.0], [91.5, 41866.0], [91.6, 41891.0], [91.7, 41891.0], [91.8, 41918.0], [91.9, 42026.0], [92.0, 42055.0], [92.1, 42055.0], [92.2, 42068.0], [92.3, 42172.0], [92.4, 42172.0], [92.5, 42228.0], [92.6, 42231.0], [92.7, 42231.0], [92.8, 42250.0], [92.9, 42341.0], [93.0, 42345.0], [93.1, 42345.0], [93.2, 42429.0], [93.3, 42434.0], [93.4, 42434.0], [93.5, 42573.0], [93.6, 42606.0], [93.7, 42606.0], [93.8, 42610.0], [93.9, 42623.0], [94.0, 42764.0], [94.1, 42764.0], [94.2, 42768.0], [94.3, 42769.0], [94.4, 42769.0], [94.5, 42863.0], [94.6, 42904.0], [94.7, 42904.0], [94.8, 42907.0], [94.9, 42956.0], [95.0, 43048.0], [95.1, 43048.0], [95.2, 43060.0], [95.3, 43135.0], [95.4, 43135.0], [95.5, 43182.0], [95.6, 43289.0], [95.7, 43289.0], [95.8, 43312.0], [95.9, 43373.0], [96.0, 43387.0], [96.1, 43387.0], [96.2, 43422.0], [96.3, 43444.0], [96.4, 43444.0], [96.5, 43520.0], [96.6, 43600.0], [96.7, 43600.0], [96.8, 43623.0], [96.9, 43668.0], [97.0, 43680.0], [97.1, 43680.0], [97.2, 43691.0], [97.3, 43785.0], [97.4, 43785.0], [97.5, 43795.0], [97.6, 43843.0], [97.7, 43843.0], [97.8, 43878.0], [97.9, 44026.0], [98.0, 44029.0], [98.1, 44029.0], [98.2, 44047.0], [98.3, 44122.0], [98.4, 44122.0], [98.5, 44159.0], [98.6, 44244.0], [98.7, 44244.0], [98.8, 44342.0], [98.9, 44345.0], [99.0, 44356.0], [99.1, 44356.0], [99.2, 44389.0], [99.3, 44407.0], [99.4, 44407.0], [99.5, 44452.0], [99.6, 44553.0], [99.7, 44553.0], [99.8, 44576.0], [99.9, 44658.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2900.0, "maxY": 107.0, "series": [{"data": [[2900.0, 1.0], [3400.0, 29.0], [3500.0, 20.0], [21100.0, 1.0], [37500.0, 1.0], [39800.0, 6.0], [39400.0, 4.0], [39500.0, 11.0], [39600.0, 6.0], [39700.0, 13.0], [39900.0, 4.0], [40000.0, 3.0], [40900.0, 39.0], [40700.0, 107.0], [40800.0, 63.0], [40500.0, 78.0], [40600.0, 85.0], [40100.0, 6.0], [40300.0, 39.0], [40400.0, 51.0], [40200.0, 8.0], [41100.0, 6.0], [41000.0, 46.0], [41200.0, 3.0], [41300.0, 1.0], [41400.0, 2.0], [42600.0, 3.0], [42700.0, 3.0], [42900.0, 3.0], [43000.0, 2.0], [42800.0, 1.0], [42500.0, 1.0], [42000.0, 3.0], [42100.0, 1.0], [42200.0, 3.0], [42300.0, 2.0], [42400.0, 2.0], [41500.0, 3.0], [41700.0, 3.0], [41800.0, 3.0], [41900.0, 1.0], [43200.0, 1.0], [43100.0, 2.0], [43300.0, 3.0], [43400.0, 2.0], [43500.0, 1.0], [44600.0, 1.0], [44100.0, 2.0], [44200.0, 1.0], [44300.0, 4.0], [44400.0, 2.0], [44500.0, 2.0], [43600.0, 5.0], [43700.0, 2.0], [43800.0, 2.0], [44000.0, 3.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[2900.0, 1.0], [3400.0, 29.0], [3500.0, 20.0], [21100.0, 1.0], [37500.0, 1.0], [39800.0, 6.0], [39400.0, 4.0], [39500.0, 11.0], [39600.0, 6.0], [39700.0, 13.0], [39900.0, 4.0], [40000.0, 3.0], [40900.0, 39.0], [40700.0, 107.0], [40800.0, 63.0], [40500.0, 78.0], [40600.0, 85.0], [40100.0, 6.0], [40300.0, 39.0], [40400.0, 51.0], [40200.0, 8.0], [41100.0, 6.0], [41000.0, 46.0], [41200.0, 3.0], [41300.0, 1.0], [41400.0, 2.0], [42600.0, 3.0], [42700.0, 3.0], [42900.0, 3.0], [43000.0, 2.0], [42800.0, 1.0], [42500.0, 1.0], [42000.0, 3.0], [42100.0, 1.0], [42200.0, 3.0], [42300.0, 2.0], [42400.0, 2.0], [41500.0, 3.0], [41700.0, 3.0], [41800.0, 3.0], [41900.0, 1.0], [43200.0, 1.0], [43100.0, 2.0], [43300.0, 3.0], [43400.0, 2.0], [43500.0, 1.0], [44600.0, 1.0], [44100.0, 2.0], [44200.0, 1.0], [44300.0, 4.0], [44400.0, 2.0], [44500.0, 2.0], [43600.0, 5.0], [43700.0, 2.0], [43800.0, 2.0], [44000.0, 3.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 50.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 650.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 650.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 50.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 33.534351145038165, "minX": 1.6804284E12, "maxY": 383.9062253743106, "series": [{"data": [[1.68042846E12, 33.534351145038165], [1.6804284E12, 383.9062253743106]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042846E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2961.0, "minX": 1.0, "maxY": 44658.0, "series": [{"data": [[2.0, 44553.0], [3.0, 44576.0], [4.0, 44452.0], [5.0, 44407.0], [6.0, 44356.0], [7.0, 44389.0], [8.0, 44342.0], [9.0, 44345.0], [10.0, 44244.0], [11.0, 44122.0], [12.0, 44159.0], [13.0, 44026.0], [14.0, 44029.0], [15.0, 44047.0], [16.0, 43878.0], [17.0, 43843.0], [19.0, 43790.0], [20.0, 43691.0], [21.0, 43668.0], [22.0, 43680.0], [23.0, 43623.0], [24.0, 43600.0], [25.0, 43520.0], [26.0, 43422.0], [27.0, 43444.0], [28.0, 43387.0], [29.0, 43373.0], [30.0, 43312.0], [31.0, 43289.0], [33.0, 43135.0], [32.0, 43182.0], [35.0, 43060.0], [34.0, 43048.0], [37.0, 42907.0], [36.0, 42956.0], [39.0, 42904.0], [38.0, 42863.0], [41.0, 42764.0], [40.0, 42768.0], [43.0, 42623.0], [42.0, 42769.0], [45.0, 42610.0], [44.0, 42573.0], [47.0, 42429.0], [46.0, 42606.0], [49.0, 42345.0], [48.0, 42434.0], [51.0, 42250.0], [50.0, 42341.0], [53.0, 42228.0], [52.0, 42231.0], [55.0, 42055.0], [54.0, 42172.0], [57.0, 42026.0], [56.0, 42068.0], [59.0, 41918.0], [58.0, 41891.0], [61.0, 41823.0], [60.0, 41866.0], [63.0, 41742.0], [62.0, 41771.0], [67.0, 41522.0], [66.0, 41539.0], [65.0, 41582.0], [64.0, 41730.0], [71.0, 41262.0], [70.0, 41365.0], [69.0, 41409.0], [68.0, 41442.0], [75.0, 41197.0], [74.0, 41186.0], [73.0, 41223.0], [72.0, 41283.0], [79.0, 41122.0], [78.0, 41064.0], [77.0, 41041.0], [76.0, 41122.0], [83.0, 41081.0], [82.0, 41071.0], [80.0, 41090.0], [86.0, 41079.0], [84.0, 41027.0], [91.0, 41013.0], [90.0, 41093.0], [89.0, 41005.0], [88.0, 41058.0], [94.0, 41002.0], [93.0, 41035.0], [99.0, 41047.5], [97.0, 41029.333333333336], [107.0, 41030.5], [105.0, 41060.0], [111.0, 41027.333333333336], [110.0, 41000.0], [108.0, 40998.5], [115.0, 40980.0], [114.0, 41048.0], [112.0, 41077.0], [119.0, 41029.0], [118.0, 40973.0], [117.0, 41044.0], [116.0, 41047.0], [123.0, 40997.0], [122.0, 40972.0], [121.0, 41056.0], [120.0, 41010.0], [127.0, 41035.5], [125.0, 41045.0], [124.0, 41027.0], [135.0, 40986.0], [134.0, 40935.0], [133.0, 41015.0], [132.0, 40940.0], [131.0, 41025.0], [130.0, 41021.0], [129.0, 41023.0], [128.0, 40977.0], [143.0, 40990.0], [142.0, 40957.0], [141.0, 41012.0], [140.0, 40953.333333333336], [137.0, 40985.0], [136.0, 41023.0], [151.0, 40969.0], [150.0, 40962.0], [149.0, 40968.0], [148.0, 40967.0], [147.0, 40994.5], [145.0, 40929.0], [144.0, 41006.0], [159.0, 40890.0], [158.0, 40978.0], [157.0, 40896.0], [156.0, 40966.0], [155.0, 40953.0], [154.0, 40900.0], [153.0, 40968.0], [152.0, 40892.0], [167.0, 40901.0], [166.0, 40931.0], [165.0, 40934.0], [164.0, 40872.0], [163.0, 40954.0], [162.0, 40957.0], [161.0, 40883.0], [160.0, 40952.0], [174.0, 40810.0], [173.0, 40890.0], [172.0, 40855.0], [171.0, 40861.0], [170.0, 40931.0], [169.0, 40934.0], [168.0, 40864.0], [183.0, 40874.0], [182.0, 40806.5], [180.0, 40812.0], [179.0, 40859.333333333336], [176.0, 40847.5], [191.0, 40883.0], [190.0, 40802.5], [188.0, 40833.0], [187.0, 40861.0], [186.0, 40861.0], [184.0, 40872.0], [199.0, 40856.0], [198.0, 40850.0], [197.0, 40807.0], [195.0, 40870.0], [194.0, 40797.0], [193.0, 40846.0], [192.0, 40791.0], [207.0, 40835.666666666664], [204.0, 40844.0], [203.0, 40845.5], [201.0, 40787.0], [215.0, 40772.0], [214.0, 40836.0], [213.0, 40857.0], [212.0, 40839.0], [211.0, 40847.0], [210.0, 40781.0], [209.0, 40867.0], [208.0, 40786.0], [223.0, 40772.0], [222.0, 40774.0], [221.0, 40772.0], [220.0, 40839.0], [219.0, 40769.0], [218.0, 40804.0], [217.0, 40780.0], [216.0, 40841.0], [230.0, 40759.0], [229.0, 40834.0], [228.0, 40852.0], [227.0, 40762.0], [226.0, 40762.0], [225.0, 40838.0], [224.0, 40844.0], [239.0, 40752.0], [238.0, 40802.0], [236.0, 40797.2], [233.0, 40847.0], [247.0, 40797.0], [246.0, 40748.0], [245.0, 40749.0], [244.0, 40786.0], [243.0, 40828.5], [242.0, 40759.0], [240.0, 40845.0], [255.0, 40805.5], [254.0, 40805.0], [252.0, 40766.0], [251.0, 40824.0], [250.0, 40767.0], [249.0, 40832.0], [248.0, 40779.0], [270.0, 40795.0], [271.0, 40796.0], [269.0, 40746.5], [259.0, 40760.0], [258.0, 40774.0], [256.0, 40765.0], [267.0, 40783.0], [266.0, 40755.0], [265.0, 40814.0], [264.0, 40719.0], [263.0, 40725.0], [262.0, 40758.0], [261.0, 40762.0], [260.0, 40799.0], [287.0, 40752.0], [286.0, 40789.0], [285.0, 40788.0], [284.0, 40760.5], [282.0, 40753.375], [275.0, 40777.0], [274.0, 40782.0], [272.0, 40759.0], [302.0, 40737.0], [303.0, 40746.0], [301.0, 40716.0], [300.0, 40716.0], [298.0, 40709.666666666664], [296.0, 40758.0], [292.0, 40775.0], [290.0, 40725.5], [288.0, 40729.0], [318.0, 40757.0], [317.0, 40702.333333333336], [314.0, 40676.0], [313.0, 40737.0], [312.0, 40760.0], [311.0, 40762.0], [310.0, 40733.0], [307.0, 40699.0], [305.0, 40722.5], [333.0, 40709.666666666664], [330.0, 40739.0], [329.0, 40723.0], [328.0, 40686.0], [327.0, 40659.0], [320.0, 40713.0], [326.0, 40721.0], [325.0, 40657.0], [324.0, 40721.0], [323.0, 40698.0], [322.0, 40694.0], [350.0, 40639.0], [348.0, 40719.0], [339.0, 40687.66666666667], [347.0, 40678.0], [346.0, 40673.0], [345.0, 40674.0], [344.0, 40645.0], [343.0, 40717.0], [342.0, 40710.0], [340.0, 40652.0], [366.0, 40644.0], [367.0, 40681.0], [364.0, 40665.666666666664], [362.0, 40680.666666666664], [361.0, 40683.0], [357.0, 40709.666666666664], [354.0, 40687.0], [353.0, 40697.0], [352.0, 40653.5], [381.0, 40653.833333333336], [375.0, 40603.0], [374.0, 40644.666666666664], [371.0, 40704.5], [369.0, 40648.0], [368.0, 40699.0], [398.0, 40644.5], [399.0, 40573.0], [396.0, 40577.0], [387.0, 40588.0], [386.0, 40663.0], [385.0, 40627.0], [384.0, 40641.0], [395.0, 40673.0], [394.0, 40615.0], [393.0, 40646.0], [392.0, 40620.0], [391.0, 40662.0], [390.0, 40597.0], [388.0, 40591.0], [415.0, 40620.0], [413.0, 40607.0], [411.0, 40601.0], [410.0, 40600.0], [409.0, 40567.0], [408.0, 40643.0], [407.0, 40602.857142857145], [400.0, 40653.0], [419.0, 40639.0], [430.0, 40613.5], [429.0, 40611.0], [427.0, 40573.0], [426.0, 40612.0], [425.0, 40642.0], [423.0, 40646.0], [422.0, 40580.0], [420.0, 40585.0], [418.0, 40653.0], [417.0, 40566.0], [416.0, 40612.0], [445.0, 40609.0], [446.0, 40588.0], [444.0, 40532.0], [435.0, 40535.0], [434.0, 40536.0], [433.0, 40580.666666666664], [443.0, 40603.0], [442.0, 40592.0], [441.0, 40584.0], [440.0, 40602.0], [439.0, 40610.0], [438.0, 40530.0], [437.0, 40579.0], [462.0, 40549.333333333336], [453.0, 40603.0], [452.0, 40515.0], [451.0, 40593.0], [450.0, 40559.75], [478.0, 40547.333333333336], [475.0, 40541.71428571428], [468.0, 40569.0], [467.0, 40551.25], [464.0, 40561.0], [494.0, 40545.0], [495.0, 40541.0], [493.0, 40520.0], [492.0, 40469.0], [491.0, 40542.0], [490.0, 40502.0], [489.0, 40469.0], [488.0, 40468.0], [487.0, 40465.0], [481.0, 40535.0], [480.0, 40532.5], [483.0, 40530.0], [482.0, 40475.0], [486.0, 40538.0], [485.0, 40555.0], [484.0, 40555.0], [509.0, 40523.0], [510.0, 40515.0], [508.0, 40433.0], [496.0, 40491.0], [507.0, 40472.0], [506.0, 40482.0], [504.0, 40518.0], [503.0, 40494.0], [502.0, 40526.0], [501.0, 40449.0], [500.0, 40495.0], [536.0, 40472.0], [541.0, 40415.0], [543.0, 40464.0], [530.0, 40456.0], [528.0, 40492.0], [540.0, 40469.0], [539.0, 40429.5], [537.0, 40467.0], [527.0, 40400.0], [513.0, 40494.0], [512.0, 40444.0], [515.0, 40419.0], [514.0, 40491.0], [517.0, 40488.0], [516.0, 40502.0], [519.0, 40445.0], [518.0, 40484.0], [526.0, 40403.0], [525.0, 40464.0], [524.0, 40464.0], [523.0, 40487.0], [522.0, 40404.0], [521.0, 40477.0], [520.0, 40503.0], [535.0, 40384.0], [534.0, 40388.0], [533.0, 40385.0], [532.0, 40464.0], [573.0, 40299.0], [563.0, 40313.0], [575.0, 40309.5], [560.0, 40407.0], [562.0, 40331.0], [561.0, 40364.0], [572.0, 40324.0], [571.0, 40367.5], [569.0, 40351.5], [551.0, 40360.0], [550.0, 40461.0], [549.0, 40402.0], [548.0, 40393.666666666664], [545.0, 40423.666666666664], [559.0, 40336.0], [558.0, 40418.0], [557.0, 40449.0], [556.0, 40386.0], [552.0, 40364.0], [567.0, 40392.0], [566.0, 40345.5], [564.0, 40395.0], [604.0, 40005.0], [607.0, 39888.0], [593.0, 40293.0], [592.0, 40314.0], [595.0, 40326.0], [594.0, 40293.0], [597.0, 40176.0], [596.0, 40167.0], [606.0, 39995.0], [605.0, 39915.0], [603.0, 40051.0], [602.0, 40087.0], [601.0, 40160.0], [600.0, 40109.0], [589.0, 40335.0], [576.0, 40296.0], [578.0, 40350.0], [577.0, 40358.0], [581.0, 40290.0], [580.0, 40365.0], [583.0, 40345.0], [582.0, 40358.0], [588.0, 40271.0], [587.0, 40350.5], [585.0, 40321.5], [599.0, 40117.0], [598.0, 40180.0], [633.0, 39640.0], [638.0, 39548.5], [639.0, 39559.0], [624.0, 39643.0], [627.0, 39721.0], [626.0, 39671.5], [629.0, 39716.0], [628.0, 39663.0], [636.0, 39586.0], [635.0, 39568.0], [634.0, 39591.0], [632.0, 39629.0], [615.0, 39759.0], [614.0, 39793.0], [613.0, 39865.0], [612.0, 39818.0], [611.0, 39880.0], [610.0, 39867.0], [609.0, 39935.0], [608.0, 39953.0], [623.0, 39755.0], [622.0, 39726.0], [621.0, 39705.0], [620.0, 39755.0], [619.0, 39790.5], [617.0, 39718.0], [616.0, 39827.0], [631.0, 39692.0], [630.0, 39712.0], [665.0, 3534.0], [670.0, 3521.0], [671.0, 3462.0], [657.0, 3485.0], [656.0, 3489.0], [659.0, 3573.0], [658.0, 3486.0], [661.0, 3554.0], [660.0, 3571.0], [669.0, 3531.0], [668.0, 3524.0], [667.0, 3506.0], [664.0, 3473.0], [647.0, 39457.0], [646.0, 39535.0], [644.0, 39466.0], [643.0, 39530.0], [642.0, 39504.0], [641.0, 39562.0], [640.0, 39495.0], [655.0, 3499.0], [653.0, 3492.0], [652.0, 3555.0], [651.0, 3585.0], [650.0, 21101.0], [649.0, 37534.0], [648.0, 39412.0], [663.0, 3536.0], [662.0, 3566.0], [677.0, 3440.0], [700.0, 2961.0], [699.0, 3447.0833333333335], [695.0, 3498.0], [686.0, 3492.0], [683.0, 3496.0], [682.0, 3510.0], [680.0, 3469.0], [676.0, 3512.0], [675.0, 3477.3333333333335], [672.0, 3459.0], [1.0, 44658.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[351.12142857142857, 38168.96428571428]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 44553.0], [3.0, 44576.0], [4.0, 44452.0], [5.0, 44407.0], [6.0, 44356.0], [7.0, 44389.0], [8.0, 44342.0], [9.0, 44345.0], [10.0, 44244.0], [11.0, 44122.0], [12.0, 44159.0], [13.0, 44026.0], [14.0, 44029.0], [15.0, 44047.0], [16.0, 43878.0], [17.0, 43843.0], [19.0, 43790.0], [20.0, 43691.0], [21.0, 43668.0], [22.0, 43680.0], [23.0, 43623.0], [24.0, 43600.0], [25.0, 43520.0], [26.0, 43422.0], [27.0, 43444.0], [28.0, 43387.0], [29.0, 43373.0], [30.0, 43312.0], [31.0, 43289.0], [33.0, 43135.0], [32.0, 43182.0], [35.0, 43060.0], [34.0, 43048.0], [37.0, 42907.0], [36.0, 42956.0], [39.0, 42904.0], [38.0, 42863.0], [41.0, 42764.0], [40.0, 42768.0], [43.0, 42623.0], [42.0, 42769.0], [45.0, 42610.0], [44.0, 42573.0], [47.0, 42429.0], [46.0, 42606.0], [49.0, 42345.0], [48.0, 42434.0], [51.0, 42250.0], [50.0, 42341.0], [53.0, 42228.0], [52.0, 42231.0], [55.0, 42055.0], [54.0, 42172.0], [57.0, 42026.0], [56.0, 42068.0], [59.0, 41918.0], [58.0, 41891.0], [61.0, 41823.0], [60.0, 41866.0], [63.0, 41742.0], [62.0, 41771.0], [67.0, 41522.0], [66.0, 41539.0], [65.0, 41582.0], [64.0, 41730.0], [71.0, 41262.0], [70.0, 41365.0], [69.0, 41409.0], [68.0, 41442.0], [75.0, 41197.0], [74.0, 41186.0], [73.0, 41223.0], [72.0, 41283.0], [79.0, 41122.0], [78.0, 41064.0], [77.0, 41041.0], [76.0, 41122.0], [83.0, 41081.0], [82.0, 41071.0], [80.0, 41090.0], [86.0, 41079.0], [84.0, 41027.0], [91.0, 41013.0], [90.0, 41093.0], [89.0, 41005.0], [88.0, 41058.0], [94.0, 41002.0], [93.0, 41035.0], [99.0, 41047.5], [97.0, 41029.333333333336], [107.0, 41030.5], [105.0, 41060.0], [111.0, 41027.333333333336], [110.0, 41000.0], [108.0, 40998.5], [115.0, 40980.0], [114.0, 41048.0], [112.0, 41077.0], [119.0, 41029.0], [118.0, 40973.0], [117.0, 41044.0], [116.0, 41047.0], [123.0, 40997.0], [122.0, 40972.0], [121.0, 41056.0], [120.0, 41010.0], [127.0, 41035.5], [125.0, 41045.0], [124.0, 41027.0], [135.0, 40986.0], [134.0, 40935.0], [133.0, 41015.0], [132.0, 40940.0], [131.0, 41025.0], [130.0, 41021.0], [129.0, 41023.0], [128.0, 40977.0], [143.0, 40990.0], [142.0, 40957.0], [141.0, 41012.0], [140.0, 40953.333333333336], [137.0, 40985.0], [136.0, 41023.0], [151.0, 40969.0], [150.0, 40962.0], [149.0, 40968.0], [148.0, 40967.0], [147.0, 40994.5], [145.0, 40929.0], [144.0, 41006.0], [159.0, 40890.0], [158.0, 40978.0], [157.0, 40896.0], [156.0, 40966.0], [155.0, 40953.0], [154.0, 40900.0], [153.0, 40968.0], [152.0, 40892.0], [167.0, 40901.0], [166.0, 40931.0], [165.0, 40934.0], [164.0, 40872.0], [163.0, 40954.0], [162.0, 40957.0], [161.0, 40883.0], [160.0, 40952.0], [174.0, 40810.0], [173.0, 40890.0], [172.0, 40855.0], [171.0, 40861.0], [170.0, 40931.0], [169.0, 40934.0], [168.0, 40864.0], [183.0, 40874.0], [182.0, 40806.5], [180.0, 40812.0], [179.0, 40859.333333333336], [176.0, 40847.5], [191.0, 40883.0], [190.0, 40802.5], [188.0, 40833.0], [187.0, 40861.0], [186.0, 40861.0], [184.0, 40872.0], [199.0, 40856.0], [198.0, 40850.0], [197.0, 40807.0], [195.0, 40870.0], [194.0, 40797.0], [193.0, 40846.0], [192.0, 40791.0], [207.0, 40835.666666666664], [204.0, 40844.0], [203.0, 40845.5], [201.0, 40787.0], [215.0, 40772.0], [214.0, 40836.0], [213.0, 40857.0], [212.0, 40839.0], [211.0, 40847.0], [210.0, 40781.0], [209.0, 40867.0], [208.0, 40786.0], [223.0, 40772.0], [222.0, 40774.0], [221.0, 40772.0], [220.0, 40839.0], [219.0, 40769.0], [218.0, 40804.0], [217.0, 40780.0], [216.0, 40841.0], [230.0, 40759.0], [229.0, 40834.0], [228.0, 40852.0], [227.0, 40762.0], [226.0, 40762.0], [225.0, 40838.0], [224.0, 40844.0], [239.0, 40752.0], [238.0, 40802.0], [236.0, 40797.2], [233.0, 40847.0], [247.0, 40797.0], [246.0, 40748.0], [245.0, 40749.0], [244.0, 40786.0], [243.0, 40828.5], [242.0, 40759.0], [240.0, 40845.0], [255.0, 40805.5], [254.0, 40805.0], [252.0, 40766.0], [251.0, 40824.0], [250.0, 40767.0], [249.0, 40832.0], [248.0, 40779.0], [270.0, 40795.0], [271.0, 40796.0], [269.0, 40746.5], [259.0, 40760.0], [258.0, 40774.0], [256.0, 40765.0], [267.0, 40783.0], [266.0, 40755.0], [265.0, 40814.0], [264.0, 40719.0], [263.0, 40725.0], [262.0, 40758.0], [261.0, 40762.0], [260.0, 40799.0], [287.0, 40752.0], [286.0, 40789.0], [285.0, 40788.0], [284.0, 40760.5], [282.0, 40753.37500000001], [275.0, 40777.0], [274.0, 40782.0], [272.0, 40759.0], [302.0, 40737.0], [303.0, 40746.0], [301.0, 40716.0], [300.0, 40716.0], [298.0, 40709.666666666664], [296.0, 40758.0], [292.0, 40775.0], [290.0, 40725.5], [288.0, 40729.0], [318.0, 40757.0], [317.0, 40702.333333333336], [314.0, 40676.0], [313.0, 40737.0], [312.0, 40760.0], [311.0, 40762.0], [310.0, 40733.0], [307.0, 40699.0], [305.0, 40722.5], [333.0, 40709.666666666664], [330.0, 40739.0], [329.0, 40723.0], [328.0, 40686.0], [327.0, 40659.0], [320.0, 40713.0], [326.0, 40721.0], [325.0, 40657.0], [324.0, 40721.0], [323.0, 40698.0], [322.0, 40694.0], [350.0, 40639.0], [348.0, 40719.0], [339.0, 40687.66666666667], [347.0, 40678.0], [346.0, 40673.0], [345.0, 40674.0], [344.0, 40645.0], [343.0, 40717.0], [342.0, 40710.0], [340.0, 40652.0], [366.0, 40644.0], [367.0, 40681.0], [364.0, 40665.666666666664], [362.0, 40680.666666666664], [361.0, 40683.0], [357.0, 40709.666666666664], [354.0, 40687.0], [353.0, 40697.0], [352.0, 40653.5], [381.0, 40653.833333333336], [375.0, 40603.0], [374.0, 40644.666666666664], [371.0, 40704.5], [369.0, 40648.0], [368.0, 40699.0], [398.0, 40644.5], [399.0, 40573.0], [396.0, 40577.0], [387.0, 40588.0], [386.0, 40663.0], [385.0, 40627.0], [384.0, 40641.0], [395.0, 40673.0], [394.0, 40615.0], [393.0, 40646.0], [392.0, 40620.0], [391.0, 40662.0], [390.0, 40597.0], [388.0, 40591.0], [415.0, 40620.0], [413.0, 40607.0], [411.0, 40601.0], [410.0, 40600.0], [409.0, 40567.0], [408.0, 40643.0], [407.0, 40602.857142857145], [400.0, 40653.0], [419.0, 40639.0], [430.0, 40613.5], [429.0, 40611.0], [427.0, 40573.0], [426.0, 40612.0], [425.0, 40642.0], [423.0, 40646.0], [422.0, 40580.0], [420.0, 40585.0], [418.0, 40653.0], [417.0, 40566.0], [416.0, 40612.0], [445.0, 40609.0], [446.0, 40588.0], [444.0, 40532.0], [435.0, 40535.0], [434.0, 40536.0], [433.0, 40580.666666666664], [443.0, 40603.0], [442.0, 40592.0], [441.0, 40584.0], [440.0, 40602.0], [439.0, 40610.0], [438.0, 40530.0], [437.0, 40579.0], [462.0, 40549.333333333336], [453.0, 40603.0], [452.0, 40515.0], [451.0, 40593.0], [450.0, 40559.75], [478.0, 40547.333333333336], [475.0, 40541.71428571428], [468.0, 40569.0], [467.0, 40551.25], [464.0, 40561.0], [494.0, 40545.0], [495.0, 40541.0], [493.0, 40520.0], [492.0, 40469.0], [491.0, 40542.0], [490.0, 40502.0], [489.0, 40469.0], [488.0, 40468.0], [487.0, 40465.0], [481.0, 40535.0], [480.0, 40532.5], [483.0, 40530.0], [482.0, 40475.0], [486.0, 40538.0], [485.0, 40555.0], [484.0, 40555.0], [509.0, 40523.0], [510.0, 40515.0], [508.0, 40433.0], [496.0, 40491.0], [507.0, 40472.0], [506.0, 40482.0], [504.0, 40518.0], [503.0, 40494.0], [502.0, 40526.0], [501.0, 40449.0], [500.0, 40495.0], [536.0, 40472.0], [541.0, 40415.0], [543.0, 40464.0], [530.0, 40456.0], [528.0, 40492.0], [540.0, 40469.0], [539.0, 40429.5], [537.0, 40467.0], [527.0, 40400.0], [513.0, 40494.0], [512.0, 40444.0], [515.0, 40419.0], [514.0, 40491.0], [517.0, 40488.0], [516.0, 40502.0], [519.0, 40445.0], [518.0, 40484.0], [526.0, 40403.0], [525.0, 40464.0], [524.0, 40464.0], [523.0, 40487.0], [522.0, 40404.0], [521.0, 40477.0], [520.0, 40503.0], [535.0, 40384.0], [534.0, 40388.0], [533.0, 40385.0], [532.0, 40464.0], [573.0, 40299.0], [563.0, 40313.0], [575.0, 40309.5], [560.0, 40407.0], [562.0, 40331.0], [561.0, 40364.0], [572.0, 40324.0], [571.0, 40367.5], [569.0, 40351.5], [551.0, 40360.0], [550.0, 40461.0], [549.0, 40402.0], [548.0, 40393.666666666664], [545.0, 40423.666666666664], [559.0, 40336.0], [558.0, 40418.0], [557.0, 40449.0], [556.0, 40386.0], [552.0, 40364.0], [567.0, 40392.0], [566.0, 40345.5], [564.0, 40395.0], [604.0, 40005.0], [607.0, 39888.0], [593.0, 40293.0], [592.0, 40314.0], [595.0, 40326.0], [594.0, 40293.0], [597.0, 40176.0], [596.0, 40167.0], [606.0, 39995.0], [605.0, 39915.0], [603.0, 40051.0], [602.0, 40087.0], [601.0, 40160.0], [600.0, 40109.0], [589.0, 40335.0], [576.0, 40296.0], [578.0, 40350.0], [577.0, 40358.0], [581.0, 40290.0], [580.0, 40365.0], [583.0, 40345.0], [582.0, 40358.0], [588.0, 40271.0], [587.0, 40350.5], [585.0, 40321.5], [599.0, 40117.0], [598.0, 40180.0], [633.0, 39640.0], [638.0, 39548.5], [639.0, 39559.0], [624.0, 39643.0], [627.0, 39721.0], [626.0, 39671.5], [629.0, 39716.0], [628.0, 39663.0], [636.0, 39586.0], [635.0, 39568.0], [634.0, 39591.0], [632.0, 39629.0], [615.0, 39759.0], [614.0, 39793.0], [613.0, 39865.0], [612.0, 39818.0], [611.0, 39880.0], [610.0, 39867.0], [609.0, 39935.0], [608.0, 39953.0], [623.0, 39755.0], [622.0, 39726.0], [621.0, 39705.0], [620.0, 39755.0], [619.0, 39790.5], [617.0, 39718.0], [616.0, 39827.0], [631.0, 39692.0], [630.0, 39712.0], [665.0, 3534.0], [670.0, 3521.0], [671.0, 3462.0], [657.0, 3485.0], [656.0, 3489.0], [659.0, 3573.0], [658.0, 3486.0], [661.0, 3554.0], [660.0, 3571.0], [669.0, 3531.0], [668.0, 3524.0], [667.0, 3506.0], [664.0, 3473.0], [647.0, 39457.0], [646.0, 39535.0], [644.0, 39466.0], [643.0, 39530.0], [642.0, 39504.0], [641.0, 39562.0], [640.0, 39495.0], [655.0, 3499.0], [653.0, 3492.0], [652.0, 3555.0], [651.0, 3585.0], [650.0, 21101.0], [649.0, 37534.0], [648.0, 39412.0], [663.0, 3536.0], [662.0, 3566.0], [677.0, 3440.0], [700.0, 2961.0], [699.0, 3447.083333333333], [695.0, 3498.0], [686.0, 3492.0], [683.0, 3496.0], [682.0, 3510.0], [680.0, 3469.0], [676.0, 3512.0], [675.0, 3477.3333333333335], [672.0, 3459.0], [1.0, 44658.0]], "isOverall": false, "label": "Test Fragment", "isController": true}, {"data": [[351.12142857142857, 38168.96428571428]], "isOverall": false, "label": "Test Fragment-Aggregated", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 700.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 600.0333333333333, "minX": 1.6804284E12, "maxY": 8709.016666666666, "series": [{"data": [[1.68042846E12, 963.3833333333333], [1.6804284E12, 8709.016666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68042846E12, 600.0333333333333], [1.6804284E12, 5270.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042846E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 37624.88235294117, "minX": 1.6804284E12, "maxY": 43245.88333333333, "series": [{"data": [[1.68042846E12, 42989.07042253521], [1.6804284E12, 37624.88235294117]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042846E12, 43245.88333333333], [1.6804284E12, 37693.00312499999]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042846E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 37591.494435612076, "minX": 1.6804284E12, "maxY": 43245.86666666667, "series": [{"data": [[1.68042846E12, 42989.05633802816], [1.6804284E12, 37591.494435612076]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042846E12, 43245.86666666667], [1.6804284E12, 37660.1890625]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042846E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2263.2384737678867, "minX": 1.6804284E12, "maxY": 3138.899999999999, "series": [{"data": [[1.68042846E12, 3091.098591549296], [1.6804284E12, 2263.2384737678867]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042846E12, 3138.899999999999], [1.6804284E12, 2272.9859375000024]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042846E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 21101.0, "minX": 1.6804284E12, "maxY": 44658.0, "series": [{"data": [[1.68042846E12, 44658.0], [1.6804284E12, 41283.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68042846E12, 44353.8], [1.6804284E12, 40998.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68042846E12, 44658.0], [1.6804284E12, 41122.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68042846E12, 44492.4], [1.6804284E12, 41040.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68042846E12, 41262.0], [1.6804284E12, 21101.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68042846E12, 42956.0], [1.6804284E12, 40668.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042846E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2961.0, "minX": 1.0, "maxY": 44407.0, "series": [{"data": [[1.0, 29317.5], [522.0, 40701.5], [9.0, 44407.0], [20.0, 43738.0], [21.0, 42295.5], [55.0, 39726.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 2961.0], [49.0, 3492.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 522.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2961.0, "minX": 1.0, "maxY": 44407.0, "series": [{"data": [[1.0, 29317.5], [522.0, 40701.5], [9.0, 44407.0], [20.0, 43738.0], [21.0, 42295.5], [55.0, 39726.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 2961.0], [49.0, 3485.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 522.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 11.666666666666666, "minX": 1.6804284E12, "maxY": 11.666666666666666, "series": [{"data": [[1.6804284E12, 11.666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6804284E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6804284E12, "maxY": 9.65, "series": [{"data": [[1.6804284E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.68042846E12, 1.1833333333333333], [1.6804284E12, 9.65]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6804284E12, 0.016666666666666666]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.6804284E12, 0.7166666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.6804284E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042846E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.6804284E12, "maxY": 9.833333333333334, "series": [{"data": [[1.6804284E12, 0.8333333333333334]], "isOverall": false, "label": "Test Fragment-failure", "isController": true}, {"data": [[1.68042846E12, 1.0], [1.6804284E12, 9.833333333333334]], "isOverall": false, "label": "Test Fragment-success", "isController": true}, {"data": [[1.6804284E12, 0.8333333333333334]], "isOverall": false, "label": "Login-failure", "isController": false}, {"data": [[1.68042846E12, 1.1833333333333333], [1.6804284E12, 9.65]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042846E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.6804284E12, "maxY": 19.483333333333334, "series": [{"data": [[1.68042846E12, 2.183333333333333], [1.6804284E12, 19.483333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6804284E12, 1.6666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042846E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

