/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1994.0, "minX": 0.0, "maxY": 29876.0, "series": [{"data": [[0.0, 1994.0], [0.1, 1996.0], [0.2, 1997.0], [0.3, 1997.0], [0.4, 1998.0], [0.5, 1999.0], [0.6, 2000.0], [0.7, 2000.0], [0.8, 2058.0], [0.9, 2059.0], [1.0, 2060.0], [1.1, 2063.0], [1.2, 2063.0], [1.3, 2064.0], [1.4, 2064.0], [1.5, 2088.0], [1.6, 2089.0], [1.7, 2089.0], [1.8, 2090.0], [1.9, 2093.0], [2.0, 2094.0], [2.1, 2106.0], [2.2, 2107.0], [2.3, 2109.0], [2.4, 2114.0], [2.5, 2119.0], [2.6, 2122.0], [2.7, 2139.0], [2.8, 2140.0], [2.9, 2141.0], [3.0, 2150.0], [3.1, 2199.0], [3.2, 2208.0], [3.3, 2209.0], [3.4, 2214.0], [3.5, 2237.0], [3.6, 2245.0], [3.7, 2247.0], [3.8, 2259.0], [3.9, 2260.0], [4.0, 2442.0], [4.1, 2442.0], [4.2, 2445.0], [4.3, 2452.0], [4.4, 2453.0], [4.5, 2457.0], [4.6, 2463.0], [4.7, 2517.0], [4.8, 2518.0], [4.9, 2523.0], [5.0, 2524.0], [5.1, 2530.0], [5.2, 2542.0], [5.3, 2543.0], [5.4, 2553.0], [5.5, 2557.0], [5.6, 2558.0], [5.7, 2568.0], [5.8, 2572.0], [5.9, 2574.0], [6.0, 2577.0], [6.1, 2579.0], [6.2, 2583.0], [6.3, 2602.0], [6.4, 2602.0], [6.5, 2604.0], [6.6, 2607.0], [6.7, 2616.0], [6.8, 2621.0], [6.9, 2623.0], [7.0, 2623.0], [7.1, 2623.0], [7.2, 2624.0], [7.3, 2624.0], [7.4, 2625.0], [7.5, 2629.0], [7.6, 2634.0], [7.7, 2634.0], [7.8, 2635.0], [7.9, 2635.0], [8.0, 2639.0], [8.1, 2640.0], [8.2, 2640.0], [8.3, 2642.0], [8.4, 2643.0], [8.5, 2645.0], [8.6, 2651.0], [8.7, 2651.0], [8.8, 2660.0], [8.9, 2663.0], [9.0, 2671.0], [9.1, 2681.0], [9.2, 2683.0], [9.3, 2689.0], [9.4, 2695.0], [9.5, 2701.0], [9.6, 2719.0], [9.7, 2722.0], [9.8, 2722.0], [9.9, 2743.0], [10.0, 2756.0], [10.1, 2759.0], [10.2, 2761.0], [10.3, 2763.0], [10.4, 2764.0], [10.5, 2770.0], [10.6, 2772.0], [10.7, 2774.0], [10.8, 2782.0], [10.9, 2783.0], [11.0, 2802.0], [11.1, 2806.0], [11.2, 2808.0], [11.3, 2808.0], [11.4, 2809.0], [11.5, 2809.0], [11.6, 2810.0], [11.7, 2815.0], [11.8, 2818.0], [11.9, 2820.0], [12.0, 2824.0], [12.1, 2825.0], [12.2, 2827.0], [12.3, 2831.0], [12.4, 2832.0], [12.5, 2833.0], [12.6, 2837.0], [12.7, 2840.0], [12.8, 2843.0], [12.9, 2851.0], [13.0, 2853.0], [13.1, 2853.0], [13.2, 2861.0], [13.3, 2862.0], [13.4, 2863.0], [13.5, 2864.0], [13.6, 2872.0], [13.7, 2874.0], [13.8, 2879.0], [13.9, 2882.0], [14.0, 2884.0], [14.1, 2894.0], [14.2, 2896.0], [14.3, 2898.0], [14.4, 2900.0], [14.5, 2904.0], [14.6, 2904.0], [14.7, 2905.0], [14.8, 2919.0], [14.9, 2919.0], [15.0, 2919.0], [15.1, 2920.0], [15.2, 2920.0], [15.3, 2920.0], [15.4, 2921.0], [15.5, 2921.0], [15.6, 2921.0], [15.7, 2922.0], [15.8, 2922.0], [15.9, 2923.0], [16.0, 2923.0], [16.1, 2923.0], [16.2, 2923.0], [16.3, 2923.0], [16.4, 2923.0], [16.5, 2923.0], [16.6, 2924.0], [16.7, 2925.0], [16.8, 2925.0], [16.9, 2925.0], [17.0, 2925.0], [17.1, 2928.0], [17.2, 2930.0], [17.3, 2930.0], [17.4, 2930.0], [17.5, 2931.0], [17.6, 2932.0], [17.7, 2937.0], [17.8, 2941.0], [17.9, 2943.0], [18.0, 2947.0], [18.1, 2949.0], [18.2, 2952.0], [18.3, 2954.0], [18.4, 2954.0], [18.5, 2955.0], [18.6, 2956.0], [18.7, 2956.0], [18.8, 2959.0], [18.9, 2969.0], [19.0, 2977.0], [19.1, 2992.0], [19.2, 2993.0], [19.3, 2994.0], [19.4, 2995.0], [19.5, 2997.0], [19.6, 2999.0], [19.7, 3001.0], [19.8, 3009.0], [19.9, 3015.0], [20.0, 3016.0], [20.1, 3017.0], [20.2, 3017.0], [20.3, 3025.0], [20.4, 3029.0], [20.5, 3030.0], [20.6, 3031.0], [20.7, 3032.0], [20.8, 3033.0], [20.9, 3033.0], [21.0, 3033.0], [21.1, 3034.0], [21.2, 3034.0], [21.3, 3034.0], [21.4, 3034.0], [21.5, 3034.0], [21.6, 3034.0], [21.7, 3035.0], [21.8, 3035.0], [21.9, 3036.0], [22.0, 3036.0], [22.1, 3036.0], [22.2, 3038.0], [22.3, 3040.0], [22.4, 3041.0], [22.5, 3042.0], [22.6, 3043.0], [22.7, 3044.0], [22.8, 3044.0], [22.9, 3047.0], [23.0, 3048.0], [23.1, 3049.0], [23.2, 3050.0], [23.3, 3071.0], [23.4, 3071.0], [23.5, 3087.0], [23.6, 3102.0], [23.7, 3106.0], [23.8, 3126.0], [23.9, 3128.0], [24.0, 3131.0], [24.1, 3154.0], [24.2, 3157.0], [24.3, 3158.0], [24.4, 3195.0], [24.5, 3196.0], [24.6, 3197.0], [24.7, 3197.0], [24.8, 3198.0], [24.9, 3199.0], [25.0, 3199.0], [25.1, 3199.0], [25.2, 3200.0], [25.3, 3201.0], [25.4, 3202.0], [25.5, 3203.0], [25.6, 3203.0], [25.7, 3203.0], [25.8, 3214.0], [25.9, 3216.0], [26.0, 3216.0], [26.1, 3216.0], [26.2, 3218.0], [26.3, 3218.0], [26.4, 3218.0], [26.5, 3224.0], [26.6, 3226.0], [26.7, 3229.0], [26.8, 3230.0], [26.9, 3231.0], [27.0, 3257.0], [27.1, 3257.0], [27.2, 3259.0], [27.3, 3260.0], [27.4, 3260.0], [27.5, 3261.0], [27.6, 3261.0], [27.7, 3261.0], [27.8, 3262.0], [27.9, 3262.0], [28.0, 3264.0], [28.1, 3265.0], [28.2, 3265.0], [28.3, 3266.0], [28.4, 3271.0], [28.5, 3272.0], [28.6, 3273.0], [28.7, 3281.0], [28.8, 3281.0], [28.9, 3285.0], [29.0, 3285.0], [29.1, 3288.0], [29.2, 3294.0], [29.3, 3297.0], [29.4, 3297.0], [29.5, 3301.0], [29.6, 3303.0], [29.7, 3303.0], [29.8, 3303.0], [29.9, 3305.0], [30.0, 3305.0], [30.1, 3305.0], [30.2, 3306.0], [30.3, 3307.0], [30.4, 3308.0], [30.5, 3308.0], [30.6, 3308.0], [30.7, 3316.0], [30.8, 3317.0], [30.9, 3317.0], [31.0, 3318.0], [31.1, 3318.0], [31.2, 3319.0], [31.3, 3319.0], [31.4, 3319.0], [31.5, 3320.0], [31.6, 3322.0], [31.7, 3322.0], [31.8, 3323.0], [31.9, 3342.0], [32.0, 3342.0], [32.1, 3343.0], [32.2, 3344.0], [32.3, 3344.0], [32.4, 3367.0], [32.5, 3370.0], [32.6, 3378.0], [32.7, 3378.0], [32.8, 3381.0], [32.9, 3381.0], [33.0, 3381.0], [33.1, 3381.0], [33.2, 3382.0], [33.3, 3382.0], [33.4, 3382.0], [33.5, 3382.0], [33.6, 3383.0], [33.7, 3383.0], [33.8, 3384.0], [33.9, 3384.0], [34.0, 3384.0], [34.1, 3385.0], [34.2, 3385.0], [34.3, 3385.0], [34.4, 3385.0], [34.5, 3385.0], [34.6, 3385.0], [34.7, 3387.0], [34.8, 3387.0], [34.9, 3387.0], [35.0, 3388.0], [35.1, 3388.0], [35.2, 3389.0], [35.3, 3390.0], [35.4, 3390.0], [35.5, 3390.0], [35.6, 3391.0], [35.7, 3394.0], [35.8, 3394.0], [35.9, 3394.0], [36.0, 3394.0], [36.1, 3394.0], [36.2, 3395.0], [36.3, 3396.0], [36.4, 3397.0], [36.5, 3397.0], [36.6, 3398.0], [36.7, 3398.0], [36.8, 3399.0], [36.9, 3400.0], [37.0, 3401.0], [37.1, 3401.0], [37.2, 3403.0], [37.3, 3404.0], [37.4, 3408.0], [37.5, 3409.0], [37.6, 3414.0], [37.7, 3421.0], [37.8, 3424.0], [37.9, 12079.0], [38.0, 13865.0], [38.1, 17734.0], [38.2, 17891.0], [38.3, 26142.0], [38.4, 26158.0], [38.5, 26251.0], [38.6, 26309.0], [38.7, 26322.0], [38.8, 26354.0], [38.9, 26359.0], [39.0, 26377.0], [39.1, 26412.0], [39.2, 26423.0], [39.3, 26425.0], [39.4, 26438.0], [39.5, 26460.0], [39.6, 26474.0], [39.7, 26489.0], [39.8, 26499.0], [39.9, 26499.0], [40.0, 26509.0], [40.1, 26532.0], [40.2, 26535.0], [40.3, 26549.0], [40.4, 26555.0], [40.5, 26560.0], [40.6, 26561.0], [40.7, 26570.0], [40.8, 26575.0], [40.9, 26580.0], [41.0, 26589.0], [41.1, 26606.0], [41.2, 26614.0], [41.3, 26617.0], [41.4, 26623.0], [41.5, 26632.0], [41.6, 26641.0], [41.7, 26658.0], [41.8, 26676.0], [41.9, 26687.0], [42.0, 26688.0], [42.1, 26692.0], [42.2, 26728.0], [42.3, 26739.0], [42.4, 26747.0], [42.5, 26756.0], [42.6, 26760.0], [42.7, 26760.0], [42.8, 26765.0], [42.9, 26768.0], [43.0, 26817.0], [43.1, 26828.0], [43.2, 26832.0], [43.3, 26834.0], [43.4, 26835.0], [43.5, 26844.0], [43.6, 26862.0], [43.7, 26867.0], [43.8, 26873.0], [43.9, 26876.0], [44.0, 26877.0], [44.1, 26879.0], [44.2, 26892.0], [44.3, 26893.0], [44.4, 26895.0], [44.5, 26915.0], [44.6, 26916.0], [44.7, 26916.0], [44.8, 26927.0], [44.9, 26928.0], [45.0, 26935.0], [45.1, 26944.0], [45.2, 26945.0], [45.3, 26946.0], [45.4, 26951.0], [45.5, 26953.0], [45.6, 26955.0], [45.7, 26960.0], [45.8, 26960.0], [45.9, 26960.0], [46.0, 26961.0], [46.1, 26966.0], [46.2, 26968.0], [46.3, 26970.0], [46.4, 26972.0], [46.5, 26972.0], [46.6, 26973.0], [46.7, 26974.0], [46.8, 26976.0], [46.9, 26976.0], [47.0, 26976.0], [47.1, 26978.0], [47.2, 26980.0], [47.3, 26982.0], [47.4, 26985.0], [47.5, 26985.0], [47.6, 26987.0], [47.7, 26987.0], [47.8, 26988.0], [47.9, 26988.0], [48.0, 26989.0], [48.1, 26990.0], [48.2, 26991.0], [48.3, 26995.0], [48.4, 26998.0], [48.5, 27000.0], [48.6, 27001.0], [48.7, 27001.0], [48.8, 27001.0], [48.9, 27002.0], [49.0, 27003.0], [49.1, 27009.0], [49.2, 27009.0], [49.3, 27010.0], [49.4, 27011.0], [49.5, 27015.0], [49.6, 27015.0], [49.7, 27016.0], [49.8, 27017.0], [49.9, 27017.0], [50.0, 27017.0], [50.1, 27018.0], [50.2, 27022.0], [50.3, 27022.0], [50.4, 27023.0], [50.5, 27023.0], [50.6, 27026.0], [50.7, 27028.0], [50.8, 27029.0], [50.9, 27031.0], [51.0, 27031.0], [51.1, 27032.0], [51.2, 27033.0], [51.3, 27033.0], [51.4, 27034.0], [51.5, 27035.0], [51.6, 27036.0], [51.7, 27036.0], [51.8, 27037.0], [51.9, 27037.0], [52.0, 27037.0], [52.1, 27038.0], [52.2, 27039.0], [52.3, 27040.0], [52.4, 27041.0], [52.5, 27045.0], [52.6, 27045.0], [52.7, 27046.0], [52.8, 27048.0], [52.9, 27050.0], [53.0, 27051.0], [53.1, 27052.0], [53.2, 27055.0], [53.3, 27056.0], [53.4, 27058.0], [53.5, 27059.0], [53.6, 27060.0], [53.7, 27061.0], [53.8, 27061.0], [53.9, 27062.0], [54.0, 27063.0], [54.1, 27064.0], [54.2, 27065.0], [54.3, 27071.0], [54.4, 27075.0], [54.5, 27077.0], [54.6, 27078.0], [54.7, 27078.0], [54.8, 27079.0], [54.9, 27080.0], [55.0, 27082.0], [55.1, 27083.0], [55.2, 27089.0], [55.3, 27090.0], [55.4, 27091.0], [55.5, 27092.0], [55.6, 27094.0], [55.7, 27097.0], [55.8, 27098.0], [55.9, 27099.0], [56.0, 27099.0], [56.1, 27104.0], [56.2, 27104.0], [56.3, 27107.0], [56.4, 27108.0], [56.5, 27109.0], [56.6, 27110.0], [56.7, 27110.0], [56.8, 27111.0], [56.9, 27112.0], [57.0, 27115.0], [57.1, 27116.0], [57.2, 27116.0], [57.3, 27120.0], [57.4, 27120.0], [57.5, 27122.0], [57.6, 27123.0], [57.7, 27124.0], [57.8, 27124.0], [57.9, 27124.0], [58.0, 27125.0], [58.1, 27126.0], [58.2, 27128.0], [58.3, 27129.0], [58.4, 27129.0], [58.5, 27129.0], [58.6, 27133.0], [58.7, 27134.0], [58.8, 27136.0], [58.9, 27136.0], [59.0, 27137.0], [59.1, 27137.0], [59.2, 27140.0], [59.3, 27141.0], [59.4, 27143.0], [59.5, 27146.0], [59.6, 27147.0], [59.7, 27148.0], [59.8, 27149.0], [59.9, 27149.0], [60.0, 27151.0], [60.1, 27152.0], [60.2, 27153.0], [60.3, 27155.0], [60.4, 27155.0], [60.5, 27157.0], [60.6, 27157.0], [60.7, 27158.0], [60.8, 27162.0], [60.9, 27163.0], [61.0, 27164.0], [61.1, 27165.0], [61.2, 27167.0], [61.3, 27170.0], [61.4, 27172.0], [61.5, 27173.0], [61.6, 27176.0], [61.7, 27178.0], [61.8, 27178.0], [61.9, 27182.0], [62.0, 27182.0], [62.1, 27183.0], [62.2, 27183.0], [62.3, 27184.0], [62.4, 27187.0], [62.5, 27187.0], [62.6, 27187.0], [62.7, 27189.0], [62.8, 27189.0], [62.9, 27189.0], [63.0, 27193.0], [63.1, 27193.0], [63.2, 27194.0], [63.3, 27194.0], [63.4, 27194.0], [63.5, 27195.0], [63.6, 27195.0], [63.7, 27196.0], [63.8, 27197.0], [63.9, 27198.0], [64.0, 27198.0], [64.1, 27198.0], [64.2, 27199.0], [64.3, 27200.0], [64.4, 27200.0], [64.5, 27200.0], [64.6, 27200.0], [64.7, 27202.0], [64.8, 27204.0], [64.9, 27207.0], [65.0, 27208.0], [65.1, 27209.0], [65.2, 27209.0], [65.3, 27210.0], [65.4, 27211.0], [65.5, 27211.0], [65.6, 27212.0], [65.7, 27212.0], [65.8, 27215.0], [65.9, 27215.0], [66.0, 27219.0], [66.1, 27220.0], [66.2, 27221.0], [66.3, 27222.0], [66.4, 27224.0], [66.5, 27225.0], [66.6, 27227.0], [66.7, 27227.0], [66.8, 27230.0], [66.9, 27230.0], [67.0, 27230.0], [67.1, 27232.0], [67.2, 27233.0], [67.3, 27233.0], [67.4, 27236.0], [67.5, 27237.0], [67.6, 27237.0], [67.7, 27238.0], [67.8, 27238.0], [67.9, 27241.0], [68.0, 27242.0], [68.1, 27244.0], [68.2, 27245.0], [68.3, 27245.0], [68.4, 27247.0], [68.5, 27247.0], [68.6, 27248.0], [68.7, 27249.0], [68.8, 27250.0], [68.9, 27251.0], [69.0, 27251.0], [69.1, 27254.0], [69.2, 27255.0], [69.3, 27256.0], [69.4, 27256.0], [69.5, 27257.0], [69.6, 27259.0], [69.7, 27263.0], [69.8, 27263.0], [69.9, 27266.0], [70.0, 27266.0], [70.1, 27267.0], [70.2, 27267.0], [70.3, 27268.0], [70.4, 27269.0], [70.5, 27269.0], [70.6, 27270.0], [70.7, 27270.0], [70.8, 27271.0], [70.9, 27271.0], [71.0, 27271.0], [71.1, 27272.0], [71.2, 27273.0], [71.3, 27274.0], [71.4, 27275.0], [71.5, 27280.0], [71.6, 27282.0], [71.7, 27282.0], [71.8, 27285.0], [71.9, 27298.0], [72.0, 27300.0], [72.1, 27304.0], [72.2, 27308.0], [72.3, 27310.0], [72.4, 27312.0], [72.5, 27318.0], [72.6, 27318.0], [72.7, 27321.0], [72.8, 27321.0], [72.9, 27323.0], [73.0, 27323.0], [73.1, 27323.0], [73.2, 27327.0], [73.3, 27329.0], [73.4, 27334.0], [73.5, 27342.0], [73.6, 27350.0], [73.7, 27351.0], [73.8, 27352.0], [73.9, 27361.0], [74.0, 27363.0], [74.1, 27363.0], [74.2, 27364.0], [74.3, 27367.0], [74.4, 27368.0], [74.5, 27370.0], [74.6, 27371.0], [74.7, 27376.0], [74.8, 27376.0], [74.9, 27377.0], [75.0, 27380.0], [75.1, 27383.0], [75.2, 27383.0], [75.3, 27383.0], [75.4, 27387.0], [75.5, 27387.0], [75.6, 27391.0], [75.7, 27391.0], [75.8, 27391.0], [75.9, 27393.0], [76.0, 27393.0], [76.1, 27394.0], [76.2, 27397.0], [76.3, 27404.0], [76.4, 27408.0], [76.5, 27408.0], [76.6, 27409.0], [76.7, 27410.0], [76.8, 27411.0], [76.9, 27412.0], [77.0, 27412.0], [77.1, 27413.0], [77.2, 27413.0], [77.3, 27414.0], [77.4, 27414.0], [77.5, 27416.0], [77.6, 27418.0], [77.7, 27423.0], [77.8, 27424.0], [77.9, 27428.0], [78.0, 27430.0], [78.1, 27433.0], [78.2, 27433.0], [78.3, 27436.0], [78.4, 27437.0], [78.5, 27438.0], [78.6, 27439.0], [78.7, 27440.0], [78.8, 27442.0], [78.9, 27444.0], [79.0, 27445.0], [79.1, 27448.0], [79.2, 27449.0], [79.3, 27449.0], [79.4, 27452.0], [79.5, 27452.0], [79.6, 27457.0], [79.7, 27460.0], [79.8, 27460.0], [79.9, 27461.0], [80.0, 27462.0], [80.1, 27464.0], [80.2, 27464.0], [80.3, 27465.0], [80.4, 27467.0], [80.5, 27469.0], [80.6, 27471.0], [80.7, 27473.0], [80.8, 27474.0], [80.9, 27474.0], [81.0, 27475.0], [81.1, 27477.0], [81.2, 27477.0], [81.3, 27480.0], [81.4, 27485.0], [81.5, 27485.0], [81.6, 27486.0], [81.7, 27487.0], [81.8, 27487.0], [81.9, 27489.0], [82.0, 27492.0], [82.1, 27494.0], [82.2, 27494.0], [82.3, 27494.0], [82.4, 27496.0], [82.5, 27496.0], [82.6, 27496.0], [82.7, 27499.0], [82.8, 27502.0], [82.9, 27503.0], [83.0, 27503.0], [83.1, 27506.0], [83.2, 27506.0], [83.3, 27508.0], [83.4, 27509.0], [83.5, 27510.0], [83.6, 27511.0], [83.7, 27511.0], [83.8, 27513.0], [83.9, 27514.0], [84.0, 27514.0], [84.1, 27516.0], [84.2, 27520.0], [84.3, 27523.0], [84.4, 27523.0], [84.5, 27524.0], [84.6, 27524.0], [84.7, 27525.0], [84.8, 27525.0], [84.9, 27529.0], [85.0, 27530.0], [85.1, 27532.0], [85.2, 27532.0], [85.3, 27536.0], [85.4, 27536.0], [85.5, 27538.0], [85.6, 27539.0], [85.7, 27540.0], [85.8, 27550.0], [85.9, 27552.0], [86.0, 27557.0], [86.1, 27557.0], [86.2, 27558.0], [86.3, 27565.0], [86.4, 27566.0], [86.5, 27566.0], [86.6, 27566.0], [86.7, 27568.0], [86.8, 27569.0], [86.9, 27570.0], [87.0, 27571.0], [87.1, 27574.0], [87.2, 27576.0], [87.3, 27576.0], [87.4, 27577.0], [87.5, 27580.0], [87.6, 27580.0], [87.7, 27580.0], [87.8, 27582.0], [87.9, 27584.0], [88.0, 27587.0], [88.1, 27589.0], [88.2, 27590.0], [88.3, 27591.0], [88.4, 27591.0], [88.5, 27594.0], [88.6, 27595.0], [88.7, 27595.0], [88.8, 27597.0], [88.9, 27598.0], [89.0, 27603.0], [89.1, 27608.0], [89.2, 27608.0], [89.3, 27610.0], [89.4, 27611.0], [89.5, 27611.0], [89.6, 27612.0], [89.7, 27613.0], [89.8, 27614.0], [89.9, 27618.0], [90.0, 27619.0], [90.1, 27620.0], [90.2, 27620.0], [90.3, 27621.0], [90.4, 27622.0], [90.5, 27624.0], [90.6, 27625.0], [90.7, 27625.0], [90.8, 27625.0], [90.9, 27627.0], [91.0, 27628.0], [91.1, 27629.0], [91.2, 27629.0], [91.3, 27633.0], [91.4, 27633.0], [91.5, 27639.0], [91.6, 27640.0], [91.7, 27652.0], [91.8, 27668.0], [91.9, 27668.0], [92.0, 27682.0], [92.1, 27686.0], [92.2, 27692.0], [92.3, 27697.0], [92.4, 27699.0], [92.5, 27701.0], [92.6, 27706.0], [92.7, 27712.0], [92.8, 27713.0], [92.9, 27754.0], [93.0, 27781.0], [93.1, 27805.0], [93.2, 27839.0], [93.3, 27873.0], [93.4, 27894.0], [93.5, 27924.0], [93.6, 27951.0], [93.7, 27967.0], [93.8, 27969.0], [93.9, 27976.0], [94.0, 27977.0], [94.1, 28040.0], [94.2, 28051.0], [94.3, 28073.0], [94.4, 28092.0], [94.5, 28141.0], [94.6, 28151.0], [94.7, 28176.0], [94.8, 28182.0], [94.9, 28272.0], [95.0, 28295.0], [95.1, 28333.0], [95.2, 28369.0], [95.3, 28408.0], [95.4, 28458.0], [95.5, 28460.0], [95.6, 28496.0], [95.7, 28517.0], [95.8, 28555.0], [95.9, 28587.0], [96.0, 28617.0], [96.1, 28652.0], [96.2, 28682.0], [96.3, 28715.0], [96.4, 28754.0], [96.5, 28779.0], [96.6, 28814.0], [96.7, 28832.0], [96.8, 28867.0], [96.9, 28929.0], [97.0, 28930.0], [97.1, 28970.0], [97.2, 28994.0], [97.3, 29017.0], [97.4, 29059.0], [97.5, 29112.0], [97.6, 29155.0], [97.7, 29165.0], [97.8, 29222.0], [97.9, 29225.0], [98.0, 29281.0], [98.1, 29286.0], [98.2, 29308.0], [98.3, 29359.0], [98.4, 29392.0], [98.5, 29425.0], [98.6, 29457.0], [98.7, 29479.0], [98.8, 29500.0], [98.9, 29520.0], [99.0, 29537.0], [99.1, 29590.0], [99.2, 29604.0], [99.3, 29694.0], [99.4, 29737.0], [99.5, 29749.0], [99.6, 29773.0], [99.7, 29823.0], [99.8, 29840.0], [99.9, 29876.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 1994.0], [0.1, 1996.0], [0.2, 1996.0], [0.3, 1996.0], [0.4, 1997.0], [0.5, 1998.0], [0.6, 1999.0], [0.7, 2000.0], [0.8, 2000.0], [0.9, 2058.0], [1.0, 2059.0], [1.1, 2060.0], [1.2, 2063.0], [1.3, 2064.0], [1.4, 2064.0], [1.5, 2075.0], [1.6, 2088.0], [1.7, 2088.0], [1.8, 2089.0], [1.9, 2089.0], [2.0, 2093.0], [2.1, 2094.0], [2.2, 2106.0], [2.3, 2106.0], [2.4, 2107.0], [2.5, 2109.0], [2.6, 2114.0], [2.7, 2140.0], [2.8, 2141.0], [2.9, 2150.0], [3.0, 2199.0], [3.1, 2208.0], [3.2, 2209.0], [3.3, 2214.0], [3.4, 2237.0], [3.5, 2245.0], [3.6, 2247.0], [3.7, 2259.0], [3.8, 2260.0], [3.9, 2442.0], [4.0, 2442.0], [4.1, 2445.0], [4.2, 2452.0], [4.3, 2453.0], [4.4, 2463.0], [4.5, 2466.0], [4.6, 2517.0], [4.7, 2518.0], [4.8, 2523.0], [4.9, 2524.0], [5.0, 2530.0], [5.1, 2533.0], [5.2, 2542.0], [5.3, 2543.0], [5.4, 2553.0], [5.5, 2557.0], [5.6, 2558.0], [5.7, 2568.0], [5.8, 2572.0], [5.9, 2574.0], [6.0, 2577.0], [6.1, 2579.0], [6.2, 2583.0], [6.3, 2602.0], [6.4, 2602.0], [6.5, 2604.0], [6.6, 2607.0], [6.7, 2616.0], [6.8, 2621.0], [6.9, 2623.0], [7.0, 2623.0], [7.1, 2623.0], [7.2, 2624.0], [7.3, 2624.0], [7.4, 2625.0], [7.5, 2629.0], [7.6, 2634.0], [7.7, 2634.0], [7.8, 2635.0], [7.9, 2635.0], [8.0, 2639.0], [8.1, 2640.0], [8.2, 2640.0], [8.3, 2642.0], [8.4, 2643.0], [8.5, 2645.0], [8.6, 2651.0], [8.7, 2651.0], [8.8, 2660.0], [8.9, 2663.0], [9.0, 2671.0], [9.1, 2681.0], [9.2, 2683.0], [9.3, 2689.0], [9.4, 2695.0], [9.5, 2701.0], [9.6, 2719.0], [9.7, 2722.0], [9.8, 2722.0], [9.9, 2743.0], [10.0, 2756.0], [10.1, 2759.0], [10.2, 2761.0], [10.3, 2763.0], [10.4, 2764.0], [10.5, 2770.0], [10.6, 2772.0], [10.7, 2774.0], [10.8, 2782.0], [10.9, 2783.0], [11.0, 2802.0], [11.1, 2806.0], [11.2, 2808.0], [11.3, 2808.0], [11.4, 2809.0], [11.5, 2809.0], [11.6, 2810.0], [11.7, 2815.0], [11.8, 2818.0], [11.9, 2820.0], [12.0, 2824.0], [12.1, 2825.0], [12.2, 2827.0], [12.3, 2831.0], [12.4, 2832.0], [12.5, 2833.0], [12.6, 2837.0], [12.7, 2840.0], [12.8, 2843.0], [12.9, 2851.0], [13.0, 2853.0], [13.1, 2853.0], [13.2, 2861.0], [13.3, 2862.0], [13.4, 2863.0], [13.5, 2864.0], [13.6, 2872.0], [13.7, 2874.0], [13.8, 2879.0], [13.9, 2882.0], [14.0, 2884.0], [14.1, 2894.0], [14.2, 2896.0], [14.3, 2898.0], [14.4, 2900.0], [14.5, 2904.0], [14.6, 2904.0], [14.7, 2905.0], [14.8, 2919.0], [14.9, 2919.0], [15.0, 2919.0], [15.1, 2920.0], [15.2, 2920.0], [15.3, 2920.0], [15.4, 2921.0], [15.5, 2921.0], [15.6, 2921.0], [15.7, 2922.0], [15.8, 2922.0], [15.9, 2923.0], [16.0, 2923.0], [16.1, 2923.0], [16.2, 2923.0], [16.3, 2923.0], [16.4, 2923.0], [16.5, 2923.0], [16.6, 2924.0], [16.7, 2925.0], [16.8, 2925.0], [16.9, 2925.0], [17.0, 2925.0], [17.1, 2928.0], [17.2, 2930.0], [17.3, 2930.0], [17.4, 2930.0], [17.5, 2931.0], [17.6, 2932.0], [17.7, 2937.0], [17.8, 2941.0], [17.9, 2943.0], [18.0, 2947.0], [18.1, 2949.0], [18.2, 2952.0], [18.3, 2954.0], [18.4, 2954.0], [18.5, 2955.0], [18.6, 2956.0], [18.7, 2956.0], [18.8, 2959.0], [18.9, 2969.0], [19.0, 2977.0], [19.1, 2992.0], [19.2, 2993.0], [19.3, 2994.0], [19.4, 2995.0], [19.5, 2997.0], [19.6, 2999.0], [19.7, 3001.0], [19.8, 3009.0], [19.9, 3015.0], [20.0, 3016.0], [20.1, 3017.0], [20.2, 3017.0], [20.3, 3025.0], [20.4, 3029.0], [20.5, 3030.0], [20.6, 3031.0], [20.7, 3032.0], [20.8, 3033.0], [20.9, 3033.0], [21.0, 3033.0], [21.1, 3034.0], [21.2, 3034.0], [21.3, 3034.0], [21.4, 3034.0], [21.5, 3034.0], [21.6, 3034.0], [21.7, 3035.0], [21.8, 3035.0], [21.9, 3036.0], [22.0, 3036.0], [22.1, 3036.0], [22.2, 3038.0], [22.3, 3040.0], [22.4, 3041.0], [22.5, 3042.0], [22.6, 3043.0], [22.7, 3044.0], [22.8, 3044.0], [22.9, 3047.0], [23.0, 3048.0], [23.1, 3049.0], [23.2, 3050.0], [23.3, 3071.0], [23.4, 3071.0], [23.5, 3087.0], [23.6, 3102.0], [23.7, 3106.0], [23.8, 3126.0], [23.9, 3128.0], [24.0, 3131.0], [24.1, 3154.0], [24.2, 3157.0], [24.3, 3158.0], [24.4, 3195.0], [24.5, 3196.0], [24.6, 3197.0], [24.7, 3197.0], [24.8, 3198.0], [24.9, 3199.0], [25.0, 3199.0], [25.1, 3199.0], [25.2, 3200.0], [25.3, 3201.0], [25.4, 3202.0], [25.5, 3203.0], [25.6, 3203.0], [25.7, 3203.0], [25.8, 3214.0], [25.9, 3216.0], [26.0, 3216.0], [26.1, 3216.0], [26.2, 3218.0], [26.3, 3218.0], [26.4, 3218.0], [26.5, 3224.0], [26.6, 3226.0], [26.7, 3229.0], [26.8, 3230.0], [26.9, 3231.0], [27.0, 3257.0], [27.1, 3257.0], [27.2, 3259.0], [27.3, 3260.0], [27.4, 3260.0], [27.5, 3261.0], [27.6, 3261.0], [27.7, 3261.0], [27.8, 3262.0], [27.9, 3262.0], [28.0, 3264.0], [28.1, 3265.0], [28.2, 3265.0], [28.3, 3266.0], [28.4, 3271.0], [28.5, 3272.0], [28.6, 3273.0], [28.7, 3281.0], [28.8, 3281.0], [28.9, 3285.0], [29.0, 3285.0], [29.1, 3288.0], [29.2, 3294.0], [29.3, 3297.0], [29.4, 3297.0], [29.5, 3301.0], [29.6, 3303.0], [29.7, 3303.0], [29.8, 3303.0], [29.9, 3305.0], [30.0, 3305.0], [30.1, 3305.0], [30.2, 3306.0], [30.3, 3307.0], [30.4, 3308.0], [30.5, 3308.0], [30.6, 3308.0], [30.7, 3316.0], [30.8, 3317.0], [30.9, 3317.0], [31.0, 3318.0], [31.1, 3318.0], [31.2, 3319.0], [31.3, 3319.0], [31.4, 3319.0], [31.5, 3320.0], [31.6, 3322.0], [31.7, 3322.0], [31.8, 3323.0], [31.9, 3342.0], [32.0, 3342.0], [32.1, 3343.0], [32.2, 3344.0], [32.3, 3344.0], [32.4, 3367.0], [32.5, 3370.0], [32.6, 3378.0], [32.7, 3378.0], [32.8, 3381.0], [32.9, 3381.0], [33.0, 3381.0], [33.1, 3381.0], [33.2, 3382.0], [33.3, 3382.0], [33.4, 3382.0], [33.5, 3382.0], [33.6, 3383.0], [33.7, 3383.0], [33.8, 3384.0], [33.9, 3384.0], [34.0, 3384.0], [34.1, 3385.0], [34.2, 3385.0], [34.3, 3385.0], [34.4, 3385.0], [34.5, 3385.0], [34.6, 3385.0], [34.7, 3387.0], [34.8, 3387.0], [34.9, 3387.0], [35.0, 3388.0], [35.1, 3388.0], [35.2, 3389.0], [35.3, 3390.0], [35.4, 3390.0], [35.5, 3390.0], [35.6, 3391.0], [35.7, 3394.0], [35.8, 3394.0], [35.9, 3394.0], [36.0, 3394.0], [36.1, 3394.0], [36.2, 3395.0], [36.3, 3396.0], [36.4, 3397.0], [36.5, 3397.0], [36.6, 3398.0], [36.7, 3398.0], [36.8, 3399.0], [36.9, 3400.0], [37.0, 3401.0], [37.1, 3401.0], [37.2, 3403.0], [37.3, 3404.0], [37.4, 3408.0], [37.5, 3409.0], [37.6, 3414.0], [37.7, 3421.0], [37.8, 3424.0], [37.9, 12079.0], [38.0, 13865.0], [38.1, 17734.0], [38.2, 17891.0], [38.3, 26142.0], [38.4, 26158.0], [38.5, 26251.0], [38.6, 26309.0], [38.7, 26322.0], [38.8, 26354.0], [38.9, 26359.0], [39.0, 26377.0], [39.1, 26412.0], [39.2, 26423.0], [39.3, 26425.0], [39.4, 26438.0], [39.5, 26460.0], [39.6, 26474.0], [39.7, 26489.0], [39.8, 26499.0], [39.9, 26499.0], [40.0, 26509.0], [40.1, 26532.0], [40.2, 26535.0], [40.3, 26549.0], [40.4, 26555.0], [40.5, 26560.0], [40.6, 26561.0], [40.7, 26570.0], [40.8, 26575.0], [40.9, 26580.0], [41.0, 26589.0], [41.1, 26606.0], [41.2, 26614.0], [41.3, 26617.0], [41.4, 26623.0], [41.5, 26632.0], [41.6, 26641.0], [41.7, 26658.0], [41.8, 26676.0], [41.9, 26687.0], [42.0, 26688.0], [42.1, 26692.0], [42.2, 26728.0], [42.3, 26739.0], [42.4, 26747.0], [42.5, 26756.0], [42.6, 26760.0], [42.7, 26760.0], [42.8, 26765.0], [42.9, 26768.0], [43.0, 26817.0], [43.1, 26828.0], [43.2, 26832.0], [43.3, 26834.0], [43.4, 26835.0], [43.5, 26844.0], [43.6, 26862.0], [43.7, 26867.0], [43.8, 26873.0], [43.9, 26876.0], [44.0, 26877.0], [44.1, 26879.0], [44.2, 26892.0], [44.3, 26893.0], [44.4, 26895.0], [44.5, 26915.0], [44.6, 26916.0], [44.7, 26916.0], [44.8, 26927.0], [44.9, 26928.0], [45.0, 26935.0], [45.1, 26944.0], [45.2, 26945.0], [45.3, 26946.0], [45.4, 26951.0], [45.5, 26953.0], [45.6, 26955.0], [45.7, 26960.0], [45.8, 26960.0], [45.9, 26960.0], [46.0, 26961.0], [46.1, 26966.0], [46.2, 26968.0], [46.3, 26970.0], [46.4, 26972.0], [46.5, 26972.0], [46.6, 26973.0], [46.7, 26974.0], [46.8, 26976.0], [46.9, 26976.0], [47.0, 26976.0], [47.1, 26978.0], [47.2, 26980.0], [47.3, 26982.0], [47.4, 26985.0], [47.5, 26985.0], [47.6, 26987.0], [47.7, 26987.0], [47.8, 26988.0], [47.9, 26988.0], [48.0, 26989.0], [48.1, 26990.0], [48.2, 26991.0], [48.3, 26995.0], [48.4, 26998.0], [48.5, 27000.0], [48.6, 27001.0], [48.7, 27001.0], [48.8, 27001.0], [48.9, 27002.0], [49.0, 27003.0], [49.1, 27009.0], [49.2, 27009.0], [49.3, 27010.0], [49.4, 27011.0], [49.5, 27015.0], [49.6, 27015.0], [49.7, 27016.0], [49.8, 27017.0], [49.9, 27017.0], [50.0, 27017.0], [50.1, 27018.0], [50.2, 27022.0], [50.3, 27022.0], [50.4, 27023.0], [50.5, 27023.0], [50.6, 27026.0], [50.7, 27028.0], [50.8, 27029.0], [50.9, 27031.0], [51.0, 27031.0], [51.1, 27032.0], [51.2, 27033.0], [51.3, 27033.0], [51.4, 27034.0], [51.5, 27035.0], [51.6, 27036.0], [51.7, 27036.0], [51.8, 27037.0], [51.9, 27037.0], [52.0, 27037.0], [52.1, 27038.0], [52.2, 27039.0], [52.3, 27040.0], [52.4, 27041.0], [52.5, 27045.0], [52.6, 27045.0], [52.7, 27046.0], [52.8, 27048.0], [52.9, 27050.0], [53.0, 27051.0], [53.1, 27052.0], [53.2, 27055.0], [53.3, 27056.0], [53.4, 27058.0], [53.5, 27059.0], [53.6, 27060.0], [53.7, 27061.0], [53.8, 27061.0], [53.9, 27062.0], [54.0, 27063.0], [54.1, 27064.0], [54.2, 27065.0], [54.3, 27071.0], [54.4, 27075.0], [54.5, 27077.0], [54.6, 27078.0], [54.7, 27078.0], [54.8, 27079.0], [54.9, 27080.0], [55.0, 27082.0], [55.1, 27083.0], [55.2, 27089.0], [55.3, 27090.0], [55.4, 27091.0], [55.5, 27092.0], [55.6, 27094.0], [55.7, 27097.0], [55.8, 27098.0], [55.9, 27099.0], [56.0, 27099.0], [56.1, 27104.0], [56.2, 27104.0], [56.3, 27107.0], [56.4, 27108.0], [56.5, 27109.0], [56.6, 27110.0], [56.7, 27110.0], [56.8, 27111.0], [56.9, 27112.0], [57.0, 27115.0], [57.1, 27116.0], [57.2, 27116.0], [57.3, 27120.0], [57.4, 27120.0], [57.5, 27122.0], [57.6, 27123.0], [57.7, 27124.0], [57.8, 27124.0], [57.9, 27124.0], [58.0, 27125.0], [58.1, 27126.0], [58.2, 27128.0], [58.3, 27129.0], [58.4, 27129.0], [58.5, 27129.0], [58.6, 27133.0], [58.7, 27134.0], [58.8, 27136.0], [58.9, 27136.0], [59.0, 27137.0], [59.1, 27137.0], [59.2, 27140.0], [59.3, 27141.0], [59.4, 27143.0], [59.5, 27146.0], [59.6, 27147.0], [59.7, 27148.0], [59.8, 27149.0], [59.9, 27149.0], [60.0, 27151.0], [60.1, 27152.0], [60.2, 27153.0], [60.3, 27155.0], [60.4, 27155.0], [60.5, 27157.0], [60.6, 27157.0], [60.7, 27158.0], [60.8, 27162.0], [60.9, 27163.0], [61.0, 27164.0], [61.1, 27165.0], [61.2, 27167.0], [61.3, 27170.0], [61.4, 27172.0], [61.5, 27173.0], [61.6, 27176.0], [61.7, 27178.0], [61.8, 27178.0], [61.9, 27182.0], [62.0, 27182.0], [62.1, 27183.0], [62.2, 27183.0], [62.3, 27184.0], [62.4, 27187.0], [62.5, 27187.0], [62.6, 27187.0], [62.7, 27189.0], [62.8, 27189.0], [62.9, 27189.0], [63.0, 27193.0], [63.1, 27193.0], [63.2, 27194.0], [63.3, 27194.0], [63.4, 27194.0], [63.5, 27195.0], [63.6, 27195.0], [63.7, 27196.0], [63.8, 27197.0], [63.9, 27198.0], [64.0, 27198.0], [64.1, 27198.0], [64.2, 27199.0], [64.3, 27200.0], [64.4, 27200.0], [64.5, 27200.0], [64.6, 27200.0], [64.7, 27202.0], [64.8, 27204.0], [64.9, 27207.0], [65.0, 27208.0], [65.1, 27209.0], [65.2, 27209.0], [65.3, 27210.0], [65.4, 27211.0], [65.5, 27211.0], [65.6, 27212.0], [65.7, 27212.0], [65.8, 27215.0], [65.9, 27215.0], [66.0, 27219.0], [66.1, 27220.0], [66.2, 27221.0], [66.3, 27222.0], [66.4, 27224.0], [66.5, 27225.0], [66.6, 27227.0], [66.7, 27227.0], [66.8, 27230.0], [66.9, 27230.0], [67.0, 27230.0], [67.1, 27232.0], [67.2, 27233.0], [67.3, 27233.0], [67.4, 27236.0], [67.5, 27237.0], [67.6, 27237.0], [67.7, 27238.0], [67.8, 27238.0], [67.9, 27241.0], [68.0, 27242.0], [68.1, 27244.0], [68.2, 27245.0], [68.3, 27245.0], [68.4, 27247.0], [68.5, 27247.0], [68.6, 27248.0], [68.7, 27249.0], [68.8, 27250.0], [68.9, 27251.0], [69.0, 27251.0], [69.1, 27254.0], [69.2, 27255.0], [69.3, 27256.0], [69.4, 27256.0], [69.5, 27257.0], [69.6, 27259.0], [69.7, 27263.0], [69.8, 27263.0], [69.9, 27266.0], [70.0, 27266.0], [70.1, 27267.0], [70.2, 27267.0], [70.3, 27268.0], [70.4, 27269.0], [70.5, 27269.0], [70.6, 27270.0], [70.7, 27270.0], [70.8, 27271.0], [70.9, 27271.0], [71.0, 27271.0], [71.1, 27272.0], [71.2, 27273.0], [71.3, 27274.0], [71.4, 27275.0], [71.5, 27280.0], [71.6, 27282.0], [71.7, 27282.0], [71.8, 27285.0], [71.9, 27298.0], [72.0, 27300.0], [72.1, 27304.0], [72.2, 27308.0], [72.3, 27310.0], [72.4, 27312.0], [72.5, 27318.0], [72.6, 27318.0], [72.7, 27321.0], [72.8, 27321.0], [72.9, 27323.0], [73.0, 27323.0], [73.1, 27323.0], [73.2, 27327.0], [73.3, 27329.0], [73.4, 27334.0], [73.5, 27342.0], [73.6, 27350.0], [73.7, 27351.0], [73.8, 27352.0], [73.9, 27361.0], [74.0, 27363.0], [74.1, 27363.0], [74.2, 27364.0], [74.3, 27367.0], [74.4, 27368.0], [74.5, 27370.0], [74.6, 27371.0], [74.7, 27376.0], [74.8, 27376.0], [74.9, 27377.0], [75.0, 27380.0], [75.1, 27383.0], [75.2, 27383.0], [75.3, 27383.0], [75.4, 27387.0], [75.5, 27387.0], [75.6, 27391.0], [75.7, 27391.0], [75.8, 27391.0], [75.9, 27393.0], [76.0, 27393.0], [76.1, 27394.0], [76.2, 27397.0], [76.3, 27404.0], [76.4, 27408.0], [76.5, 27408.0], [76.6, 27409.0], [76.7, 27410.0], [76.8, 27411.0], [76.9, 27412.0], [77.0, 27412.0], [77.1, 27413.0], [77.2, 27413.0], [77.3, 27414.0], [77.4, 27414.0], [77.5, 27416.0], [77.6, 27418.0], [77.7, 27423.0], [77.8, 27424.0], [77.9, 27428.0], [78.0, 27430.0], [78.1, 27433.0], [78.2, 27433.0], [78.3, 27436.0], [78.4, 27437.0], [78.5, 27438.0], [78.6, 27439.0], [78.7, 27440.0], [78.8, 27442.0], [78.9, 27444.0], [79.0, 27445.0], [79.1, 27448.0], [79.2, 27449.0], [79.3, 27449.0], [79.4, 27452.0], [79.5, 27452.0], [79.6, 27457.0], [79.7, 27460.0], [79.8, 27460.0], [79.9, 27461.0], [80.0, 27462.0], [80.1, 27464.0], [80.2, 27464.0], [80.3, 27465.0], [80.4, 27467.0], [80.5, 27469.0], [80.6, 27471.0], [80.7, 27473.0], [80.8, 27474.0], [80.9, 27474.0], [81.0, 27475.0], [81.1, 27477.0], [81.2, 27477.0], [81.3, 27480.0], [81.4, 27485.0], [81.5, 27485.0], [81.6, 27486.0], [81.7, 27487.0], [81.8, 27487.0], [81.9, 27489.0], [82.0, 27492.0], [82.1, 27494.0], [82.2, 27494.0], [82.3, 27494.0], [82.4, 27496.0], [82.5, 27496.0], [82.6, 27496.0], [82.7, 27499.0], [82.8, 27502.0], [82.9, 27503.0], [83.0, 27503.0], [83.1, 27506.0], [83.2, 27506.0], [83.3, 27508.0], [83.4, 27509.0], [83.5, 27510.0], [83.6, 27511.0], [83.7, 27511.0], [83.8, 27513.0], [83.9, 27514.0], [84.0, 27514.0], [84.1, 27516.0], [84.2, 27520.0], [84.3, 27523.0], [84.4, 27523.0], [84.5, 27524.0], [84.6, 27524.0], [84.7, 27525.0], [84.8, 27525.0], [84.9, 27529.0], [85.0, 27530.0], [85.1, 27532.0], [85.2, 27532.0], [85.3, 27536.0], [85.4, 27536.0], [85.5, 27538.0], [85.6, 27539.0], [85.7, 27540.0], [85.8, 27550.0], [85.9, 27552.0], [86.0, 27557.0], [86.1, 27557.0], [86.2, 27558.0], [86.3, 27565.0], [86.4, 27566.0], [86.5, 27566.0], [86.6, 27566.0], [86.7, 27568.0], [86.8, 27569.0], [86.9, 27570.0], [87.0, 27571.0], [87.1, 27574.0], [87.2, 27576.0], [87.3, 27576.0], [87.4, 27577.0], [87.5, 27580.0], [87.6, 27580.0], [87.7, 27580.0], [87.8, 27582.0], [87.9, 27584.0], [88.0, 27587.0], [88.1, 27589.0], [88.2, 27590.0], [88.3, 27591.0], [88.4, 27591.0], [88.5, 27594.0], [88.6, 27595.0], [88.7, 27595.0], [88.8, 27597.0], [88.9, 27598.0], [89.0, 27603.0], [89.1, 27608.0], [89.2, 27608.0], [89.3, 27610.0], [89.4, 27611.0], [89.5, 27611.0], [89.6, 27612.0], [89.7, 27613.0], [89.8, 27614.0], [89.9, 27618.0], [90.0, 27619.0], [90.1, 27620.0], [90.2, 27620.0], [90.3, 27621.0], [90.4, 27622.0], [90.5, 27624.0], [90.6, 27625.0], [90.7, 27625.0], [90.8, 27625.0], [90.9, 27627.0], [91.0, 27628.0], [91.1, 27629.0], [91.2, 27629.0], [91.3, 27633.0], [91.4, 27633.0], [91.5, 27639.0], [91.6, 27640.0], [91.7, 27652.0], [91.8, 27668.0], [91.9, 27668.0], [92.0, 27682.0], [92.1, 27686.0], [92.2, 27692.0], [92.3, 27697.0], [92.4, 27699.0], [92.5, 27701.0], [92.6, 27706.0], [92.7, 27712.0], [92.8, 27713.0], [92.9, 27754.0], [93.0, 27781.0], [93.1, 27805.0], [93.2, 27839.0], [93.3, 27873.0], [93.4, 27894.0], [93.5, 27924.0], [93.6, 27951.0], [93.7, 27967.0], [93.8, 27969.0], [93.9, 27976.0], [94.0, 27977.0], [94.1, 28040.0], [94.2, 28051.0], [94.3, 28073.0], [94.4, 28092.0], [94.5, 28141.0], [94.6, 28151.0], [94.7, 28176.0], [94.8, 28182.0], [94.9, 28272.0], [95.0, 28295.0], [95.1, 28333.0], [95.2, 28369.0], [95.3, 28408.0], [95.4, 28458.0], [95.5, 28460.0], [95.6, 28496.0], [95.7, 28517.0], [95.8, 28555.0], [95.9, 28587.0], [96.0, 28617.0], [96.1, 28652.0], [96.2, 28682.0], [96.3, 28715.0], [96.4, 28754.0], [96.5, 28779.0], [96.6, 28814.0], [96.7, 28832.0], [96.8, 28867.0], [96.9, 28929.0], [97.0, 28930.0], [97.1, 28970.0], [97.2, 28994.0], [97.3, 29017.0], [97.4, 29059.0], [97.5, 29112.0], [97.6, 29155.0], [97.7, 29165.0], [97.8, 29222.0], [97.9, 29225.0], [98.0, 29281.0], [98.1, 29286.0], [98.2, 29308.0], [98.3, 29359.0], [98.4, 29392.0], [98.5, 29425.0], [98.6, 29457.0], [98.7, 29479.0], [98.8, 29500.0], [98.9, 29520.0], [99.0, 29537.0], [99.1, 29590.0], [99.2, 29604.0], [99.3, 29694.0], [99.4, 29737.0], [99.5, 29749.0], [99.6, 29773.0], [99.7, 29823.0], [99.8, 29840.0], [99.9, 29876.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1900.0, "maxY": 82.0, "series": [{"data": [[1900.0, 6.0], [2000.0, 14.0], [2100.0, 11.0], [2200.0, 8.0], [2400.0, 8.0], [2500.0, 16.0], [2600.0, 32.0], [2700.0, 15.0], [2800.0, 34.0], [2900.0, 53.0], [3000.0, 38.0], [3100.0, 16.0], [3200.0, 43.0], [3300.0, 74.0], [3400.0, 10.0], [12000.0, 1.0], [13800.0, 1.0], [17700.0, 1.0], [17800.0, 1.0], [26100.0, 2.0], [26200.0, 1.0], [26300.0, 5.0], [26400.0, 9.0], [26500.0, 11.0], [26600.0, 11.0], [27400.0, 66.0], [26700.0, 8.0], [26800.0, 15.0], [26900.0, 40.0], [27000.0, 76.0], [27100.0, 82.0], [27200.0, 77.0], [27300.0, 43.0], [27500.0, 62.0], [27600.0, 35.0], [27800.0, 4.0], [27700.0, 6.0], [27900.0, 6.0], [28000.0, 4.0], [28100.0, 4.0], [28200.0, 2.0], [28300.0, 2.0], [28400.0, 4.0], [28500.0, 3.0], [28600.0, 3.0], [28800.0, 3.0], [28700.0, 3.0], [28900.0, 4.0], [29000.0, 2.0], [29100.0, 3.0], [29200.0, 4.0], [29300.0, 3.0], [29400.0, 3.0], [29500.0, 4.0], [29600.0, 2.0], [29700.0, 3.0], [29800.0, 3.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1900.0, 7.0], [2000.0, 15.0], [2100.0, 8.0], [2200.0, 8.0], [2400.0, 8.0], [2500.0, 17.0], [2600.0, 32.0], [2700.0, 15.0], [2800.0, 34.0], [2900.0, 53.0], [3000.0, 38.0], [3100.0, 16.0], [3200.0, 43.0], [3300.0, 74.0], [3400.0, 10.0], [12000.0, 1.0], [13800.0, 1.0], [17700.0, 1.0], [17800.0, 1.0], [26100.0, 2.0], [26200.0, 1.0], [26300.0, 5.0], [26400.0, 9.0], [26500.0, 11.0], [26600.0, 11.0], [27400.0, 66.0], [26700.0, 8.0], [26800.0, 15.0], [26900.0, 40.0], [27000.0, 76.0], [27100.0, 82.0], [27200.0, 77.0], [27300.0, 43.0], [27500.0, 62.0], [27600.0, 35.0], [27800.0, 4.0], [27700.0, 6.0], [27900.0, 6.0], [28000.0, 4.0], [28100.0, 4.0], [28200.0, 2.0], [28300.0, 2.0], [28400.0, 4.0], [28500.0, 3.0], [28600.0, 3.0], [28800.0, 3.0], [28700.0, 3.0], [28900.0, 4.0], [29000.0, 2.0], [29100.0, 3.0], [29200.0, 4.0], [29300.0, 3.0], [29400.0, 3.0], [29500.0, 4.0], [29600.0, 2.0], [29700.0, 3.0], [29800.0, 3.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 29800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 378.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 622.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 622.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 378.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.98297446169255, "minX": 1.68041844E12, "maxY": 1000.0, "series": [{"data": [[1.68041892E12, 501.98297446169255], [1.68041844E12, 1000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041892E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2200.5490196078435, "minX": 1.0, "maxY": 29876.0, "series": [{"data": [[2.0, 29840.0], [3.0, 29823.0], [4.0, 29773.0], [6.0, 29743.0], [7.0, 29694.0], [8.0, 29537.0], [9.0, 29604.0], [10.0, 29590.0], [11.0, 29500.0], [12.0, 29520.0], [13.0, 29479.0], [14.0, 29457.0], [15.0, 29425.0], [16.0, 29392.0], [17.0, 29359.0], [18.0, 29308.0], [20.0, 29283.5], [21.0, 29225.0], [22.0, 29222.0], [23.0, 29165.0], [24.0, 29155.0], [25.0, 29112.0], [26.0, 29059.0], [27.0, 29017.0], [28.0, 28994.0], [29.0, 28970.0], [30.0, 28929.0], [31.0, 28930.0], [33.0, 28832.0], [32.0, 28867.0], [35.0, 28779.0], [34.0, 28814.0], [37.0, 28715.0], [36.0, 28754.0], [39.0, 28652.0], [38.0, 28682.0], [41.0, 28587.0], [40.0, 28617.0], [43.0, 28517.0], [42.0, 28555.0], [44.0, 28496.0], [47.0, 28408.0], [46.0, 28459.0], [49.0, 28333.0], [48.0, 28369.0], [51.0, 28272.0], [50.0, 28295.0], [53.0, 28151.0], [52.0, 28182.0], [55.0, 28141.0], [54.0, 28176.0], [57.0, 28073.0], [56.0, 28092.0], [59.0, 28051.0], [58.0, 28040.0], [61.0, 27977.0], [60.0, 27976.0], [63.0, 27967.0], [62.0, 27969.0], [67.0, 27873.0], [66.0, 27894.0], [65.0, 27924.0], [64.0, 27951.0], [71.0, 27754.0], [70.0, 27781.0], [69.0, 27805.0], [68.0, 27839.0], [75.0, 27692.0], [74.0, 27710.333333333332], [79.0, 27686.0], [78.0, 27698.0], [76.0, 27701.0], [83.0, 27652.0], [82.0, 27668.0], [81.0, 27668.0], [80.0, 27682.0], [85.0, 27640.0], [84.0, 27633.0], [90.0, 27627.0], [89.0, 27628.0], [88.0, 27632.333333333332], [94.0, 27621.5], [92.0, 27623.5], [96.0, 27619.5], [103.0, 27612.0], [102.0, 27624.0], [101.0, 27621.0], [100.0, 27623.0], [107.0, 27603.0], [106.0, 27610.0], [105.0, 27613.0], [104.0, 27611.0], [111.0, 27608.0], [110.0, 27608.0], [109.0, 27603.0], [115.0, 27584.0], [114.0, 27594.0], [113.0, 27598.0], [112.0, 27597.0], [119.0, 27587.0], [118.0, 27590.0], [117.0, 27580.0], [116.0, 27595.0], [123.0, 27582.0], [122.0, 27591.0], [121.0, 27591.0], [120.0, 27589.0], [127.0, 27580.0], [126.0, 27577.0], [125.0, 27536.0], [124.0, 27580.0], [135.0, 27573.666666666668], [132.0, 27551.666666666668], [129.0, 27564.0], [142.0, 27568.2], [139.0, 27545.5], [151.0, 27529.0], [150.0, 27539.0], [149.0, 27538.0], [148.0, 27540.0], [147.0, 27542.0], [145.0, 27532.0], [144.0, 27554.0], [159.0, 27514.333333333332], [156.0, 27524.0], [155.0, 27418.0], [154.0, 27513.0], [153.0, 27523.0], [152.0, 27536.0], [167.0, 27520.0], [166.0, 27509.0], [165.0, 27498.0], [164.0, 27514.0], [163.0, 27519.5], [161.0, 27468.0], [175.0, 27503.0], [174.0, 27485.0], [173.0, 27479.0], [171.0, 27511.0], [170.0, 27465.0], [169.0, 27514.0], [168.0, 27511.0], [183.0, 27499.0], [182.0, 27494.0], [181.0, 27502.0], [180.0, 27492.0], [179.0, 27496.0], [178.0, 27503.0], [177.0, 27506.0], [176.0, 27496.0], [190.0, 27487.0], [189.0, 27487.0], [188.0, 27486.0], [187.0, 27489.0], [186.0, 27494.5], [184.0, 27494.0], [199.0, 27471.0], [198.0, 27474.0], [197.0, 27474.0], [196.0, 27477.0], [195.0, 27477.0], [194.0, 27479.0], [192.0, 27477.5], [207.0, 27460.0], [206.0, 27448.0], [205.0, 27444.0], [204.0, 27460.0], [203.0, 27464.0], [202.0, 27464.0], [201.0, 27469.0], [200.0, 27467.0], [215.0, 27449.0], [214.0, 27447.0], [210.0, 27459.0], [208.0, 27462.0], [223.0, 27436.0], [222.0, 27430.0], [221.0, 27439.0], [220.0, 27438.0], [219.0, 27440.0], [218.0, 27437.0], [217.0, 27433.0], [216.0, 27394.0], [231.0, 27414.0], [230.0, 27412.5], [228.0, 27424.0], [227.0, 27428.0], [226.0, 27408.0], [225.0, 27423.0], [224.0, 27433.0], [239.0, 27408.0], [238.0, 27412.0], [237.0, 27397.0], [236.0, 27411.0], [234.0, 27413.0], [232.0, 27413.0], [247.0, 27391.0], [246.0, 27350.0], [245.0, 27339.0], [243.0, 27387.0], [242.0, 27397.5], [240.0, 27391.0], [255.0, 27329.0], [254.0, 27387.0], [253.0, 27376.5], [251.0, 27342.0], [250.0, 27332.5], [248.0, 27393.0], [259.0, 27327.0], [271.0, 27300.0], [270.0, 27362.333333333332], [267.0, 27367.0], [265.0, 27364.0], [264.0, 27353.333333333332], [261.0, 27370.0], [260.0, 27380.0], [258.0, 27383.0], [257.0, 27267.0], [256.0, 27383.0], [275.0, 27318.0], [286.0, 27308.0], [287.0, 27298.0], [285.0, 27282.5], [283.0, 27251.0], [281.0, 27317.5], [279.0, 27320.5], [277.0, 27323.0], [276.0, 27334.0], [274.0, 27321.0], [273.0, 27351.0], [272.0, 27361.0], [301.0, 27270.333333333332], [298.0, 27271.0], [297.0, 27268.0], [296.0, 27264.666666666668], [293.0, 27270.0], [292.0, 27263.5], [290.0, 27163.0], [289.0, 27280.0], [288.0, 27282.0], [314.0, 27253.333333333332], [311.0, 27245.0], [310.0, 27148.0], [309.0, 27237.5], [307.0, 27266.666666666668], [304.0, 27271.666666666668], [334.0, 27232.0], [335.0, 27124.0], [333.0, 27194.0], [332.0, 27224.0], [331.0, 27241.0], [330.0, 27197.0], [329.0, 27237.0], [328.0, 27244.5], [326.0, 27238.0], [320.0, 27256.0], [323.0, 27244.0], [322.0, 27250.85714285714], [325.0, 27230.0], [324.0, 27245.0], [350.0, 27212.0], [351.0, 27200.0], [349.0, 27215.0], [348.0, 27219.0], [347.0, 27221.5], [345.0, 27227.0], [344.0, 27230.0], [343.0, 27226.0], [336.0, 27237.0], [339.0, 27233.0], [338.0, 27233.0], [341.0, 27211.0], [340.0, 27233.0], [366.0, 27151.5], [364.0, 27211.0], [363.0, 27206.5], [361.0, 27164.0], [360.0, 27205.333333333332], [357.0, 27202.0], [353.0, 27212.0], [352.0, 27220.0], [383.0, 27181.0], [380.0, 27188.5], [370.0, 27198.5], [368.0, 27200.0], [378.0, 27189.0], [377.0, 27194.0], [376.0, 27196.0], [375.0, 27195.0], [374.0, 27195.0], [373.0, 27193.0], [372.0, 27165.0], [399.0, 27153.0], [398.0, 27133.333333333332], [387.0, 27162.25], [395.0, 27064.0], [394.0, 27182.0], [393.0, 27182.0], [392.0, 27176.0], [391.0, 27172.0], [390.0, 27187.0], [389.0, 27186.5], [413.0, 27038.0], [412.0, 27149.0], [411.0, 27158.0], [410.0, 27108.0], [409.0, 27141.0], [408.0, 27156.0], [406.0, 27157.0], [405.0, 27154.0], [402.0, 27110.0], [401.0, 27170.0], [400.0, 27165.0], [429.0, 27111.0], [431.0, 27050.0], [428.0, 27137.0], [416.0, 27143.0], [427.0, 27134.0], [426.0, 27133.0], [425.0, 27116.0], [424.0, 27079.5], [422.0, 27120.0], [421.0, 27091.0], [420.0, 27125.0], [446.0, 27109.0], [447.0, 27065.0], [445.0, 27123.0], [444.0, 27122.0], [443.0, 27104.0], [442.0, 27120.0], [440.0, 27127.0], [438.0, 27129.0], [433.0, 27129.0], [432.0, 27128.0], [437.0, 27085.0], [461.0, 27036.0], [463.0, 27097.5], [460.0, 27090.0], [451.0, 27099.25], [459.0, 26987.0], [458.0, 26987.0], [457.0, 27050.0], [456.0, 27099.0], [455.0, 27099.0], [454.0, 26995.0], [453.0, 27110.0], [452.0, 27104.0], [478.0, 27019.5], [479.0, 27051.0], [476.0, 27078.0], [467.0, 27092.0], [466.0, 27037.0], [465.0, 27031.0], [464.0, 26980.0], [475.0, 27024.5], [473.0, 27077.0], [472.0, 27051.0], [470.0, 27071.0], [469.0, 27083.0], [468.0, 27089.0], [494.0, 27045.0], [495.0, 26990.0], [493.0, 27052.0], [492.0, 27058.0], [491.0, 27048.0], [490.0, 27059.0], [489.0, 26945.0], [487.0, 27056.0], [480.0, 27075.0], [482.0, 27061.0], [481.0, 26960.0], [486.0, 27061.0], [485.0, 27055.0], [484.0, 27038.5], [509.0, 27028.0], [511.0, 26915.5], [508.0, 27036.0], [506.0, 27037.0], [505.0, 27041.0], [504.0, 27036.0], [503.0, 27011.5], [499.0, 27039.0], [498.0, 27046.0], [497.0, 27030.0], [540.0, 26930.5], [532.0, 26988.0], [543.0, 26932.0], [528.0, 26893.0], [531.0, 27001.0], [530.0, 27004.5], [538.0, 26970.0], [537.0, 26989.0], [536.0, 26968.0], [519.0, 27025.5], [517.0, 27017.0], [515.0, 27031.0], [514.0, 26984.666666666668], [527.0, 27009.0], [526.0, 27011.0], [525.0, 26990.666666666668], [523.0, 27009.5], [520.0, 27002.0], [535.0, 26879.0], [534.0, 26991.0], [533.0, 26998.0], [574.0, 26765.0], [575.0, 26747.0], [561.0, 26954.666666666668], [560.0, 26945.0], [563.0, 26895.0], [562.0, 26877.0], [573.0, 26748.0], [571.0, 26828.0], [570.0, 26817.0], [569.0, 26833.0], [557.0, 26973.0], [547.0, 26978.0], [546.0, 26981.0], [551.0, 26951.5], [549.0, 26972.0], [556.0, 26939.75], [555.0, 26974.0], [567.0, 26835.0], [566.0, 26867.0], [565.0, 26844.0], [564.0, 26892.0], [602.0, 26532.0], [606.0, 26474.0], [607.0, 26425.0], [594.0, 26614.0], [596.0, 26549.0], [595.0, 26568.333333333332], [605.0, 26489.0], [604.0, 26499.0], [603.0, 26535.0], [601.0, 26557.5], [583.0, 26658.0], [582.0, 26692.0], [581.0, 26687.0], [580.0, 26688.0], [579.0, 26739.0], [578.0, 26756.0], [577.0, 26760.0], [576.0, 26760.0], [591.0, 26509.0], [590.0, 26623.0], [589.0, 26570.0], [588.0, 26580.0], [587.0, 26632.0], [586.0, 26641.0], [585.0, 26606.0], [584.0, 26676.0], [599.0, 26517.5], [597.0, 26561.0], [615.0, 26322.0], [626.0, 3421.0], [638.0, 3393.5], [634.0, 3396.0], [614.0, 26359.0], [613.0, 26354.0], [612.0, 26377.0], [611.0, 26423.0], [610.0, 26309.0], [609.0, 26425.0], [631.0, 3397.0], [630.0, 3396.6666666666665], [627.0, 3414.0], [625.0, 3408.0], [624.0, 3409.0], [623.0, 3424.0], [622.0, 12079.0], [621.0, 13865.0], [620.0, 17734.0], [619.0, 17891.0], [618.0, 26142.0], [617.0, 26158.0], [616.0, 26251.0], [657.0, 3390.0], [669.0, 3382.0], [666.0, 3381.5], [664.0, 3388.0], [647.0, 3398.0], [644.0, 3396.0], [643.0, 3391.0], [642.0, 3394.0], [641.0, 3403.0], [663.0, 3387.0], [662.0, 3383.5], [659.0, 3386.0], [656.0, 3390.0], [655.0, 3391.0], [654.0, 3377.2], [650.0, 3390.0], [648.0, 3396.6666666666665], [679.0, 3344.0], [703.0, 3301.0], [696.0, 3303.0], [694.0, 3319.3], [693.0, 3318.5], [682.0, 3342.6666666666665], [673.0, 3385.0], [678.0, 3343.0], [677.0, 3370.0], [676.0, 3382.6666666666665], [674.0, 3385.0], [731.0, 3261.75], [730.0, 3261.0], [724.0, 3262.0], [723.0, 3257.0], [722.0, 3264.25], [719.0, 3270.3333333333335], [718.0, 3259.0], [714.0, 3291.428571428571], [707.0, 3303.7999999999997], [706.0, 3288.0], [763.0, 3131.0], [764.0, 3061.5], [761.0, 3102.0], [741.0, 3216.0], [739.0, 3218.0], [738.0, 3224.8], [737.0, 3230.0], [758.0, 3158.0], [757.0, 3217.0], [755.0, 3195.5], [753.0, 3197.6666666666665], [751.0, 3198.0], [750.0, 3199.0], [748.0, 3201.0], [746.0, 3203.0], [786.0, 3071.0], [799.0, 2923.0], [798.0, 2921.0], [794.0, 2922.75], [775.0, 3033.5], [774.0, 3030.0], [772.0, 3037.0], [770.0, 3040.0], [769.0, 3041.0], [790.0, 3098.5], [789.0, 3009.0], [787.0, 3128.0], [785.0, 3032.25], [781.0, 3072.2], [780.0, 3033.6666666666665], [778.0, 3034.0], [776.0, 3034.0], [816.0, 3025.0], [830.0, 2943.0], [831.0, 2936.0], [829.0, 2939.5], [827.0, 2997.0], [825.0, 3000.0], [803.0, 2921.6], [801.0, 2919.5], [813.0, 3031.0], [812.0, 3043.3333333333335], [809.0, 2994.0], [808.0, 3024.8], [823.0, 2998.166666666667], [822.0, 2959.0], [820.0, 2969.0], [819.0, 2905.0], [862.0, 2888.0], [863.0, 2930.0], [848.0, 2923.0], [860.0, 2904.0], [859.0, 2930.0], [858.0, 2850.0], [856.0, 2881.0], [847.0, 2863.6666666666665], [835.0, 2929.5], [838.0, 2919.0], [837.0, 2901.0], [846.0, 2900.0], [844.0, 2956.0], [840.0, 2943.0], [845.0, 2954.0], [854.0, 2820.0], [853.0, 2941.0], [850.0, 2824.0], [849.0, 2923.0], [890.0, 2863.0], [895.0, 2806.0], [893.0, 2843.0], [892.0, 2776.0], [889.0, 2815.0], [888.0, 2826.9999999999995], [872.0, 2851.0], [864.0, 2877.6666666666665], [869.0, 2884.0], [866.0, 2923.5], [871.0, 2802.0], [870.0, 2919.0], [915.0, 2695.0], [927.0, 2609.6666666666665], [921.0, 2602.0], [920.0, 2543.0], [903.0, 2686.0], [901.0, 2681.0], [900.0, 2795.0], [898.0, 2809.0], [897.0, 2756.0], [896.0, 2808.0], [909.0, 2583.0], [908.0, 2602.0], [907.0, 2722.0], [905.0, 2663.0], [904.0, 2763.0], [919.0, 2530.0], [917.0, 2558.0], [916.0, 2623.0], [914.0, 2661.5], [912.0, 2664.0], [944.0, 2624.0], [947.0, 2623.0], [946.0, 2625.0], [945.0, 2623.0], [943.0, 2624.0], [928.0, 2651.0], [930.0, 2616.0], [929.0, 2643.5], [942.0, 2572.0], [941.0, 2631.5], [939.0, 2576.5], [938.0, 2634.0], [937.0, 2576.0], [934.0, 2618.6666666666665], [933.0, 2643.0], [978.0, 2463.0], [961.0, 2466.0], [1000.0, 2200.5490196078435], [1.0, 29876.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[502.7299999999994, 18096.047000000017]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 29840.0], [3.0, 29823.0], [4.0, 29773.0], [6.0, 29743.0], [7.0, 29694.0], [8.0, 29537.0], [9.0, 29604.0], [10.0, 29590.0], [11.0, 29500.0], [12.0, 29520.0], [13.0, 29479.0], [14.0, 29457.0], [15.0, 29425.0], [16.0, 29392.0], [17.0, 29359.0], [18.0, 29308.0], [20.0, 29283.5], [21.0, 29225.0], [22.0, 29222.0], [23.0, 29165.0], [24.0, 29155.0], [25.0, 29112.0], [26.0, 29059.0], [27.0, 29017.0], [28.0, 28994.0], [29.0, 28970.0], [30.0, 28929.0], [31.0, 28930.0], [33.0, 28832.0], [32.0, 28867.0], [35.0, 28779.0], [34.0, 28814.0], [37.0, 28715.0], [36.0, 28754.0], [39.0, 28652.0], [38.0, 28682.0], [41.0, 28587.0], [40.0, 28617.0], [43.0, 28517.0], [42.0, 28555.0], [44.0, 28496.0], [47.0, 28408.0], [46.0, 28459.0], [49.0, 28333.0], [48.0, 28369.0], [51.0, 28272.0], [50.0, 28295.0], [53.0, 28151.0], [52.0, 28182.0], [55.0, 28141.0], [54.0, 28176.0], [57.0, 28073.0], [56.0, 28092.0], [59.0, 28051.0], [58.0, 28040.0], [61.0, 27977.0], [60.0, 27976.0], [63.0, 27967.0], [62.0, 27969.0], [67.0, 27873.0], [66.0, 27894.0], [65.0, 27924.0], [64.0, 27951.0], [71.0, 27754.0], [70.0, 27781.0], [69.0, 27805.0], [68.0, 27839.0], [75.0, 27692.0], [74.0, 27710.333333333332], [79.0, 27686.0], [78.0, 27698.0], [76.0, 27701.0], [83.0, 27652.0], [82.0, 27668.0], [81.0, 27668.0], [80.0, 27682.0], [85.0, 27640.0], [84.0, 27633.0], [90.0, 27627.0], [89.0, 27628.0], [88.0, 27632.333333333332], [94.0, 27621.5], [92.0, 27623.5], [96.0, 27619.5], [103.0, 27612.0], [102.0, 27624.0], [101.0, 27621.0], [100.0, 27623.0], [107.0, 27603.0], [106.0, 27610.0], [105.0, 27613.0], [104.0, 27611.0], [111.0, 27608.0], [110.0, 27608.0], [109.0, 27603.0], [115.0, 27584.0], [114.0, 27594.0], [113.0, 27598.0], [112.0, 27597.0], [119.0, 27587.0], [118.0, 27590.0], [117.0, 27580.0], [116.0, 27595.0], [123.0, 27582.0], [122.0, 27591.0], [121.0, 27591.0], [120.0, 27589.0], [127.0, 27580.0], [126.0, 27577.0], [125.0, 27536.0], [124.0, 27580.0], [135.0, 27573.666666666668], [132.0, 27551.666666666668], [129.0, 27564.0], [142.0, 27568.2], [139.0, 27545.5], [151.0, 27529.0], [150.0, 27539.0], [149.0, 27538.0], [148.0, 27540.0], [147.0, 27542.0], [145.0, 27532.0], [144.0, 27554.0], [159.0, 27514.333333333332], [156.0, 27524.0], [155.0, 27418.0], [154.0, 27513.0], [153.0, 27523.0], [152.0, 27536.0], [167.0, 27520.0], [166.0, 27509.0], [165.0, 27498.0], [164.0, 27514.0], [163.0, 27519.5], [161.0, 27468.0], [175.0, 27503.0], [174.0, 27485.0], [173.0, 27479.0], [171.0, 27511.0], [170.0, 27465.0], [169.0, 27514.0], [168.0, 27511.0], [183.0, 27499.0], [182.0, 27494.0], [181.0, 27502.0], [180.0, 27492.0], [179.0, 27496.0], [178.0, 27503.0], [177.0, 27506.0], [176.0, 27496.0], [190.0, 27487.0], [189.0, 27487.0], [188.0, 27486.0], [187.0, 27489.0], [186.0, 27494.5], [184.0, 27494.0], [199.0, 27471.0], [198.0, 27474.0], [197.0, 27474.0], [196.0, 27477.0], [195.0, 27477.0], [194.0, 27479.0], [192.0, 27477.5], [207.0, 27460.0], [206.0, 27448.0], [205.0, 27444.0], [204.0, 27460.0], [203.0, 27464.0], [202.0, 27464.0], [201.0, 27469.0], [200.0, 27467.0], [215.0, 27449.0], [214.0, 27447.0], [210.0, 27459.0], [208.0, 27462.0], [223.0, 27436.0], [222.0, 27430.0], [221.0, 27439.0], [220.0, 27438.0], [219.0, 27440.0], [218.0, 27437.0], [217.0, 27433.0], [216.0, 27394.0], [231.0, 27414.0], [230.0, 27412.5], [228.0, 27424.0], [227.0, 27428.0], [226.0, 27408.0], [225.0, 27423.0], [224.0, 27433.0], [239.0, 27408.0], [238.0, 27412.0], [237.0, 27397.0], [236.0, 27411.0], [234.0, 27413.0], [232.0, 27413.0], [247.0, 27391.0], [246.0, 27350.0], [245.0, 27339.0], [243.0, 27387.0], [242.0, 27397.5], [240.0, 27391.0], [255.0, 27329.0], [254.0, 27387.0], [253.0, 27376.5], [251.0, 27342.0], [250.0, 27332.5], [248.0, 27393.0], [259.0, 27327.0], [271.0, 27300.0], [270.0, 27362.333333333332], [267.0, 27367.0], [265.0, 27364.0], [264.0, 27353.333333333332], [261.0, 27370.0], [260.0, 27380.0], [258.0, 27383.0], [257.0, 27267.0], [256.0, 27383.0], [275.0, 27318.0], [286.0, 27308.0], [287.0, 27298.0], [285.0, 27282.5], [283.0, 27251.0], [281.0, 27317.5], [279.0, 27320.5], [277.0, 27323.0], [276.0, 27334.0], [274.0, 27321.0], [273.0, 27351.0], [272.0, 27361.0], [301.0, 27270.333333333332], [298.0, 27271.0], [297.0, 27268.0], [296.0, 27264.666666666668], [293.0, 27270.0], [292.0, 27263.5], [290.0, 27163.0], [289.0, 27280.0], [288.0, 27282.0], [314.0, 27253.333333333332], [311.0, 27245.0], [310.0, 27148.0], [309.0, 27237.5], [307.0, 27266.666666666668], [304.0, 27271.666666666668], [334.0, 27232.0], [335.0, 27124.0], [333.0, 27194.0], [332.0, 27224.0], [331.0, 27241.0], [330.0, 27197.0], [329.0, 27237.0], [328.0, 27244.5], [326.0, 27238.0], [320.0, 27256.0], [323.0, 27244.0], [322.0, 27250.857142857145], [325.0, 27230.0], [324.0, 27245.0], [350.0, 27212.0], [351.0, 27200.0], [349.0, 27215.0], [348.0, 27219.0], [347.0, 27221.5], [345.0, 27227.0], [344.0, 27230.0], [343.0, 27226.0], [336.0, 27237.0], [339.0, 27233.0], [338.0, 27233.0], [341.0, 27211.0], [340.0, 27233.0], [366.0, 27151.5], [364.0, 27211.0], [363.0, 27206.5], [361.0, 27164.0], [360.0, 27205.333333333332], [357.0, 27202.0], [353.0, 27212.0], [352.0, 27220.0], [383.0, 27181.0], [380.0, 27188.5], [370.0, 27198.5], [368.0, 27200.0], [378.0, 27189.0], [377.0, 27194.0], [376.0, 27196.0], [375.0, 27195.0], [374.0, 27195.0], [373.0, 27193.0], [372.0, 27165.0], [399.0, 27153.0], [398.0, 27133.333333333332], [387.0, 27162.25], [395.0, 27064.0], [394.0, 27182.0], [393.0, 27182.0], [392.0, 27176.0], [391.0, 27172.0], [390.0, 27187.0], [389.0, 27186.5], [413.0, 27038.0], [412.0, 27149.0], [411.0, 27158.0], [410.0, 27108.0], [409.0, 27141.0], [408.0, 27156.0], [406.0, 27157.0], [405.0, 27154.0], [402.0, 27110.0], [401.0, 27170.0], [400.0, 27165.0], [429.0, 27111.0], [431.0, 27050.0], [428.0, 27137.0], [416.0, 27143.0], [427.0, 27134.0], [426.0, 27133.0], [425.0, 27116.0], [424.0, 27079.5], [422.0, 27120.0], [421.0, 27091.0], [420.0, 27125.0], [446.0, 27109.0], [447.0, 27065.0], [445.0, 27123.0], [444.0, 27122.0], [443.0, 27104.0], [442.0, 27120.0], [440.0, 27127.0], [438.0, 27129.0], [433.0, 27129.0], [432.0, 27128.0], [437.0, 27085.0], [461.0, 27036.0], [463.0, 27097.5], [460.0, 27090.0], [451.0, 27099.25], [459.0, 26987.0], [458.0, 26987.0], [457.0, 27050.0], [456.0, 27099.0], [455.0, 27099.0], [454.0, 26995.0], [453.0, 27110.0], [452.0, 27104.0], [478.0, 27019.5], [479.0, 27051.0], [476.0, 27078.0], [467.0, 27092.0], [466.0, 27037.0], [465.0, 27031.0], [464.0, 26980.0], [475.0, 27024.5], [473.0, 27077.0], [472.0, 27051.0], [470.0, 27071.0], [469.0, 27083.0], [468.0, 27089.0], [494.0, 27045.0], [495.0, 26990.0], [493.0, 27052.0], [492.0, 27058.0], [491.0, 27048.0], [490.0, 27059.0], [489.0, 26945.0], [487.0, 27056.0], [480.0, 27075.0], [482.0, 27061.0], [481.0, 26960.0], [486.0, 27061.0], [485.0, 27055.0], [484.0, 27038.5], [509.0, 27028.0], [511.0, 26915.5], [508.0, 27036.0], [506.0, 27037.0], [505.0, 27041.0], [504.0, 27036.0], [503.0, 27011.5], [499.0, 27039.0], [498.0, 27046.0], [497.0, 27030.0], [540.0, 26930.5], [532.0, 26988.0], [543.0, 26932.0], [528.0, 26893.0], [531.0, 27001.0], [530.0, 27004.5], [538.0, 26970.0], [537.0, 26989.0], [536.0, 26968.0], [519.0, 27025.5], [517.0, 27017.0], [515.0, 27031.0], [514.0, 26984.666666666668], [527.0, 27009.0], [526.0, 27011.0], [525.0, 26990.666666666668], [523.0, 27009.5], [520.0, 27002.0], [535.0, 26879.0], [534.0, 26991.0], [533.0, 26998.0], [574.0, 26765.0], [575.0, 26747.0], [561.0, 26954.666666666668], [560.0, 26945.0], [563.0, 26895.0], [562.0, 26877.0], [573.0, 26748.0], [571.0, 26828.0], [570.0, 26817.0], [569.0, 26833.0], [557.0, 26973.0], [547.0, 26978.0], [546.0, 26981.0], [551.0, 26951.5], [549.0, 26972.0], [556.0, 26939.75], [555.0, 26974.0], [567.0, 26835.0], [566.0, 26867.0], [565.0, 26844.0], [564.0, 26892.0], [602.0, 26532.0], [606.0, 26474.0], [607.0, 26425.0], [594.0, 26614.0], [596.0, 26549.0], [595.0, 26568.333333333332], [605.0, 26489.0], [604.0, 26499.0], [603.0, 26535.0], [601.0, 26557.5], [583.0, 26658.0], [582.0, 26692.0], [581.0, 26687.0], [580.0, 26688.0], [579.0, 26739.0], [578.0, 26756.0], [577.0, 26760.0], [576.0, 26760.0], [591.0, 26509.0], [590.0, 26623.0], [589.0, 26570.0], [588.0, 26580.0], [587.0, 26632.0], [586.0, 26641.0], [585.0, 26606.0], [584.0, 26676.0], [599.0, 26517.5], [597.0, 26561.0], [615.0, 26322.0], [626.0, 3421.0], [638.0, 3393.5], [634.0, 3396.0], [614.0, 26359.0], [613.0, 26354.0], [612.0, 26377.0], [611.0, 26423.0], [610.0, 26309.0], [609.0, 26425.0], [631.0, 3397.0], [630.0, 3396.6666666666665], [627.0, 3414.0], [625.0, 3408.0], [624.0, 3409.0], [623.0, 3424.0], [622.0, 12079.0], [621.0, 13865.0], [620.0, 17734.0], [619.0, 17891.0], [618.0, 26142.0], [617.0, 26158.0], [616.0, 26251.0], [657.0, 3390.0], [669.0, 3382.0], [666.0, 3381.5], [664.0, 3388.0], [647.0, 3398.0], [644.0, 3396.0], [643.0, 3391.0], [642.0, 3394.0], [641.0, 3403.0], [663.0, 3387.0], [662.0, 3383.5], [659.0, 3386.0], [656.0, 3390.0], [655.0, 3391.0], [654.0, 3377.2], [650.0, 3390.0], [648.0, 3396.6666666666665], [679.0, 3344.0], [703.0, 3301.0], [696.0, 3303.0], [694.0, 3319.3], [693.0, 3318.5], [682.0, 3342.6666666666665], [678.0, 3343.0], [677.0, 3370.0], [676.0, 3382.6666666666665], [674.0, 3385.0], [673.0, 3385.0], [731.0, 3261.75], [730.0, 3261.0], [724.0, 3262.0], [723.0, 3257.0], [722.0, 3264.25], [719.0, 3270.3333333333335], [718.0, 3259.0], [714.0, 3291.428571428571], [707.0, 3303.7999999999997], [706.0, 3288.0], [763.0, 3131.0], [764.0, 3061.5], [761.0, 3102.0], [741.0, 3216.0], [739.0, 3218.0], [738.0, 3224.8], [737.0, 3230.0], [758.0, 3158.0], [757.0, 3217.0], [755.0, 3195.5], [753.0, 3197.6666666666665], [751.0, 3198.0], [750.0, 3199.0], [748.0, 3201.0], [746.0, 3203.0], [786.0, 3071.0], [799.0, 2923.0], [798.0, 2921.0], [794.0, 2922.75], [775.0, 3033.5], [774.0, 3030.0], [772.0, 3037.0], [770.0, 3040.0], [769.0, 3041.0], [790.0, 3098.5], [789.0, 3009.0], [787.0, 3128.0], [785.0, 3032.25], [781.0, 3072.2], [780.0, 3033.6666666666665], [778.0, 3034.0], [776.0, 3034.0], [816.0, 3025.0], [830.0, 2943.0], [831.0, 2936.0], [829.0, 2939.5], [827.0, 2997.0], [825.0, 3000.0], [803.0, 2921.6], [801.0, 2919.5], [813.0, 3031.0], [812.0, 3043.3333333333335], [809.0, 2994.0], [808.0, 3024.8], [823.0, 2998.166666666667], [822.0, 2959.0], [820.0, 2969.0], [819.0, 2905.0], [862.0, 2888.0], [863.0, 2930.0], [848.0, 2923.0], [860.0, 2904.0], [859.0, 2930.0], [858.0, 2850.0], [856.0, 2881.0], [847.0, 2863.6666666666665], [835.0, 2929.5], [838.0, 2919.0], [837.0, 2901.0], [846.0, 2900.0], [844.0, 2956.0], [840.0, 2943.0], [845.0, 2954.0], [854.0, 2820.0], [853.0, 2941.0], [850.0, 2824.0], [849.0, 2923.0], [890.0, 2863.0], [895.0, 2806.0], [893.0, 2843.0], [892.0, 2776.0], [889.0, 2815.0], [888.0, 2827.0], [872.0, 2851.0], [864.0, 2877.6666666666665], [869.0, 2884.0], [866.0, 2923.5], [871.0, 2802.0], [870.0, 2919.0], [915.0, 2695.0], [927.0, 2609.666666666667], [921.0, 2602.0], [920.0, 2543.0], [903.0, 2686.0], [901.0, 2681.0], [900.0, 2795.0], [898.0, 2809.0], [897.0, 2756.0], [896.0, 2808.0], [909.0, 2583.0], [908.0, 2602.0], [907.0, 2722.0], [905.0, 2663.0], [904.0, 2763.0], [919.0, 2530.0], [917.0, 2558.0], [916.0, 2623.0], [914.0, 2661.5], [912.0, 2664.0], [944.0, 2624.0], [947.0, 2623.0], [946.0, 2625.0], [945.0, 2623.0], [943.0, 2624.0], [928.0, 2651.0], [930.0, 2616.0], [929.0, 2643.5], [942.0, 2572.0], [941.0, 2631.5], [939.0, 2576.5], [938.0, 2634.0], [937.0, 2576.0], [934.0, 2618.6666666666665], [933.0, 2643.0], [978.0, 2463.0], [961.0, 2466.0], [1000.0, 2204.9411764705887], [1.0, 29876.0]], "isOverall": false, "label": "Test Fragment", "isController": true}, {"data": [[502.7299999999994, 18096.270999999993]], "isOverall": false, "label": "Test Fragment-Aggregated", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8.583333333333334, "minX": 1.68041844E12, "maxY": 28760.883333333335, "series": [{"data": [[1.68041892E12, 28760.883333333335], [1.68041844E12, 161.78333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68041892E12, 5633.25], [1.68041844E12, 8.583333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041892E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2126.6666666666665, "minX": 1.68041844E12, "maxY": 18144.099297893667, "series": [{"data": [[1.68041892E12, 18144.099297893667], [1.68041844E12, 2126.6666666666665]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68041892E12, 18096.270999999993]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041892E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 844.0, "minX": 1.68041844E12, "maxY": 17187.63791374122, "series": [{"data": [[1.68041892E12, 17187.63791374122], [1.68041844E12, 844.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68041892E12, 17138.607000000007]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041892E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2050.6666666666665, "minX": 1.68041844E12, "maxY": 2638.633901705116, "series": [{"data": [[1.68041892E12, 2638.633901705116], [1.68041844E12, 2050.6666666666665]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68041892E12, 2636.682999999998]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041892E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 12079.0, "minX": 1.68041892E12, "maxY": 29876.0, "series": [{"data": [[1.68041892E12, 29876.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68041892E12, 27968.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68041892E12, 29727.11]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68041892E12, 28919.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68041892E12, 12079.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68041892E12, 27251.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041892E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2106.5, "minX": 1.0, "maxY": 29743.0, "series": [{"data": [[1.0, 12972.0], [2.0, 17812.5], [19.0, 26423.0], [10.0, 29743.0], [101.0, 27625.0], [457.0, 27193.0], [31.0, 29059.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[333.0, 3034.0], [42.0, 2106.5], [3.0, 2122.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 457.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 29743.0, "series": [{"data": [[1.0, 12972.0], [2.0, 17812.5], [19.0, 26423.0], [10.0, 29743.0], [101.0, 27625.0], [457.0, 27193.0], [31.0, 29059.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[333.0, 0.0], [42.0, 0.0], [3.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 457.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68041844E12, "maxY": 16.616666666666667, "series": [{"data": [[1.68041892E12, 16.616666666666667], [1.68041844E12, 0.05]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041892E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68041844E12, "maxY": 10.366666666666667, "series": [{"data": [[1.68041892E12, 2.2666666666666666], [1.68041844E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.68041892E12, 3.183333333333333]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.68041892E12, 10.366666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68041892E12, 0.7333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68041892E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041892E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68041844E12, "maxY": 10.366666666666667, "series": [{"data": [[1.68041892E12, 6.3]], "isOverall": false, "label": "Test Fragment-failure", "isController": true}, {"data": [[1.68041892E12, 10.366666666666667]], "isOverall": false, "label": "Test Fragment-success", "isController": true}, {"data": [[1.68041892E12, 6.25], [1.68041844E12, 0.05]], "isOverall": false, "label": "Login-failure", "isController": false}, {"data": [[1.68041892E12, 10.366666666666667]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041892E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.68041844E12, "maxY": 20.733333333333334, "series": [{"data": [[1.68041892E12, 20.733333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68041892E12, 12.55], [1.68041844E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041892E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

