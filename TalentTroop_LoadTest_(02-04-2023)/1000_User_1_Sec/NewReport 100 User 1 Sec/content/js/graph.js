/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2546.0, "minX": 0.0, "maxY": 45568.0, "series": [{"data": [[0.0, 2546.0], [0.1, 3142.0], [0.2, 3154.0], [0.3, 3154.0], [0.4, 3174.0], [0.5, 3187.0], [0.6, 3187.0], [0.7, 3189.0], [0.8, 3189.0], [0.9, 3191.0], [1.0, 3192.0], [1.1, 3192.0], [1.2, 3192.0], [1.3, 3192.0], [1.4, 3193.0], [1.5, 3193.0], [1.6, 3194.0], [1.7, 3194.0], [1.8, 3194.0], [1.9, 3194.0], [2.0, 3195.0], [2.1, 3195.0], [2.2, 3195.0], [2.3, 3196.0], [2.4, 3196.0], [2.5, 3197.0], [2.6, 3198.0], [2.7, 3198.0], [2.8, 3198.0], [2.9, 3199.0], [3.0, 3200.0], [3.1, 3200.0], [3.2, 3201.0], [3.3, 3201.0], [3.4, 3201.0], [3.5, 3201.0], [3.6, 3201.0], [3.7, 3202.0], [3.8, 3202.0], [3.9, 3202.0], [4.0, 3202.0], [4.1, 3202.0], [4.2, 3203.0], [4.3, 3203.0], [4.4, 3203.0], [4.5, 3203.0], [4.6, 3203.0], [4.7, 3203.0], [4.8, 3203.0], [4.9, 3203.0], [5.0, 3204.0], [5.1, 3204.0], [5.2, 3204.0], [5.3, 3205.0], [5.4, 3205.0], [5.5, 3205.0], [5.6, 3205.0], [5.7, 3205.0], [5.8, 3205.0], [5.9, 3206.0], [6.0, 3206.0], [6.1, 3206.0], [6.2, 3207.0], [6.3, 3207.0], [6.4, 3207.0], [6.5, 3207.0], [6.6, 3207.0], [6.7, 3207.0], [6.8, 3208.0], [6.9, 3208.0], [7.0, 3208.0], [7.1, 3208.0], [7.2, 3209.0], [7.3, 3209.0], [7.4, 3209.0], [7.5, 3209.0], [7.6, 3210.0], [7.7, 3210.0], [7.8, 3210.0], [7.9, 3211.0], [8.0, 3212.0], [8.1, 3214.0], [8.2, 3219.0], [8.3, 3225.0], [8.4, 3228.0], [8.5, 3229.0], [8.6, 3233.0], [8.7, 3235.0], [8.8, 3238.0], [8.9, 3240.0], [9.0, 3240.0], [9.1, 3241.0], [9.2, 3241.0], [9.3, 3241.0], [9.4, 3242.0], [9.5, 3242.0], [9.6, 3242.0], [9.7, 3243.0], [9.8, 3244.0], [9.9, 3245.0], [10.0, 3246.0], [10.1, 3246.0], [10.2, 3247.0], [10.3, 3249.0], [10.4, 3249.0], [10.5, 3249.0], [10.6, 3250.0], [10.7, 3250.0], [10.8, 3250.0], [10.9, 3251.0], [11.0, 3251.0], [11.1, 3252.0], [11.2, 3253.0], [11.3, 3253.0], [11.4, 3254.0], [11.5, 3256.0], [11.6, 3258.0], [11.7, 3259.0], [11.8, 3259.0], [11.9, 3260.0], [12.0, 3261.0], [12.1, 3261.0], [12.2, 3262.0], [12.3, 3263.0], [12.4, 3264.0], [12.5, 3266.0], [12.6, 3266.0], [12.7, 3267.0], [12.8, 3267.0], [12.9, 3269.0], [13.0, 3269.0], [13.1, 3270.0], [13.2, 3272.0], [13.3, 3273.0], [13.4, 3275.0], [13.5, 3276.0], [13.6, 3277.0], [13.7, 3279.0], [13.8, 3279.0], [13.9, 3280.0], [14.0, 3280.0], [14.1, 3281.0], [14.2, 3281.0], [14.3, 3281.0], [14.4, 3282.0], [14.5, 3282.0], [14.6, 3283.0], [14.7, 3283.0], [14.8, 3284.0], [14.9, 3284.0], [15.0, 3285.0], [15.1, 3285.0], [15.2, 3285.0], [15.3, 3286.0], [15.4, 3287.0], [15.5, 3287.0], [15.6, 3287.0], [15.7, 3287.0], [15.8, 3288.0], [15.9, 3288.0], [16.0, 3291.0], [16.1, 3293.0], [16.2, 3294.0], [16.3, 3297.0], [16.4, 3297.0], [16.5, 3297.0], [16.6, 3297.0], [16.7, 3298.0], [16.8, 3302.0], [16.9, 3304.0], [17.0, 3304.0], [17.1, 3308.0], [17.2, 3310.0], [17.3, 3317.0], [17.4, 3331.0], [17.5, 3332.0], [17.6, 3342.0], [17.7, 3342.0], [17.8, 3345.0], [17.9, 3351.0], [18.0, 3359.0], [18.1, 3443.0], [18.2, 3444.0], [18.3, 3444.0], [18.4, 3446.0], [18.5, 3448.0], [18.6, 3450.0], [18.7, 3450.0], [18.8, 3451.0], [18.9, 3453.0], [19.0, 3456.0], [19.1, 3457.0], [19.2, 3457.0], [19.3, 3459.0], [19.4, 3461.0], [19.5, 3462.0], [19.6, 3462.0], [19.7, 3462.0], [19.8, 3463.0], [19.9, 3468.0], [20.0, 3470.0], [20.1, 3471.0], [20.2, 3471.0], [20.3, 3472.0], [20.4, 3473.0], [20.5, 3475.0], [20.6, 3476.0], [20.7, 3477.0], [20.8, 3480.0], [20.9, 3481.0], [21.0, 3483.0], [21.1, 3484.0], [21.2, 3484.0], [21.3, 3487.0], [21.4, 3490.0], [21.5, 3490.0], [21.6, 3498.0], [21.7, 3501.0], [21.8, 3505.0], [21.9, 3506.0], [22.0, 3511.0], [22.1, 3511.0], [22.2, 3513.0], [22.3, 3513.0], [22.4, 3514.0], [22.5, 3788.0], [22.6, 7228.0], [22.7, 7232.0], [22.8, 7234.0], [22.9, 7234.0], [23.0, 7237.0], [23.1, 7237.0], [23.2, 7243.0], [23.3, 7243.0], [23.4, 7251.0], [23.5, 7251.0], [23.6, 7254.0], [23.7, 7255.0], [23.8, 7256.0], [23.9, 7258.0], [24.0, 7261.0], [24.1, 7262.0], [24.2, 7262.0], [24.3, 7263.0], [24.4, 7344.0], [24.5, 7347.0], [24.6, 7350.0], [24.7, 7355.0], [24.8, 7364.0], [24.9, 7367.0], [25.0, 7368.0], [25.1, 7369.0], [25.2, 7371.0], [25.3, 7372.0], [25.4, 7374.0], [25.5, 7376.0], [25.6, 7379.0], [25.7, 7387.0], [25.8, 7388.0], [25.9, 39290.0], [26.0, 39294.0], [26.1, 39298.0], [26.2, 39304.0], [26.3, 39312.0], [26.4, 39319.0], [26.5, 39324.0], [26.6, 39324.0], [26.7, 39325.0], [26.8, 39329.0], [26.9, 39331.0], [27.0, 39332.0], [27.1, 39335.0], [27.2, 39339.0], [27.3, 39346.0], [27.4, 39395.0], [27.5, 39460.0], [27.6, 39787.0], [27.7, 39789.0], [27.8, 39793.0], [27.9, 39795.0], [28.0, 39800.0], [28.1, 39803.0], [28.2, 39811.0], [28.3, 39811.0], [28.4, 39812.0], [28.5, 39812.0], [28.6, 39815.0], [28.7, 39826.0], [28.8, 39829.0], [28.9, 39830.0], [29.0, 39832.0], [29.1, 39833.0], [29.2, 39834.0], [29.3, 39839.0], [29.4, 39839.0], [29.5, 39841.0], [29.6, 39841.0], [29.7, 39842.0], [29.8, 39845.0], [29.9, 39850.0], [30.0, 39850.0], [30.1, 39855.0], [30.2, 39855.0], [30.3, 39858.0], [30.4, 39859.0], [30.5, 39860.0], [30.6, 39863.0], [30.7, 39865.0], [30.8, 39867.0], [30.9, 39868.0], [31.0, 39873.0], [31.1, 39880.0], [31.2, 39882.0], [31.3, 39883.0], [31.4, 39884.0], [31.5, 39885.0], [31.6, 39888.0], [31.7, 39890.0], [31.8, 39894.0], [31.9, 39895.0], [32.0, 39902.0], [32.1, 39906.0], [32.2, 39910.0], [32.3, 39912.0], [32.4, 39915.0], [32.5, 39920.0], [32.6, 39922.0], [32.7, 39924.0], [32.8, 39925.0], [32.9, 39927.0], [33.0, 39928.0], [33.1, 39929.0], [33.2, 39935.0], [33.3, 39942.0], [33.4, 39944.0], [33.5, 39946.0], [33.6, 39949.0], [33.7, 39954.0], [33.8, 39958.0], [33.9, 39961.0], [34.0, 39962.0], [34.1, 39972.0], [34.2, 39974.0], [34.3, 39992.0], [34.4, 40000.0], [34.5, 40022.0], [34.6, 40023.0], [34.7, 40025.0], [34.8, 40031.0], [34.9, 40039.0], [35.0, 40040.0], [35.1, 40069.0], [35.2, 40072.0], [35.3, 40079.0], [35.4, 40091.0], [35.5, 40091.0], [35.6, 40106.0], [35.7, 40132.0], [35.8, 40149.0], [35.9, 40151.0], [36.0, 40171.0], [36.1, 40179.0], [36.2, 40213.0], [36.3, 40214.0], [36.4, 40225.0], [36.5, 40334.0], [36.6, 40339.0], [36.7, 40347.0], [36.8, 40354.0], [36.9, 40375.0], [37.0, 40377.0], [37.1, 40419.0], [37.2, 40454.0], [37.3, 40454.0], [37.4, 40457.0], [37.5, 40495.0], [37.6, 40503.0], [37.7, 40514.0], [37.8, 40548.0], [37.9, 40601.0], [38.0, 40602.0], [38.1, 40608.0], [38.2, 40648.0], [38.3, 40659.0], [38.4, 40679.0], [38.5, 40685.0], [38.6, 40721.0], [38.7, 40723.0], [38.8, 40734.0], [38.9, 40748.0], [39.0, 40779.0], [39.1, 40782.0], [39.2, 40800.0], [39.3, 40800.0], [39.4, 40801.0], [39.5, 40801.0], [39.6, 40802.0], [39.7, 40804.0], [39.8, 40811.0], [39.9, 40811.0], [40.0, 40816.0], [40.1, 40820.0], [40.2, 40820.0], [40.3, 40823.0], [40.4, 40823.0], [40.5, 40828.0], [40.6, 40829.0], [40.7, 40831.0], [40.8, 40831.0], [40.9, 40832.0], [41.0, 40833.0], [41.1, 40833.0], [41.2, 40841.0], [41.3, 40844.0], [41.4, 40844.0], [41.5, 40846.0], [41.6, 40847.0], [41.7, 40849.0], [41.8, 40852.0], [41.9, 40855.0], [42.0, 40864.0], [42.1, 40878.0], [42.2, 40899.0], [42.3, 40900.0], [42.4, 40962.0], [42.5, 40975.0], [42.6, 40979.0], [42.7, 40994.0], [42.8, 40999.0], [42.9, 41000.0], [43.0, 41001.0], [43.1, 41010.0], [43.2, 41011.0], [43.3, 41024.0], [43.4, 41028.0], [43.5, 41032.0], [43.6, 41039.0], [43.7, 41040.0], [43.8, 41048.0], [43.9, 41050.0], [44.0, 41052.0], [44.1, 41055.0], [44.2, 41058.0], [44.3, 41062.0], [44.4, 41065.0], [44.5, 41066.0], [44.6, 41074.0], [44.7, 41075.0], [44.8, 41075.0], [44.9, 41075.0], [45.0, 41078.0], [45.1, 41083.0], [45.2, 41084.0], [45.3, 41087.0], [45.4, 41088.0], [45.5, 41091.0], [45.6, 41093.0], [45.7, 41096.0], [45.8, 41099.0], [45.9, 41106.0], [46.0, 41119.0], [46.1, 41120.0], [46.2, 41120.0], [46.3, 41123.0], [46.4, 41124.0], [46.5, 41125.0], [46.6, 41126.0], [46.7, 41129.0], [46.8, 41130.0], [46.9, 41131.0], [47.0, 41132.0], [47.1, 41133.0], [47.2, 41134.0], [47.3, 41138.0], [47.4, 41139.0], [47.5, 41140.0], [47.6, 41141.0], [47.7, 41141.0], [47.8, 41142.0], [47.9, 41144.0], [48.0, 41150.0], [48.1, 41151.0], [48.2, 41152.0], [48.3, 41152.0], [48.4, 41153.0], [48.5, 41153.0], [48.6, 41154.0], [48.7, 41155.0], [48.8, 41159.0], [48.9, 41161.0], [49.0, 41161.0], [49.1, 41162.0], [49.2, 41162.0], [49.3, 41170.0], [49.4, 41172.0], [49.5, 41176.0], [49.6, 41176.0], [49.7, 41177.0], [49.8, 41178.0], [49.9, 41179.0], [50.0, 41186.0], [50.1, 41187.0], [50.2, 41188.0], [50.3, 41189.0], [50.4, 41190.0], [50.5, 41190.0], [50.6, 41191.0], [50.7, 41191.0], [50.8, 41191.0], [50.9, 41194.0], [51.0, 41196.0], [51.1, 41197.0], [51.2, 41197.0], [51.3, 41199.0], [51.4, 41199.0], [51.5, 41200.0], [51.6, 41202.0], [51.7, 41203.0], [51.8, 41205.0], [51.9, 41206.0], [52.0, 41207.0], [52.1, 41208.0], [52.2, 41209.0], [52.3, 41210.0], [52.4, 41212.0], [52.5, 41221.0], [52.6, 41224.0], [52.7, 41229.0], [52.8, 41231.0], [52.9, 41233.0], [53.0, 41234.0], [53.1, 41234.0], [53.2, 41236.0], [53.3, 41237.0], [53.4, 41237.0], [53.5, 41237.0], [53.6, 41238.0], [53.7, 41239.0], [53.8, 41241.0], [53.9, 41244.0], [54.0, 41245.0], [54.1, 41249.0], [54.2, 41253.0], [54.3, 41253.0], [54.4, 41254.0], [54.5, 41257.0], [54.6, 41258.0], [54.7, 41258.0], [54.8, 41259.0], [54.9, 41260.0], [55.0, 41263.0], [55.1, 41270.0], [55.2, 41270.0], [55.3, 41270.0], [55.4, 41270.0], [55.5, 41272.0], [55.6, 41273.0], [55.7, 41275.0], [55.8, 41276.0], [55.9, 41277.0], [56.0, 41277.0], [56.1, 41280.0], [56.2, 41281.0], [56.3, 41282.0], [56.4, 41283.0], [56.5, 41286.0], [56.6, 41288.0], [56.7, 41289.0], [56.8, 41292.0], [56.9, 41293.0], [57.0, 41294.0], [57.1, 41302.0], [57.2, 41302.0], [57.3, 41303.0], [57.4, 41304.0], [57.5, 41304.0], [57.6, 41305.0], [57.7, 41305.0], [57.8, 41306.0], [57.9, 41308.0], [58.0, 41308.0], [58.1, 41309.0], [58.2, 41310.0], [58.3, 41311.0], [58.4, 41311.0], [58.5, 41312.0], [58.6, 41313.0], [58.7, 41313.0], [58.8, 41314.0], [58.9, 41315.0], [59.0, 41315.0], [59.1, 41316.0], [59.2, 41318.0], [59.3, 41320.0], [59.4, 41325.0], [59.5, 41326.0], [59.6, 41329.0], [59.7, 41330.0], [59.8, 41332.0], [59.9, 41334.0], [60.0, 41334.0], [60.1, 41335.0], [60.2, 41336.0], [60.3, 41337.0], [60.4, 41338.0], [60.5, 41339.0], [60.6, 41340.0], [60.7, 41341.0], [60.8, 41342.0], [60.9, 41344.0], [61.0, 41346.0], [61.1, 41349.0], [61.2, 41349.0], [61.3, 41350.0], [61.4, 41353.0], [61.5, 41354.0], [61.6, 41356.0], [61.7, 41356.0], [61.8, 41357.0], [61.9, 41360.0], [62.0, 41360.0], [62.1, 41362.0], [62.2, 41367.0], [62.3, 41367.0], [62.4, 41367.0], [62.5, 41368.0], [62.6, 41368.0], [62.7, 41369.0], [62.8, 41371.0], [62.9, 41374.0], [63.0, 41374.0], [63.1, 41377.0], [63.2, 41378.0], [63.3, 41379.0], [63.4, 41379.0], [63.5, 41380.0], [63.6, 41380.0], [63.7, 41382.0], [63.8, 41382.0], [63.9, 41383.0], [64.0, 41383.0], [64.1, 41388.0], [64.2, 41388.0], [64.3, 41389.0], [64.4, 41390.0], [64.5, 41399.0], [64.6, 41400.0], [64.7, 41400.0], [64.8, 41405.0], [64.9, 41406.0], [65.0, 41413.0], [65.1, 41414.0], [65.2, 41418.0], [65.3, 41419.0], [65.4, 41423.0], [65.5, 41427.0], [65.6, 41435.0], [65.7, 41437.0], [65.8, 41441.0], [65.9, 41445.0], [66.0, 41450.0], [66.1, 41450.0], [66.2, 41452.0], [66.3, 41454.0], [66.4, 41455.0], [66.5, 41455.0], [66.6, 41456.0], [66.7, 41459.0], [66.8, 41460.0], [66.9, 41461.0], [67.0, 41462.0], [67.1, 41463.0], [67.2, 41465.0], [67.3, 41465.0], [67.4, 41468.0], [67.5, 41468.0], [67.6, 41469.0], [67.7, 41475.0], [67.8, 41476.0], [67.9, 41477.0], [68.0, 41477.0], [68.1, 41481.0], [68.2, 41482.0], [68.3, 41484.0], [68.4, 41492.0], [68.5, 41497.0], [68.6, 41497.0], [68.7, 41497.0], [68.8, 41502.0], [68.9, 41503.0], [69.0, 41503.0], [69.1, 41507.0], [69.2, 41509.0], [69.3, 41509.0], [69.4, 41510.0], [69.5, 41514.0], [69.6, 41515.0], [69.7, 41515.0], [69.8, 41516.0], [69.9, 41517.0], [70.0, 41524.0], [70.1, 41528.0], [70.2, 41532.0], [70.3, 41535.0], [70.4, 41535.0], [70.5, 41535.0], [70.6, 41536.0], [70.7, 41541.0], [70.8, 41542.0], [70.9, 41548.0], [71.0, 41549.0], [71.1, 41549.0], [71.2, 41551.0], [71.3, 41551.0], [71.4, 41552.0], [71.5, 41553.0], [71.6, 41554.0], [71.7, 41554.0], [71.8, 41554.0], [71.9, 41560.0], [72.0, 41563.0], [72.1, 41565.0], [72.2, 41567.0], [72.3, 41568.0], [72.4, 41568.0], [72.5, 41569.0], [72.6, 41571.0], [72.7, 41571.0], [72.8, 41572.0], [72.9, 41572.0], [73.0, 41576.0], [73.1, 41579.0], [73.2, 41580.0], [73.3, 41586.0], [73.4, 41586.0], [73.5, 41587.0], [73.6, 41588.0], [73.7, 41589.0], [73.8, 41589.0], [73.9, 41590.0], [74.0, 41596.0], [74.1, 41597.0], [74.2, 41599.0], [74.3, 41600.0], [74.4, 41605.0], [74.5, 41606.0], [74.6, 41606.0], [74.7, 41607.0], [74.8, 41608.0], [74.9, 41609.0], [75.0, 41610.0], [75.1, 41614.0], [75.2, 41619.0], [75.3, 41620.0], [75.4, 41621.0], [75.5, 41625.0], [75.6, 41628.0], [75.7, 41631.0], [75.8, 41632.0], [75.9, 41633.0], [76.0, 41633.0], [76.1, 41636.0], [76.2, 41639.0], [76.3, 41639.0], [76.4, 41641.0], [76.5, 41643.0], [76.6, 41644.0], [76.7, 41646.0], [76.8, 41647.0], [76.9, 41647.0], [77.0, 41647.0], [77.1, 41648.0], [77.2, 41650.0], [77.3, 41653.0], [77.4, 41654.0], [77.5, 41655.0], [77.6, 41655.0], [77.7, 41655.0], [77.8, 41658.0], [77.9, 41658.0], [78.0, 41658.0], [78.1, 41659.0], [78.2, 41659.0], [78.3, 41661.0], [78.4, 41663.0], [78.5, 41663.0], [78.6, 41664.0], [78.7, 41664.0], [78.8, 41665.0], [78.9, 41665.0], [79.0, 41665.0], [79.1, 41665.0], [79.2, 41665.0], [79.3, 41666.0], [79.4, 41667.0], [79.5, 41667.0], [79.6, 41667.0], [79.7, 41667.0], [79.8, 41668.0], [79.9, 41668.0], [80.0, 41669.0], [80.1, 41670.0], [80.2, 41670.0], [80.3, 41671.0], [80.4, 41671.0], [80.5, 41672.0], [80.6, 41672.0], [80.7, 41673.0], [80.8, 41675.0], [80.9, 41675.0], [81.0, 41676.0], [81.1, 41678.0], [81.2, 41680.0], [81.3, 41681.0], [81.4, 41682.0], [81.5, 41683.0], [81.6, 41683.0], [81.7, 41684.0], [81.8, 41685.0], [81.9, 41685.0], [82.0, 41685.0], [82.1, 41688.0], [82.2, 41688.0], [82.3, 41690.0], [82.4, 41690.0], [82.5, 41691.0], [82.6, 41692.0], [82.7, 41692.0], [82.8, 41692.0], [82.9, 41692.0], [83.0, 41692.0], [83.1, 41693.0], [83.2, 41694.0], [83.3, 41696.0], [83.4, 41697.0], [83.5, 41700.0], [83.6, 41700.0], [83.7, 41701.0], [83.8, 41702.0], [83.9, 41702.0], [84.0, 41702.0], [84.1, 41704.0], [84.2, 41704.0], [84.3, 41707.0], [84.4, 41707.0], [84.5, 41709.0], [84.6, 41710.0], [84.7, 41711.0], [84.8, 41718.0], [84.9, 41721.0], [85.0, 41725.0], [85.1, 41729.0], [85.2, 41729.0], [85.3, 41730.0], [85.4, 41730.0], [85.5, 41732.0], [85.6, 41732.0], [85.7, 41733.0], [85.8, 41733.0], [85.9, 41734.0], [86.0, 41735.0], [86.1, 41736.0], [86.2, 41737.0], [86.3, 41739.0], [86.4, 41741.0], [86.5, 41741.0], [86.6, 41741.0], [86.7, 41746.0], [86.8, 41746.0], [86.9, 41746.0], [87.0, 41749.0], [87.1, 41750.0], [87.2, 41751.0], [87.3, 41753.0], [87.4, 41753.0], [87.5, 41754.0], [87.6, 41757.0], [87.7, 41758.0], [87.8, 41758.0], [87.9, 41759.0], [88.0, 41760.0], [88.1, 41762.0], [88.2, 41766.0], [88.3, 41766.0], [88.4, 41768.0], [88.5, 41768.0], [88.6, 41771.0], [88.7, 41773.0], [88.8, 41776.0], [88.9, 41776.0], [89.0, 41777.0], [89.1, 41778.0], [89.2, 41779.0], [89.3, 41780.0], [89.4, 41782.0], [89.5, 41783.0], [89.6, 41783.0], [89.7, 41784.0], [89.8, 41786.0], [89.9, 41790.0], [90.0, 41792.0], [90.1, 41793.0], [90.2, 41793.0], [90.3, 41794.0], [90.4, 41795.0], [90.5, 41802.0], [90.6, 41808.0], [90.7, 41808.0], [90.8, 41812.0], [90.9, 41813.0], [91.0, 41813.0], [91.1, 41827.0], [91.2, 41836.0], [91.3, 41841.0], [91.4, 41844.0], [91.5, 41853.0], [91.6, 41906.0], [91.7, 41938.0], [91.8, 41981.0], [91.9, 42045.0], [92.0, 42074.0], [92.1, 42131.0], [92.2, 42156.0], [92.3, 42217.0], [92.4, 42260.0], [92.5, 42286.0], [92.6, 42329.0], [92.7, 42390.0], [92.8, 42460.0], [92.9, 42473.0], [93.0, 42506.0], [93.1, 42556.0], [93.2, 42601.0], [93.3, 42606.0], [93.4, 42653.0], [93.5, 42730.0], [93.6, 42773.0], [93.7, 42836.0], [93.8, 42881.0], [93.9, 42920.0], [94.0, 42936.0], [94.1, 42978.0], [94.2, 43035.0], [94.3, 43065.0], [94.4, 43127.0], [94.5, 43150.0], [94.6, 43194.0], [94.7, 43292.0], [94.8, 43343.0], [94.9, 43381.0], [95.0, 43418.0], [95.1, 43457.0], [95.2, 43513.0], [95.3, 43537.0], [95.4, 43598.0], [95.5, 43627.0], [95.6, 43677.0], [95.7, 43712.0], [95.8, 43740.0], [95.9, 43799.0], [96.0, 43858.0], [96.1, 43894.0], [96.2, 43934.0], [96.3, 44019.0], [96.4, 44027.0], [96.5, 44084.0], [96.6, 44099.0], [96.7, 44201.0], [96.8, 44211.0], [96.9, 44238.0], [97.0, 44272.0], [97.1, 44316.0], [97.2, 44367.0], [97.3, 44411.0], [97.4, 44458.0], [97.5, 44491.0], [97.6, 44512.0], [97.7, 44560.0], [97.8, 44694.0], [97.9, 44694.0], [98.0, 44718.0], [98.1, 44792.0], [98.2, 44832.0], [98.3, 44880.0], [98.4, 44914.0], [98.5, 44957.0], [98.6, 44996.0], [98.7, 45035.0], [98.8, 45068.0], [98.9, 45109.0], [99.0, 45159.0], [99.1, 45203.0], [99.2, 45252.0], [99.3, 45291.0], [99.4, 45328.0], [99.5, 45392.0], [99.6, 45433.0], [99.7, 45472.0], [99.8, 45511.0], [99.9, 45568.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 2546.0], [0.1, 3142.0], [0.2, 3154.0], [0.3, 3154.0], [0.4, 3174.0], [0.5, 3187.0], [0.6, 3187.0], [0.7, 3189.0], [0.8, 3189.0], [0.9, 3191.0], [1.0, 3192.0], [1.1, 3192.0], [1.2, 3192.0], [1.3, 3192.0], [1.4, 3193.0], [1.5, 3193.0], [1.6, 3194.0], [1.7, 3194.0], [1.8, 3194.0], [1.9, 3194.0], [2.0, 3195.0], [2.1, 3195.0], [2.2, 3195.0], [2.3, 3196.0], [2.4, 3196.0], [2.5, 3197.0], [2.6, 3198.0], [2.7, 3198.0], [2.8, 3198.0], [2.9, 3199.0], [3.0, 3200.0], [3.1, 3200.0], [3.2, 3201.0], [3.3, 3201.0], [3.4, 3201.0], [3.5, 3201.0], [3.6, 3201.0], [3.7, 3202.0], [3.8, 3202.0], [3.9, 3202.0], [4.0, 3202.0], [4.1, 3202.0], [4.2, 3203.0], [4.3, 3203.0], [4.4, 3203.0], [4.5, 3203.0], [4.6, 3203.0], [4.7, 3203.0], [4.8, 3203.0], [4.9, 3203.0], [5.0, 3204.0], [5.1, 3204.0], [5.2, 3204.0], [5.3, 3205.0], [5.4, 3205.0], [5.5, 3205.0], [5.6, 3205.0], [5.7, 3205.0], [5.8, 3205.0], [5.9, 3206.0], [6.0, 3206.0], [6.1, 3206.0], [6.2, 3207.0], [6.3, 3207.0], [6.4, 3207.0], [6.5, 3207.0], [6.6, 3207.0], [6.7, 3207.0], [6.8, 3208.0], [6.9, 3208.0], [7.0, 3208.0], [7.1, 3208.0], [7.2, 3209.0], [7.3, 3209.0], [7.4, 3209.0], [7.5, 3209.0], [7.6, 3210.0], [7.7, 3210.0], [7.8, 3210.0], [7.9, 3211.0], [8.0, 3212.0], [8.1, 3214.0], [8.2, 3219.0], [8.3, 3225.0], [8.4, 3228.0], [8.5, 3229.0], [8.6, 3233.0], [8.7, 3235.0], [8.8, 3238.0], [8.9, 3240.0], [9.0, 3240.0], [9.1, 3241.0], [9.2, 3241.0], [9.3, 3241.0], [9.4, 3242.0], [9.5, 3242.0], [9.6, 3242.0], [9.7, 3243.0], [9.8, 3244.0], [9.9, 3245.0], [10.0, 3246.0], [10.1, 3246.0], [10.2, 3247.0], [10.3, 3249.0], [10.4, 3249.0], [10.5, 3249.0], [10.6, 3250.0], [10.7, 3250.0], [10.8, 3250.0], [10.9, 3251.0], [11.0, 3251.0], [11.1, 3252.0], [11.2, 3253.0], [11.3, 3253.0], [11.4, 3254.0], [11.5, 3256.0], [11.6, 3258.0], [11.7, 3259.0], [11.8, 3259.0], [11.9, 3260.0], [12.0, 3261.0], [12.1, 3261.0], [12.2, 3262.0], [12.3, 3263.0], [12.4, 3264.0], [12.5, 3266.0], [12.6, 3266.0], [12.7, 3267.0], [12.8, 3267.0], [12.9, 3269.0], [13.0, 3269.0], [13.1, 3270.0], [13.2, 3272.0], [13.3, 3273.0], [13.4, 3275.0], [13.5, 3276.0], [13.6, 3277.0], [13.7, 3279.0], [13.8, 3279.0], [13.9, 3280.0], [14.0, 3280.0], [14.1, 3281.0], [14.2, 3281.0], [14.3, 3281.0], [14.4, 3282.0], [14.5, 3282.0], [14.6, 3283.0], [14.7, 3283.0], [14.8, 3284.0], [14.9, 3284.0], [15.0, 3285.0], [15.1, 3285.0], [15.2, 3285.0], [15.3, 3286.0], [15.4, 3287.0], [15.5, 3287.0], [15.6, 3287.0], [15.7, 3287.0], [15.8, 3288.0], [15.9, 3288.0], [16.0, 3291.0], [16.1, 3293.0], [16.2, 3294.0], [16.3, 3297.0], [16.4, 3297.0], [16.5, 3297.0], [16.6, 3297.0], [16.7, 3298.0], [16.8, 3302.0], [16.9, 3304.0], [17.0, 3304.0], [17.1, 3308.0], [17.2, 3310.0], [17.3, 3317.0], [17.4, 3331.0], [17.5, 3332.0], [17.6, 3342.0], [17.7, 3342.0], [17.8, 3345.0], [17.9, 3351.0], [18.0, 3359.0], [18.1, 3443.0], [18.2, 3444.0], [18.3, 3444.0], [18.4, 3446.0], [18.5, 3448.0], [18.6, 3450.0], [18.7, 3450.0], [18.8, 3451.0], [18.9, 3453.0], [19.0, 3456.0], [19.1, 3457.0], [19.2, 3457.0], [19.3, 3459.0], [19.4, 3461.0], [19.5, 3462.0], [19.6, 3462.0], [19.7, 3462.0], [19.8, 3463.0], [19.9, 3468.0], [20.0, 3470.0], [20.1, 3471.0], [20.2, 3471.0], [20.3, 3472.0], [20.4, 3473.0], [20.5, 3475.0], [20.6, 3476.0], [20.7, 3477.0], [20.8, 3480.0], [20.9, 3481.0], [21.0, 3483.0], [21.1, 3484.0], [21.2, 3484.0], [21.3, 3487.0], [21.4, 3490.0], [21.5, 3490.0], [21.6, 3498.0], [21.7, 3501.0], [21.8, 3505.0], [21.9, 3506.0], [22.0, 3511.0], [22.1, 3511.0], [22.2, 3513.0], [22.3, 3513.0], [22.4, 3514.0], [22.5, 3788.0], [22.6, 7228.0], [22.7, 7232.0], [22.8, 7234.0], [22.9, 7234.0], [23.0, 7237.0], [23.1, 7237.0], [23.2, 7243.0], [23.3, 7243.0], [23.4, 7251.0], [23.5, 7251.0], [23.6, 7254.0], [23.7, 7255.0], [23.8, 7256.0], [23.9, 7258.0], [24.0, 7261.0], [24.1, 7262.0], [24.2, 7262.0], [24.3, 7263.0], [24.4, 7344.0], [24.5, 7347.0], [24.6, 7350.0], [24.7, 7355.0], [24.8, 7364.0], [24.9, 7367.0], [25.0, 7368.0], [25.1, 7369.0], [25.2, 7371.0], [25.3, 7372.0], [25.4, 7374.0], [25.5, 7376.0], [25.6, 7379.0], [25.7, 7387.0], [25.8, 7388.0], [25.9, 39290.0], [26.0, 39294.0], [26.1, 39298.0], [26.2, 39304.0], [26.3, 39312.0], [26.4, 39319.0], [26.5, 39324.0], [26.6, 39324.0], [26.7, 39325.0], [26.8, 39329.0], [26.9, 39331.0], [27.0, 39332.0], [27.1, 39335.0], [27.2, 39339.0], [27.3, 39346.0], [27.4, 39395.0], [27.5, 39460.0], [27.6, 39787.0], [27.7, 39789.0], [27.8, 39793.0], [27.9, 39795.0], [28.0, 39800.0], [28.1, 39803.0], [28.2, 39811.0], [28.3, 39811.0], [28.4, 39812.0], [28.5, 39812.0], [28.6, 39815.0], [28.7, 39826.0], [28.8, 39829.0], [28.9, 39830.0], [29.0, 39832.0], [29.1, 39833.0], [29.2, 39834.0], [29.3, 39839.0], [29.4, 39839.0], [29.5, 39841.0], [29.6, 39841.0], [29.7, 39842.0], [29.8, 39845.0], [29.9, 39850.0], [30.0, 39850.0], [30.1, 39855.0], [30.2, 39855.0], [30.3, 39858.0], [30.4, 39859.0], [30.5, 39860.0], [30.6, 39863.0], [30.7, 39865.0], [30.8, 39867.0], [30.9, 39868.0], [31.0, 39873.0], [31.1, 39880.0], [31.2, 39882.0], [31.3, 39883.0], [31.4, 39884.0], [31.5, 39885.0], [31.6, 39888.0], [31.7, 39890.0], [31.8, 39894.0], [31.9, 39895.0], [32.0, 39902.0], [32.1, 39906.0], [32.2, 39910.0], [32.3, 39912.0], [32.4, 39915.0], [32.5, 39920.0], [32.6, 39922.0], [32.7, 39924.0], [32.8, 39925.0], [32.9, 39927.0], [33.0, 39928.0], [33.1, 39929.0], [33.2, 39935.0], [33.3, 39942.0], [33.4, 39944.0], [33.5, 39946.0], [33.6, 39949.0], [33.7, 39954.0], [33.8, 39958.0], [33.9, 39961.0], [34.0, 39962.0], [34.1, 39972.0], [34.2, 39974.0], [34.3, 39992.0], [34.4, 40000.0], [34.5, 40022.0], [34.6, 40023.0], [34.7, 40025.0], [34.8, 40031.0], [34.9, 40039.0], [35.0, 40040.0], [35.1, 40069.0], [35.2, 40072.0], [35.3, 40079.0], [35.4, 40091.0], [35.5, 40091.0], [35.6, 40106.0], [35.7, 40132.0], [35.8, 40149.0], [35.9, 40151.0], [36.0, 40171.0], [36.1, 40179.0], [36.2, 40213.0], [36.3, 40214.0], [36.4, 40225.0], [36.5, 40334.0], [36.6, 40339.0], [36.7, 40347.0], [36.8, 40354.0], [36.9, 40375.0], [37.0, 40377.0], [37.1, 40419.0], [37.2, 40454.0], [37.3, 40454.0], [37.4, 40457.0], [37.5, 40495.0], [37.6, 40503.0], [37.7, 40514.0], [37.8, 40548.0], [37.9, 40601.0], [38.0, 40602.0], [38.1, 40608.0], [38.2, 40648.0], [38.3, 40659.0], [38.4, 40679.0], [38.5, 40685.0], [38.6, 40721.0], [38.7, 40723.0], [38.8, 40734.0], [38.9, 40748.0], [39.0, 40779.0], [39.1, 40782.0], [39.2, 40800.0], [39.3, 40800.0], [39.4, 40801.0], [39.5, 40801.0], [39.6, 40802.0], [39.7, 40804.0], [39.8, 40811.0], [39.9, 40811.0], [40.0, 40816.0], [40.1, 40820.0], [40.2, 40820.0], [40.3, 40823.0], [40.4, 40823.0], [40.5, 40828.0], [40.6, 40829.0], [40.7, 40831.0], [40.8, 40831.0], [40.9, 40832.0], [41.0, 40833.0], [41.1, 40833.0], [41.2, 40841.0], [41.3, 40844.0], [41.4, 40844.0], [41.5, 40846.0], [41.6, 40847.0], [41.7, 40849.0], [41.8, 40852.0], [41.9, 40855.0], [42.0, 40864.0], [42.1, 40878.0], [42.2, 40899.0], [42.3, 40900.0], [42.4, 40962.0], [42.5, 40975.0], [42.6, 40979.0], [42.7, 40994.0], [42.8, 40999.0], [42.9, 41000.0], [43.0, 41001.0], [43.1, 41010.0], [43.2, 41011.0], [43.3, 41024.0], [43.4, 41028.0], [43.5, 41032.0], [43.6, 41039.0], [43.7, 41040.0], [43.8, 41048.0], [43.9, 41050.0], [44.0, 41052.0], [44.1, 41055.0], [44.2, 41058.0], [44.3, 41062.0], [44.4, 41065.0], [44.5, 41066.0], [44.6, 41074.0], [44.7, 41075.0], [44.8, 41075.0], [44.9, 41075.0], [45.0, 41078.0], [45.1, 41083.0], [45.2, 41084.0], [45.3, 41087.0], [45.4, 41088.0], [45.5, 41091.0], [45.6, 41093.0], [45.7, 41096.0], [45.8, 41099.0], [45.9, 41106.0], [46.0, 41119.0], [46.1, 41120.0], [46.2, 41120.0], [46.3, 41123.0], [46.4, 41124.0], [46.5, 41125.0], [46.6, 41126.0], [46.7, 41129.0], [46.8, 41130.0], [46.9, 41131.0], [47.0, 41132.0], [47.1, 41133.0], [47.2, 41134.0], [47.3, 41138.0], [47.4, 41139.0], [47.5, 41140.0], [47.6, 41141.0], [47.7, 41141.0], [47.8, 41142.0], [47.9, 41144.0], [48.0, 41150.0], [48.1, 41151.0], [48.2, 41152.0], [48.3, 41152.0], [48.4, 41153.0], [48.5, 41153.0], [48.6, 41154.0], [48.7, 41155.0], [48.8, 41159.0], [48.9, 41161.0], [49.0, 41161.0], [49.1, 41162.0], [49.2, 41162.0], [49.3, 41170.0], [49.4, 41172.0], [49.5, 41176.0], [49.6, 41176.0], [49.7, 41177.0], [49.8, 41178.0], [49.9, 41179.0], [50.0, 41186.0], [50.1, 41187.0], [50.2, 41188.0], [50.3, 41189.0], [50.4, 41190.0], [50.5, 41190.0], [50.6, 41191.0], [50.7, 41191.0], [50.8, 41191.0], [50.9, 41194.0], [51.0, 41196.0], [51.1, 41197.0], [51.2, 41197.0], [51.3, 41199.0], [51.4, 41199.0], [51.5, 41200.0], [51.6, 41202.0], [51.7, 41203.0], [51.8, 41205.0], [51.9, 41206.0], [52.0, 41207.0], [52.1, 41208.0], [52.2, 41209.0], [52.3, 41210.0], [52.4, 41212.0], [52.5, 41221.0], [52.6, 41224.0], [52.7, 41229.0], [52.8, 41231.0], [52.9, 41233.0], [53.0, 41234.0], [53.1, 41234.0], [53.2, 41236.0], [53.3, 41237.0], [53.4, 41237.0], [53.5, 41237.0], [53.6, 41238.0], [53.7, 41239.0], [53.8, 41241.0], [53.9, 41244.0], [54.0, 41245.0], [54.1, 41249.0], [54.2, 41253.0], [54.3, 41253.0], [54.4, 41254.0], [54.5, 41257.0], [54.6, 41258.0], [54.7, 41258.0], [54.8, 41259.0], [54.9, 41260.0], [55.0, 41263.0], [55.1, 41270.0], [55.2, 41270.0], [55.3, 41270.0], [55.4, 41270.0], [55.5, 41272.0], [55.6, 41273.0], [55.7, 41275.0], [55.8, 41276.0], [55.9, 41277.0], [56.0, 41277.0], [56.1, 41280.0], [56.2, 41281.0], [56.3, 41282.0], [56.4, 41283.0], [56.5, 41286.0], [56.6, 41288.0], [56.7, 41289.0], [56.8, 41292.0], [56.9, 41293.0], [57.0, 41294.0], [57.1, 41302.0], [57.2, 41302.0], [57.3, 41303.0], [57.4, 41304.0], [57.5, 41304.0], [57.6, 41305.0], [57.7, 41305.0], [57.8, 41306.0], [57.9, 41308.0], [58.0, 41308.0], [58.1, 41309.0], [58.2, 41310.0], [58.3, 41311.0], [58.4, 41311.0], [58.5, 41312.0], [58.6, 41313.0], [58.7, 41313.0], [58.8, 41314.0], [58.9, 41315.0], [59.0, 41315.0], [59.1, 41316.0], [59.2, 41318.0], [59.3, 41320.0], [59.4, 41325.0], [59.5, 41326.0], [59.6, 41329.0], [59.7, 41330.0], [59.8, 41332.0], [59.9, 41334.0], [60.0, 41334.0], [60.1, 41335.0], [60.2, 41336.0], [60.3, 41337.0], [60.4, 41338.0], [60.5, 41339.0], [60.6, 41340.0], [60.7, 41341.0], [60.8, 41342.0], [60.9, 41344.0], [61.0, 41346.0], [61.1, 41349.0], [61.2, 41349.0], [61.3, 41350.0], [61.4, 41353.0], [61.5, 41354.0], [61.6, 41356.0], [61.7, 41356.0], [61.8, 41357.0], [61.9, 41360.0], [62.0, 41360.0], [62.1, 41362.0], [62.2, 41367.0], [62.3, 41367.0], [62.4, 41367.0], [62.5, 41368.0], [62.6, 41368.0], [62.7, 41369.0], [62.8, 41371.0], [62.9, 41374.0], [63.0, 41374.0], [63.1, 41377.0], [63.2, 41378.0], [63.3, 41379.0], [63.4, 41379.0], [63.5, 41380.0], [63.6, 41380.0], [63.7, 41382.0], [63.8, 41382.0], [63.9, 41383.0], [64.0, 41383.0], [64.1, 41388.0], [64.2, 41388.0], [64.3, 41389.0], [64.4, 41390.0], [64.5, 41399.0], [64.6, 41400.0], [64.7, 41400.0], [64.8, 41405.0], [64.9, 41406.0], [65.0, 41413.0], [65.1, 41414.0], [65.2, 41418.0], [65.3, 41419.0], [65.4, 41423.0], [65.5, 41427.0], [65.6, 41435.0], [65.7, 41437.0], [65.8, 41441.0], [65.9, 41445.0], [66.0, 41450.0], [66.1, 41450.0], [66.2, 41452.0], [66.3, 41454.0], [66.4, 41455.0], [66.5, 41455.0], [66.6, 41456.0], [66.7, 41459.0], [66.8, 41460.0], [66.9, 41461.0], [67.0, 41462.0], [67.1, 41463.0], [67.2, 41465.0], [67.3, 41465.0], [67.4, 41468.0], [67.5, 41468.0], [67.6, 41469.0], [67.7, 41475.0], [67.8, 41476.0], [67.9, 41477.0], [68.0, 41477.0], [68.1, 41481.0], [68.2, 41482.0], [68.3, 41484.0], [68.4, 41492.0], [68.5, 41497.0], [68.6, 41497.0], [68.7, 41497.0], [68.8, 41502.0], [68.9, 41503.0], [69.0, 41503.0], [69.1, 41507.0], [69.2, 41509.0], [69.3, 41509.0], [69.4, 41510.0], [69.5, 41514.0], [69.6, 41515.0], [69.7, 41515.0], [69.8, 41516.0], [69.9, 41517.0], [70.0, 41524.0], [70.1, 41528.0], [70.2, 41532.0], [70.3, 41535.0], [70.4, 41535.0], [70.5, 41535.0], [70.6, 41536.0], [70.7, 41541.0], [70.8, 41542.0], [70.9, 41548.0], [71.0, 41549.0], [71.1, 41549.0], [71.2, 41551.0], [71.3, 41551.0], [71.4, 41552.0], [71.5, 41553.0], [71.6, 41554.0], [71.7, 41554.0], [71.8, 41554.0], [71.9, 41560.0], [72.0, 41563.0], [72.1, 41565.0], [72.2, 41567.0], [72.3, 41568.0], [72.4, 41568.0], [72.5, 41569.0], [72.6, 41571.0], [72.7, 41571.0], [72.8, 41572.0], [72.9, 41572.0], [73.0, 41576.0], [73.1, 41579.0], [73.2, 41580.0], [73.3, 41586.0], [73.4, 41586.0], [73.5, 41587.0], [73.6, 41588.0], [73.7, 41589.0], [73.8, 41589.0], [73.9, 41590.0], [74.0, 41596.0], [74.1, 41597.0], [74.2, 41599.0], [74.3, 41600.0], [74.4, 41605.0], [74.5, 41606.0], [74.6, 41606.0], [74.7, 41607.0], [74.8, 41608.0], [74.9, 41609.0], [75.0, 41610.0], [75.1, 41614.0], [75.2, 41619.0], [75.3, 41620.0], [75.4, 41621.0], [75.5, 41625.0], [75.6, 41628.0], [75.7, 41631.0], [75.8, 41632.0], [75.9, 41633.0], [76.0, 41633.0], [76.1, 41636.0], [76.2, 41639.0], [76.3, 41639.0], [76.4, 41641.0], [76.5, 41643.0], [76.6, 41644.0], [76.7, 41646.0], [76.8, 41647.0], [76.9, 41647.0], [77.0, 41647.0], [77.1, 41648.0], [77.2, 41650.0], [77.3, 41653.0], [77.4, 41654.0], [77.5, 41655.0], [77.6, 41655.0], [77.7, 41655.0], [77.8, 41658.0], [77.9, 41658.0], [78.0, 41658.0], [78.1, 41659.0], [78.2, 41659.0], [78.3, 41661.0], [78.4, 41663.0], [78.5, 41663.0], [78.6, 41664.0], [78.7, 41664.0], [78.8, 41665.0], [78.9, 41665.0], [79.0, 41665.0], [79.1, 41665.0], [79.2, 41665.0], [79.3, 41666.0], [79.4, 41667.0], [79.5, 41667.0], [79.6, 41667.0], [79.7, 41667.0], [79.8, 41668.0], [79.9, 41668.0], [80.0, 41669.0], [80.1, 41670.0], [80.2, 41670.0], [80.3, 41671.0], [80.4, 41671.0], [80.5, 41672.0], [80.6, 41672.0], [80.7, 41673.0], [80.8, 41675.0], [80.9, 41675.0], [81.0, 41676.0], [81.1, 41678.0], [81.2, 41680.0], [81.3, 41681.0], [81.4, 41682.0], [81.5, 41683.0], [81.6, 41683.0], [81.7, 41684.0], [81.8, 41685.0], [81.9, 41685.0], [82.0, 41685.0], [82.1, 41688.0], [82.2, 41688.0], [82.3, 41690.0], [82.4, 41690.0], [82.5, 41691.0], [82.6, 41692.0], [82.7, 41692.0], [82.8, 41692.0], [82.9, 41692.0], [83.0, 41692.0], [83.1, 41693.0], [83.2, 41694.0], [83.3, 41696.0], [83.4, 41697.0], [83.5, 41700.0], [83.6, 41700.0], [83.7, 41701.0], [83.8, 41702.0], [83.9, 41702.0], [84.0, 41702.0], [84.1, 41704.0], [84.2, 41704.0], [84.3, 41707.0], [84.4, 41707.0], [84.5, 41709.0], [84.6, 41710.0], [84.7, 41711.0], [84.8, 41718.0], [84.9, 41721.0], [85.0, 41725.0], [85.1, 41729.0], [85.2, 41729.0], [85.3, 41730.0], [85.4, 41730.0], [85.5, 41732.0], [85.6, 41732.0], [85.7, 41733.0], [85.8, 41733.0], [85.9, 41734.0], [86.0, 41735.0], [86.1, 41736.0], [86.2, 41737.0], [86.3, 41739.0], [86.4, 41741.0], [86.5, 41741.0], [86.6, 41741.0], [86.7, 41746.0], [86.8, 41746.0], [86.9, 41746.0], [87.0, 41749.0], [87.1, 41750.0], [87.2, 41751.0], [87.3, 41753.0], [87.4, 41753.0], [87.5, 41754.0], [87.6, 41757.0], [87.7, 41758.0], [87.8, 41758.0], [87.9, 41759.0], [88.0, 41760.0], [88.1, 41762.0], [88.2, 41766.0], [88.3, 41766.0], [88.4, 41768.0], [88.5, 41768.0], [88.6, 41771.0], [88.7, 41773.0], [88.8, 41776.0], [88.9, 41776.0], [89.0, 41777.0], [89.1, 41778.0], [89.2, 41779.0], [89.3, 41780.0], [89.4, 41782.0], [89.5, 41783.0], [89.6, 41783.0], [89.7, 41784.0], [89.8, 41786.0], [89.9, 41790.0], [90.0, 41792.0], [90.1, 41793.0], [90.2, 41793.0], [90.3, 41794.0], [90.4, 41795.0], [90.5, 41802.0], [90.6, 41808.0], [90.7, 41808.0], [90.8, 41812.0], [90.9, 41813.0], [91.0, 41813.0], [91.1, 41827.0], [91.2, 41836.0], [91.3, 41841.0], [91.4, 41844.0], [91.5, 41853.0], [91.6, 41906.0], [91.7, 41938.0], [91.8, 41981.0], [91.9, 42045.0], [92.0, 42074.0], [92.1, 42131.0], [92.2, 42156.0], [92.3, 42217.0], [92.4, 42260.0], [92.5, 42286.0], [92.6, 42329.0], [92.7, 42390.0], [92.8, 42460.0], [92.9, 42473.0], [93.0, 42506.0], [93.1, 42556.0], [93.2, 42601.0], [93.3, 42606.0], [93.4, 42653.0], [93.5, 42730.0], [93.6, 42773.0], [93.7, 42836.0], [93.8, 42881.0], [93.9, 42920.0], [94.0, 42936.0], [94.1, 42978.0], [94.2, 43035.0], [94.3, 43065.0], [94.4, 43127.0], [94.5, 43150.0], [94.6, 43194.0], [94.7, 43292.0], [94.8, 43343.0], [94.9, 43381.0], [95.0, 43418.0], [95.1, 43457.0], [95.2, 43513.0], [95.3, 43537.0], [95.4, 43598.0], [95.5, 43627.0], [95.6, 43677.0], [95.7, 43712.0], [95.8, 43740.0], [95.9, 43799.0], [96.0, 43858.0], [96.1, 43894.0], [96.2, 43934.0], [96.3, 44019.0], [96.4, 44027.0], [96.5, 44084.0], [96.6, 44099.0], [96.7, 44201.0], [96.8, 44211.0], [96.9, 44238.0], [97.0, 44272.0], [97.1, 44316.0], [97.2, 44367.0], [97.3, 44411.0], [97.4, 44458.0], [97.5, 44491.0], [97.6, 44512.0], [97.7, 44560.0], [97.8, 44694.0], [97.9, 44694.0], [98.0, 44718.0], [98.1, 44792.0], [98.2, 44832.0], [98.3, 44880.0], [98.4, 44914.0], [98.5, 44957.0], [98.6, 44996.0], [98.7, 45035.0], [98.8, 45068.0], [98.9, 45109.0], [99.0, 45159.0], [99.1, 45203.0], [99.2, 45252.0], [99.3, 45291.0], [99.4, 45328.0], [99.5, 45392.0], [99.6, 45433.0], [99.7, 45472.0], [99.8, 45511.0], [99.9, 45568.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2500.0, "maxY": 138.0, "series": [{"data": [[2500.0, 1.0], [3100.0, 29.0], [3200.0, 138.0], [3300.0, 13.0], [3400.0, 35.0], [3500.0, 8.0], [3700.0, 1.0], [7200.0, 18.0], [7300.0, 15.0], [39300.0, 13.0], [39200.0, 3.0], [39400.0, 1.0], [39700.0, 4.0], [39800.0, 40.0], [39900.0, 24.0], [40000.0, 12.0], [40900.0, 6.0], [40700.0, 6.0], [40800.0, 31.0], [40500.0, 3.0], [40600.0, 7.0], [40100.0, 6.0], [40200.0, 3.0], [40300.0, 6.0], [40400.0, 5.0], [41300.0, 75.0], [41800.0, 11.0], [41100.0, 56.0], [41000.0, 30.0], [41900.0, 3.0], [41200.0, 56.0], [41400.0, 42.0], [42500.0, 2.0], [42600.0, 3.0], [42700.0, 2.0], [42800.0, 2.0], [42900.0, 3.0], [43000.0, 2.0], [42000.0, 2.0], [42100.0, 2.0], [42200.0, 3.0], [42300.0, 2.0], [42400.0, 2.0], [41500.0, 55.0], [41600.0, 92.0], [41700.0, 71.0], [43900.0, 1.0], [43200.0, 1.0], [43100.0, 3.0], [44000.0, 4.0], [43300.0, 2.0], [43400.0, 2.0], [43500.0, 3.0], [44600.0, 2.0], [44700.0, 2.0], [44800.0, 2.0], [44900.0, 3.0], [45000.0, 2.0], [44200.0, 4.0], [44300.0, 2.0], [44400.0, 3.0], [44500.0, 2.0], [43600.0, 2.0], [43700.0, 3.0], [43800.0, 2.0], [45100.0, 2.0], [45200.0, 3.0], [45300.0, 2.0], [45400.0, 2.0], [45500.0, 2.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[2500.0, 1.0], [3100.0, 29.0], [3200.0, 138.0], [3300.0, 13.0], [3400.0, 35.0], [3500.0, 8.0], [3700.0, 1.0], [7200.0, 18.0], [7300.0, 15.0], [39300.0, 13.0], [39200.0, 3.0], [39400.0, 1.0], [39700.0, 4.0], [39800.0, 40.0], [39900.0, 24.0], [40000.0, 12.0], [40900.0, 6.0], [40700.0, 6.0], [40800.0, 31.0], [40500.0, 3.0], [40600.0, 7.0], [40100.0, 6.0], [40200.0, 3.0], [40300.0, 6.0], [40400.0, 5.0], [41300.0, 75.0], [41800.0, 11.0], [41100.0, 56.0], [41000.0, 30.0], [41900.0, 3.0], [41200.0, 56.0], [41400.0, 42.0], [42500.0, 2.0], [42600.0, 3.0], [42700.0, 2.0], [42800.0, 2.0], [42900.0, 3.0], [43000.0, 2.0], [42000.0, 2.0], [42100.0, 2.0], [42200.0, 3.0], [42300.0, 2.0], [42400.0, 2.0], [41500.0, 55.0], [41600.0, 92.0], [41700.0, 71.0], [43900.0, 1.0], [43200.0, 1.0], [43100.0, 3.0], [44000.0, 4.0], [43300.0, 2.0], [43400.0, 2.0], [43500.0, 3.0], [44600.0, 2.0], [44700.0, 2.0], [44800.0, 2.0], [44900.0, 3.0], [45000.0, 2.0], [44200.0, 4.0], [44300.0, 2.0], [44400.0, 3.0], [44500.0, 2.0], [43600.0, 2.0], [43700.0, 3.0], [43800.0, 2.0], [45100.0, 2.0], [45200.0, 3.0], [45300.0, 2.0], [45400.0, 2.0], [45500.0, 2.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 45500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 258.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 742.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 742.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 258.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 22.53333333333333, "minX": 1.68042708E12, "maxY": 513.4475703324784, "series": [{"data": [[1.68042714E12, 22.53333333333333], [1.68042708E12, 513.4475703324784]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042714E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2546.0, "minX": 1.0, "maxY": 45568.0, "series": [{"data": [[2.0, 45511.0], [3.0, 45472.0], [4.0, 45433.0], [5.0, 45392.0], [6.0, 45328.0], [7.0, 45291.0], [8.0, 45252.0], [9.0, 45203.0], [10.0, 45159.0], [11.0, 45109.0], [12.0, 45068.0], [13.0, 45035.0], [14.0, 44996.0], [15.0, 44957.0], [16.0, 44914.0], [17.0, 44880.0], [18.0, 44832.0], [19.0, 44792.0], [20.0, 44718.0], [21.0, 44694.0], [22.0, 44694.0], [23.0, 44512.0], [24.0, 44560.0], [25.0, 44491.0], [26.0, 44458.0], [27.0, 44411.0], [28.0, 44367.0], [29.0, 44316.0], [30.0, 44272.0], [31.0, 44238.0], [33.0, 44206.0], [35.0, 44084.0], [34.0, 44099.0], [37.0, 44019.0], [36.0, 44027.0], [39.0, 43894.0], [38.0, 43934.0], [41.0, 43799.0], [40.0, 43858.0], [43.0, 43712.0], [42.0, 43740.0], [45.0, 43627.0], [44.0, 43677.0], [47.0, 43537.0], [46.0, 43598.0], [49.0, 43457.0], [48.0, 43513.0], [51.0, 43381.0], [50.0, 43418.0], [53.0, 43292.0], [52.0, 43343.0], [55.0, 43150.0], [54.0, 43194.0], [57.0, 43065.0], [56.0, 43127.0], [59.0, 42978.0], [58.0, 43035.0], [61.0, 42920.0], [60.0, 42936.0], [63.0, 42836.0], [62.0, 42881.0], [67.0, 42606.0], [66.0, 42653.0], [65.0, 42730.0], [64.0, 42773.0], [70.0, 42506.0], [69.0, 42556.0], [68.0, 42601.0], [75.0, 42286.0], [74.0, 42413.0], [79.0, 42131.0], [78.0, 42156.0], [77.0, 42217.0], [76.0, 42260.0], [83.0, 41938.0], [82.0, 41981.0], [81.0, 42045.0], [80.0, 42074.0], [85.0, 41853.0], [84.0, 41906.0], [94.0, 41783.0], [93.0, 41808.0], [92.0, 41826.571428571435], [99.0, 41784.5], [97.0, 41794.333333333336], [103.0, 41758.0], [102.0, 41759.0], [101.0, 41786.0], [100.0, 41802.0], [107.0, 41793.0], [105.0, 41795.0], [104.0, 41778.0], [111.0, 41784.0], [110.0, 41776.0], [109.0, 41777.0], [108.0, 41783.0], [115.0, 41767.5], [113.0, 41771.0], [112.0, 41780.0], [119.0, 41779.0], [118.0, 41790.0], [117.0, 41766.0], [116.0, 41768.0], [123.0, 41758.0], [122.0, 41768.0], [121.0, 41753.0], [120.0, 41730.0], [127.0, 41753.0], [126.0, 41763.0], [124.0, 41757.0], [134.0, 41744.5], [132.0, 41751.0], [131.0, 41746.0], [130.0, 41746.0], [129.0, 41752.0], [142.0, 41735.0], [141.0, 41737.0], [140.0, 41736.0], [139.0, 41746.0], [138.0, 41745.0], [137.0, 41739.0], [136.0, 41721.5], [150.0, 41729.0], [149.0, 41732.0], [148.0, 41729.0], [147.0, 41702.0], [146.0, 41721.0], [145.0, 41730.0], [144.0, 41732.5], [157.0, 41741.0], [156.0, 41703.5], [154.0, 41717.0], [152.0, 41722.5], [167.0, 41691.666666666664], [164.0, 41692.0], [163.0, 41688.0], [162.0, 41707.0], [161.0, 41704.0], [160.0, 41711.666666666664], [174.0, 41682.0], [173.0, 41693.0], [171.0, 41692.0], [170.0, 41675.0], [169.0, 41659.0], [168.0, 41701.0], [183.0, 41690.0], [182.0, 41690.25], [178.0, 41703.666666666664], [177.0, 41684.0], [191.0, 41684.75], [187.0, 41682.5], [185.0, 41688.0], [184.0, 41661.0], [198.0, 41671.0], [197.0, 41672.0], [196.0, 41673.0], [195.0, 41653.0], [194.0, 41678.0], [193.0, 41684.0], [200.0, 41668.0], [222.0, 41668.0], [221.0, 41661.049999999996], [217.0, 41668.0], [231.0, 41632.0], [230.0, 41639.0], [229.0, 41664.0], [228.0, 41665.0], [227.0, 41665.0], [226.0, 41667.0], [225.0, 41667.0], [224.0, 41662.0], [235.0, 41633.0], [234.0, 41641.0], [233.0, 41589.0], [232.0, 41658.0], [247.0, 41647.0], [246.0, 41620.5], [244.0, 41631.0], [243.0, 41636.0], [242.0, 41655.0], [241.0, 41643.333333333336], [255.0, 41607.5], [253.0, 41605.5], [251.0, 41619.0], [250.0, 41626.5], [248.0, 41643.0], [268.0, 41590.0], [270.0, 41565.0], [271.0, 41580.0], [269.0, 41568.0], [267.0, 41596.5], [265.0, 41587.0], [262.0, 41599.0], [258.0, 41610.0], [257.0, 41599.0], [261.0, 41600.0], [260.0, 41596.0], [280.0, 41564.666666666664], [287.0, 41560.5], [283.0, 41552.0], [282.0, 41572.0], [281.0, 41554.0], [277.0, 41576.0], [276.0, 41560.0], [275.0, 41565.5], [273.0, 41572.0], [272.0, 41579.0], [301.0, 41532.0], [302.0, 41516.0], [300.0, 41536.0], [299.0, 41528.0], [298.0, 41535.0], [297.0, 41524.0], [296.0, 41554.0], [295.0, 41542.71428571428], [288.0, 41551.0], [307.0, 41507.0], [317.0, 41517.0], [319.0, 41491.0], [316.0, 41509.0], [315.0, 41501.0], [312.0, 41506.0], [310.0, 41502.5], [308.0, 41503.0], [306.0, 41468.0], [305.0, 41510.0], [304.0, 41496.0], [335.0, 41441.0], [334.0, 41461.5], [332.0, 41435.0], [331.0, 41464.0], [329.0, 41469.0], [328.0, 41473.857142857145], [321.0, 41481.0], [320.0, 41484.0], [351.0, 41390.0], [350.0, 41427.333333333336], [339.0, 41459.0], [338.0, 41456.0], [337.0, 41465.0], [336.0, 41437.0], [347.0, 41450.0], [346.0, 41423.0], [345.0, 41400.0], [344.0, 41450.0], [343.0, 41439.5], [341.0, 41455.0], [340.0, 41454.0], [366.0, 41380.0], [367.0, 41388.0], [365.0, 41377.0], [364.0, 41383.0], [363.0, 41389.0], [362.0, 41382.5], [360.0, 41388.0], [359.0, 41374.0], [352.0, 41413.0], [355.0, 41393.5], [353.0, 41406.0], [358.0, 41399.0], [357.0, 41414.0], [356.0, 41400.0], [383.0, 41360.0], [382.0, 41360.0], [381.0, 41356.0], [380.0, 41370.0], [371.0, 41379.0], [370.0, 41350.0], [369.0, 41378.0], [368.0, 41380.0], [398.0, 41336.0], [399.0, 41335.0], [397.0, 41338.0], [396.0, 41340.0], [395.0, 41339.0], [394.0, 41341.0], [393.0, 41342.0], [392.0, 41344.0], [391.0, 41346.0], [385.0, 41359.0], [387.0, 41357.0], [386.0, 41354.0], [390.0, 41349.0], [389.0, 41349.0], [388.0, 41353.0], [414.0, 41313.0], [415.0, 41311.0], [413.0, 41316.0], [412.0, 41313.0], [411.0, 41314.0], [410.0, 41315.0], [409.0, 41318.0], [408.0, 41320.0], [407.0, 41325.0], [401.0, 41337.0], [400.0, 41334.0], [403.0, 41334.0], [402.0, 41332.0], [406.0, 41329.0], [405.0, 41330.0], [404.0, 41326.0], [431.0, 41303.87499999999], [428.0, 41300.0], [421.0, 41309.0], [420.0, 41310.0], [419.0, 41311.0], [418.0, 41308.0], [416.0, 41312.0], [446.0, 41253.0], [447.0, 41272.0], [445.0, 41275.0], [444.0, 41280.0], [443.0, 41286.0], [442.0, 41289.0], [441.0, 41275.5], [439.0, 41270.0], [433.0, 41270.0], [432.0, 41282.0], [435.0, 41292.0], [434.0, 41277.0], [438.0, 41283.0], [437.0, 41282.0], [462.0, 41241.0], [463.0, 41239.0], [461.0, 41253.0], [460.0, 41249.0], [459.0, 41237.0], [458.0, 41254.0], [457.0, 41258.0], [456.0, 41260.0], [455.0, 41258.0], [449.0, 41277.0], [448.0, 41257.0], [451.0, 41273.0], [450.0, 41270.0], [454.0, 41236.0], [453.0, 41261.0], [478.0, 41197.0], [479.0, 41196.0], [477.0, 41234.0], [476.0, 41204.5], [474.0, 41202.0], [473.0, 41245.0], [472.0, 41273.0], [470.0, 41231.0], [465.0, 41237.5], [467.0, 41224.0], [466.0, 41234.0], [469.0, 41221.0], [468.0, 41233.0], [494.0, 41229.0], [495.0, 41205.0], [493.0, 41187.0], [492.0, 41170.0], [491.0, 41176.0], [490.0, 41224.5], [488.0, 41190.0], [487.0, 41208.0], [480.0, 41194.0], [483.0, 41190.0], [481.0, 41191.0], [486.0, 41178.0], [485.0, 41188.0], [484.0, 41206.0], [510.0, 41179.0], [511.0, 41177.0], [509.0, 41139.0], [508.0, 41162.0], [507.0, 41200.0], [506.0, 41162.0], [505.0, 41180.5], [503.0, 41190.0], [497.0, 41201.0], [499.0, 41159.0], [498.0, 41197.0], [502.0, 41199.0], [500.0, 41161.0], [538.0, 41125.0], [532.0, 41096.0], [539.0, 41124.0], [529.0, 41147.0], [537.0, 41088.0], [536.0, 41151.0], [523.0, 41155.0], [512.0, 41142.0], [514.0, 41144.0], [513.0, 41150.0], [519.0, 41186.0], [518.0, 41144.5], [522.0, 41123.0], [521.0, 41119.0], [520.0, 41129.0], [535.0, 41130.0], [534.0, 41131.0], [533.0, 41138.0], [531.0, 41161.0], [530.0, 41140.0], [572.0, 41000.0], [575.0, 41028.0], [561.0, 41062.0], [560.0, 41058.0], [563.0, 41024.0], [562.0, 41074.0], [565.0, 41010.0], [564.0, 41075.0], [574.0, 40975.0], [573.0, 41011.0], [571.0, 40994.0], [570.0, 40999.0], [569.0, 41001.0], [568.0, 41091.0], [559.0, 41040.0], [546.0, 41090.5], [544.0, 41110.2], [548.0, 41120.0], [547.0, 41065.0], [551.0, 41087.0], [550.0, 41117.5], [558.0, 41039.0], [557.0, 41055.0], [556.0, 41076.5], [554.0, 41049.0], [552.0, 41052.0], [567.0, 41032.0], [566.0, 41066.0], [604.0, 40829.0], [607.0, 40811.0], [593.0, 40846.0], [592.0, 40841.0], [595.0, 40820.0], [594.0, 40800.0], [597.0, 40816.0], [596.0, 40844.0], [606.0, 40852.0], [605.0, 40801.0], [603.0, 40831.0], [602.0, 40833.0], [601.0, 40811.0], [600.0, 40833.0], [591.0, 40847.0], [576.0, 40979.0], [578.0, 40878.0], [577.0, 40962.0], [580.0, 40823.0], [579.0, 40900.0], [590.0, 40801.0], [589.0, 40849.0], [588.0, 40828.0], [587.0, 40855.0], [586.0, 40823.0], [585.0, 40832.0], [584.0, 40852.25], [599.0, 40779.0], [598.0, 40820.0], [636.0, 40334.0], [639.0, 40225.0], [625.0, 40514.0], [624.0, 40503.0], [627.0, 40454.0], [626.0, 40495.0], [629.0, 40457.0], [628.0, 40454.0], [638.0, 40171.0], [637.0, 40213.0], [635.0, 40339.0], [634.0, 40354.0], [633.0, 40347.0], [632.0, 40377.0], [623.0, 40548.0], [608.0, 40800.0], [610.0, 40804.0], [609.0, 40782.0], [612.0, 40831.0], [611.0, 40748.0], [614.0, 40734.0], [613.0, 40723.0], [622.0, 40605.0], [620.0, 40679.0], [619.0, 40648.0], [618.0, 40601.0], [617.0, 40685.0], [616.0, 40690.0], [631.0, 40375.0], [630.0, 40419.0], [670.0, 39933.75], [660.0, 39962.0], [671.0, 39922.0], [657.0, 39992.0], [656.0, 40023.0], [659.0, 40000.0], [658.0, 39972.0], [666.0, 39925.0], [665.0, 39974.0], [664.0, 39961.0], [647.0, 40072.0], [646.0, 40106.0], [645.0, 40091.0], [644.0, 40132.0], [643.0, 40149.0], [642.0, 40214.0], [641.0, 40151.0], [640.0, 40179.0], [655.0, 40025.0], [654.0, 40069.0], [653.0, 40039.0], [652.0, 40022.0], [651.0, 40031.0], [650.0, 40091.0], [649.0, 40040.0], [648.0, 40079.0], [663.0, 39954.0], [662.0, 39946.0], [661.0, 39928.0], [702.0, 39847.0], [691.0, 39884.0], [703.0, 39826.0], [688.0, 39874.5], [690.0, 39845.0], [689.0, 39868.0], [700.0, 39884.0], [698.0, 39850.0], [696.0, 39855.0], [678.0, 39927.0], [676.0, 39944.0], [675.0, 39883.0], [674.0, 39949.0], [673.0, 39924.0], [672.0, 39920.0], [686.0, 39873.0], [685.0, 39863.0], [684.0, 39882.0], [683.0, 39890.0], [681.0, 39906.0], [680.0, 39902.0], [695.0, 39902.0], [694.0, 39862.5], [692.0, 39858.0], [729.0, 39329.0], [734.0, 39324.0], [735.0, 39325.0], [721.0, 39793.0], [720.0, 39795.0], [723.0, 39812.0], [722.0, 39789.0], [725.0, 39787.0], [724.0, 39880.0], [733.0, 39333.0], [731.0, 39332.0], [730.0, 39339.0], [728.0, 39346.0], [708.0, 39854.5], [706.0, 39833.0], [705.0, 39834.0], [704.0, 39829.0], [719.0, 39888.0], [718.0, 39811.0], [716.0, 39803.0], [715.0, 39815.0], [714.0, 39800.0], [713.0, 39831.5], [712.0, 39830.0], [727.0, 39395.0], [726.0, 39460.0], [761.0, 7251.0], [766.0, 7251.0], [767.0, 7262.0], [753.0, 7362.666666666667], [765.0, 7263.0], [764.0, 7237.0], [763.0, 7252.0], [750.0, 7372.0], [736.0, 39324.0], [738.0, 39312.0], [737.0, 39319.0], [740.0, 39298.0], [739.0, 39304.0], [743.0, 7387.0], [742.0, 39292.0], [749.0, 7371.666666666667], [746.0, 7374.0], [745.0, 7379.0], [744.0, 7388.0], [757.0, 7350.0], [756.0, 7344.0], [755.0, 7347.0], [754.0, 7367.0], [797.0, 3471.0], [798.0, 3481.0], [795.0, 3478.0], [775.0, 7237.166666666667], [769.0, 7255.0], [768.0, 7262.0], [791.0, 3485.5], [790.0, 3480.0], [788.0, 3486.5], [784.0, 3504.5], [782.0, 3513.0], [781.0, 3513.5], [779.0, 3507.3333333333335], [776.0, 3788.0], [814.0, 3443.5], [819.0, 3461.5], [818.0, 3451.5], [815.0, 3446.0], [801.0, 3470.25], [804.0, 3471.0], [803.0, 3466.0], [812.0, 3453.0], [811.0, 3453.5], [809.0, 3468.0], [808.0, 3448.0], [807.0, 3463.0], [806.0, 3454.0], [859.0, 3300.1], [894.0, 3209.0], [895.0, 3200.0], [891.0, 3206.1428571428573], [867.0, 3200.6666666666665], [866.0, 3240.6666666666665], [865.0, 3198.0], [887.0, 3209.0], [886.0, 3207.0], [883.0, 3209.0], [878.0, 3215.75], [881.0, 3206.0], [874.0, 3240.5], [873.0, 3241.5], [872.0, 3245.0], [913.0, 3239.0], [924.0, 3245.5], [922.0, 3254.0], [921.0, 3261.0], [919.0, 3250.0], [920.0, 3264.0], [909.0, 3229.0], [896.0, 3239.5], [899.0, 3230.5], [898.0, 3240.0], [903.0, 3243.0], [901.0, 3249.0], [908.0, 3253.6666666666665], [906.0, 3249.5], [905.0, 3257.5], [904.0, 3251.0], [917.0, 3262.0], [915.0, 3251.0], [912.0, 3250.0], [955.0, 3203.0], [948.0, 3194.0], [958.0, 3196.3333333333335], [944.0, 3204.0], [953.0, 3212.0], [952.0, 3209.0], [942.0, 3206.0], [930.0, 3244.0], [929.0, 3277.0], [932.0, 3276.6666666666665], [931.0, 3273.0], [934.0, 3259.25], [933.0, 3259.5], [940.0, 3199.6666666666665], [936.0, 3270.5], [951.0, 3194.0], [950.0, 3205.0], [949.0, 3206.0], [947.0, 3189.0], [946.0, 3208.0], [989.0, 3189.0], [990.0, 3197.0], [988.0, 3222.5], [986.0, 3263.0], [985.0, 3233.5], [984.0, 3233.0], [983.0, 3204.0], [978.0, 3193.0], [976.0, 3204.0], [974.0, 3196.0], [962.0, 3204.0], [961.0, 3193.0], [966.0, 3202.0], [963.0, 3201.0], [973.0, 3192.25], [971.0, 3201.5], [969.0, 3200.0], [968.0, 3196.0], [1000.0, 2546.0], [999.0, 3160.5], [997.0, 3142.0], [996.0, 3174.0], [995.0, 3199.0], [994.0, 3203.0], [993.0, 3195.0], [992.0, 3203.0], [1.0, 45568.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[502.39999999999833, 31712.913000000015]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 45511.0], [3.0, 45472.0], [4.0, 45433.0], [5.0, 45392.0], [6.0, 45328.0], [7.0, 45291.0], [8.0, 45252.0], [9.0, 45203.0], [10.0, 45159.0], [11.0, 45109.0], [12.0, 45068.0], [13.0, 45035.0], [14.0, 44996.0], [15.0, 44957.0], [16.0, 44914.0], [17.0, 44880.0], [18.0, 44832.0], [19.0, 44792.0], [20.0, 44718.0], [21.0, 44694.0], [22.0, 44694.0], [23.0, 44512.0], [24.0, 44560.0], [25.0, 44491.0], [26.0, 44458.0], [27.0, 44411.0], [28.0, 44367.0], [29.0, 44316.0], [30.0, 44272.0], [31.0, 44238.0], [33.0, 44206.0], [35.0, 44084.0], [34.0, 44099.0], [37.0, 44019.0], [36.0, 44027.0], [39.0, 43894.0], [38.0, 43934.0], [41.0, 43799.0], [40.0, 43858.0], [43.0, 43712.0], [42.0, 43740.0], [45.0, 43627.0], [44.0, 43677.0], [47.0, 43537.0], [46.0, 43598.0], [49.0, 43457.0], [48.0, 43513.0], [51.0, 43381.0], [50.0, 43418.0], [53.0, 43292.0], [52.0, 43343.0], [55.0, 43150.0], [54.0, 43194.0], [57.0, 43065.0], [56.0, 43127.0], [59.0, 42978.0], [58.0, 43035.0], [61.0, 42920.0], [60.0, 42936.0], [63.0, 42836.0], [62.0, 42881.0], [67.0, 42606.0], [66.0, 42653.0], [65.0, 42730.0], [64.0, 42773.0], [70.0, 42506.0], [69.0, 42556.0], [68.0, 42601.0], [75.0, 42286.0], [74.0, 42413.0], [79.0, 42131.0], [78.0, 42156.0], [77.0, 42217.0], [76.0, 42260.0], [83.0, 41938.0], [82.0, 41981.0], [81.0, 42045.0], [80.0, 42074.0], [85.0, 41853.0], [84.0, 41906.0], [94.0, 41783.0], [93.0, 41808.0], [92.0, 41826.571428571435], [99.0, 41784.5], [97.0, 41794.333333333336], [103.0, 41758.0], [102.0, 41759.0], [101.0, 41786.0], [100.0, 41802.0], [107.0, 41793.0], [105.0, 41795.0], [104.0, 41778.0], [111.0, 41784.0], [110.0, 41776.0], [109.0, 41777.0], [108.0, 41783.0], [115.0, 41767.5], [113.0, 41771.0], [112.0, 41780.0], [119.0, 41779.0], [118.0, 41790.0], [117.0, 41766.0], [116.0, 41768.0], [123.0, 41758.0], [122.0, 41768.0], [121.0, 41753.0], [120.0, 41730.0], [127.0, 41753.0], [126.0, 41763.0], [124.0, 41757.0], [134.0, 41744.5], [132.0, 41751.0], [131.0, 41746.0], [130.0, 41746.0], [129.0, 41752.0], [142.0, 41735.0], [141.0, 41737.0], [140.0, 41736.0], [139.0, 41746.0], [138.0, 41745.0], [137.0, 41739.0], [136.0, 41721.5], [150.0, 41729.0], [149.0, 41732.0], [148.0, 41729.0], [147.0, 41702.0], [146.0, 41721.0], [145.0, 41730.0], [144.0, 41732.5], [157.0, 41741.0], [156.0, 41703.5], [154.0, 41717.0], [152.0, 41722.5], [167.0, 41691.666666666664], [164.0, 41692.0], [163.0, 41688.0], [162.0, 41707.0], [161.0, 41704.0], [160.0, 41711.666666666664], [174.0, 41682.0], [173.0, 41693.0], [171.0, 41692.0], [170.0, 41675.0], [169.0, 41659.0], [168.0, 41701.0], [183.0, 41690.0], [182.0, 41690.25], [178.0, 41703.666666666664], [177.0, 41684.0], [191.0, 41684.75], [187.0, 41682.5], [185.0, 41688.0], [184.0, 41661.0], [198.0, 41671.0], [197.0, 41672.0], [196.0, 41673.0], [195.0, 41653.0], [194.0, 41678.0], [193.0, 41684.0], [200.0, 41668.0], [222.0, 41668.0], [221.0, 41661.049999999996], [217.0, 41668.0], [231.0, 41632.0], [230.0, 41639.0], [229.0, 41664.0], [228.0, 41665.0], [227.0, 41665.0], [226.0, 41667.0], [225.0, 41667.0], [224.0, 41662.0], [235.0, 41633.0], [234.0, 41641.0], [233.0, 41589.0], [232.0, 41658.0], [247.0, 41647.0], [246.0, 41620.5], [244.0, 41631.0], [243.0, 41636.0], [242.0, 41655.0], [241.0, 41643.333333333336], [255.0, 41607.5], [253.0, 41605.5], [251.0, 41619.0], [250.0, 41626.5], [248.0, 41643.0], [268.0, 41590.0], [270.0, 41565.0], [271.0, 41580.0], [269.0, 41568.0], [267.0, 41596.5], [265.0, 41587.0], [262.0, 41599.0], [258.0, 41610.0], [257.0, 41599.0], [261.0, 41600.0], [260.0, 41596.0], [280.0, 41564.666666666664], [287.0, 41560.5], [283.0, 41552.0], [282.0, 41572.0], [281.0, 41554.0], [277.0, 41576.0], [276.0, 41560.0], [275.0, 41565.5], [273.0, 41572.0], [272.0, 41579.0], [301.0, 41532.0], [302.0, 41516.0], [300.0, 41536.0], [299.0, 41528.0], [298.0, 41535.0], [297.0, 41524.0], [296.0, 41554.0], [295.0, 41542.71428571428], [288.0, 41551.0], [307.0, 41507.0], [317.0, 41517.0], [319.0, 41491.0], [316.0, 41509.0], [315.0, 41501.0], [312.0, 41506.0], [310.0, 41502.5], [308.0, 41503.0], [306.0, 41468.0], [305.0, 41510.0], [304.0, 41496.0], [335.0, 41441.0], [334.0, 41461.5], [332.0, 41435.0], [331.0, 41464.0], [329.0, 41469.0], [328.0, 41473.857142857145], [321.0, 41481.0], [320.0, 41484.0], [351.0, 41390.0], [350.0, 41427.333333333336], [339.0, 41459.0], [338.0, 41456.0], [337.0, 41465.0], [336.0, 41437.0], [347.0, 41450.0], [346.0, 41423.0], [345.0, 41400.0], [344.0, 41450.0], [343.0, 41439.5], [341.0, 41455.0], [340.0, 41454.0], [366.0, 41380.0], [367.0, 41388.0], [365.0, 41377.0], [364.0, 41383.0], [363.0, 41389.0], [362.0, 41382.5], [360.0, 41388.0], [359.0, 41374.0], [352.0, 41413.0], [355.0, 41393.5], [353.0, 41406.0], [358.0, 41399.0], [357.0, 41414.0], [356.0, 41400.0], [383.0, 41360.0], [382.0, 41360.0], [381.0, 41356.0], [380.0, 41370.0], [371.0, 41379.0], [370.0, 41350.0], [369.0, 41378.0], [368.0, 41380.0], [398.0, 41336.0], [399.0, 41335.0], [397.0, 41338.0], [396.0, 41340.0], [395.0, 41339.0], [394.0, 41341.0], [393.0, 41342.0], [392.0, 41344.0], [391.0, 41346.0], [385.0, 41359.0], [387.0, 41357.0], [386.0, 41354.0], [390.0, 41349.0], [389.0, 41349.0], [388.0, 41353.0], [414.0, 41313.0], [415.0, 41311.0], [413.0, 41316.0], [412.0, 41313.0], [411.0, 41314.0], [410.0, 41315.0], [409.0, 41318.0], [408.0, 41320.0], [407.0, 41325.0], [401.0, 41337.0], [400.0, 41334.0], [403.0, 41334.0], [402.0, 41332.0], [406.0, 41329.0], [405.0, 41330.0], [404.0, 41326.0], [431.0, 41303.875], [428.0, 41300.0], [421.0, 41309.0], [420.0, 41310.0], [419.0, 41311.0], [418.0, 41308.0], [416.0, 41312.0], [446.0, 41253.0], [447.0, 41272.0], [445.0, 41275.0], [444.0, 41280.0], [443.0, 41286.0], [442.0, 41289.0], [441.0, 41275.5], [439.0, 41270.0], [433.0, 41270.0], [432.0, 41282.0], [435.0, 41292.0], [434.0, 41277.0], [438.0, 41283.0], [437.0, 41282.0], [462.0, 41241.0], [463.0, 41239.0], [461.0, 41253.0], [460.0, 41249.0], [459.0, 41237.0], [458.0, 41254.0], [457.0, 41258.0], [456.0, 41260.0], [455.0, 41258.0], [449.0, 41277.0], [448.0, 41257.0], [451.0, 41273.0], [450.0, 41270.0], [454.0, 41236.0], [453.0, 41261.0], [478.0, 41197.0], [479.0, 41196.0], [477.0, 41234.0], [476.0, 41204.5], [474.0, 41202.0], [473.0, 41245.0], [472.0, 41273.0], [470.0, 41231.0], [465.0, 41237.5], [467.0, 41224.0], [466.0, 41234.0], [469.0, 41221.0], [468.0, 41233.0], [494.0, 41229.0], [495.0, 41205.0], [493.0, 41187.0], [492.0, 41170.0], [491.0, 41176.0], [490.0, 41224.5], [488.0, 41190.0], [487.0, 41208.0], [480.0, 41194.0], [483.0, 41190.0], [481.0, 41191.0], [486.0, 41178.0], [485.0, 41188.0], [484.0, 41206.0], [510.0, 41179.0], [511.0, 41177.0], [509.0, 41139.0], [508.0, 41162.0], [507.0, 41200.0], [506.0, 41162.0], [505.0, 41180.5], [503.0, 41190.0], [497.0, 41201.0], [499.0, 41159.0], [498.0, 41197.0], [502.0, 41199.0], [500.0, 41161.0], [538.0, 41125.0], [532.0, 41096.0], [539.0, 41124.0], [529.0, 41147.0], [537.0, 41088.0], [536.0, 41151.0], [523.0, 41155.0], [512.0, 41142.0], [514.0, 41144.0], [513.0, 41150.0], [519.0, 41186.0], [518.0, 41144.5], [522.0, 41123.0], [521.0, 41119.0], [520.0, 41129.0], [535.0, 41130.0], [534.0, 41131.0], [533.0, 41138.0], [531.0, 41161.0], [530.0, 41140.0], [572.0, 41000.0], [575.0, 41028.0], [561.0, 41062.0], [560.0, 41058.0], [563.0, 41024.0], [562.0, 41074.0], [565.0, 41010.0], [564.0, 41075.0], [574.0, 40975.0], [573.0, 41011.0], [571.0, 40994.0], [570.0, 40999.0], [569.0, 41001.0], [568.0, 41091.0], [559.0, 41040.0], [546.0, 41090.5], [544.0, 41110.2], [548.0, 41120.0], [547.0, 41065.0], [551.0, 41087.0], [550.0, 41117.5], [558.0, 41039.0], [557.0, 41055.0], [556.0, 41076.5], [554.0, 41049.0], [552.0, 41052.0], [567.0, 41032.0], [566.0, 41066.0], [604.0, 40829.0], [607.0, 40811.0], [593.0, 40846.0], [592.0, 40841.0], [595.0, 40820.0], [594.0, 40800.0], [597.0, 40816.0], [596.0, 40844.0], [606.0, 40852.0], [605.0, 40801.0], [603.0, 40831.0], [602.0, 40833.0], [601.0, 40811.0], [600.0, 40833.0], [591.0, 40847.0], [576.0, 40979.0], [578.0, 40878.0], [577.0, 40962.0], [580.0, 40823.0], [579.0, 40900.0], [590.0, 40801.0], [589.0, 40849.0], [588.0, 40828.0], [587.0, 40855.0], [586.0, 40823.0], [585.0, 40832.0], [584.0, 40852.25], [599.0, 40779.0], [598.0, 40820.0], [636.0, 40334.0], [639.0, 40225.0], [625.0, 40514.0], [624.0, 40503.0], [627.0, 40454.0], [626.0, 40495.0], [629.0, 40457.0], [628.0, 40454.0], [638.0, 40171.0], [637.0, 40213.0], [635.0, 40339.0], [634.0, 40354.0], [633.0, 40347.0], [632.0, 40377.0], [623.0, 40548.0], [608.0, 40800.0], [610.0, 40804.0], [609.0, 40782.0], [612.0, 40831.0], [611.0, 40748.0], [614.0, 40734.0], [613.0, 40723.0], [622.0, 40605.0], [620.0, 40679.0], [619.0, 40648.0], [618.0, 40601.0], [617.0, 40685.0], [616.0, 40690.0], [631.0, 40375.0], [630.0, 40419.0], [670.0, 39933.75], [660.0, 39962.0], [671.0, 39922.0], [657.0, 39992.0], [656.0, 40023.0], [659.0, 40000.0], [658.0, 39972.0], [666.0, 39925.0], [665.0, 39974.0], [664.0, 39961.0], [647.0, 40072.0], [646.0, 40106.0], [645.0, 40091.0], [644.0, 40132.0], [643.0, 40149.0], [642.0, 40214.0], [641.0, 40151.0], [640.0, 40179.0], [655.0, 40025.0], [654.0, 40069.0], [653.0, 40039.0], [652.0, 40022.0], [651.0, 40031.0], [650.0, 40091.0], [649.0, 40040.0], [648.0, 40079.0], [663.0, 39954.0], [662.0, 39946.0], [661.0, 39928.0], [702.0, 39847.0], [691.0, 39884.0], [703.0, 39826.0], [688.0, 39874.5], [690.0, 39845.0], [689.0, 39868.0], [700.0, 39884.0], [698.0, 39850.0], [696.0, 39855.0], [678.0, 39927.0], [676.0, 39944.0], [675.0, 39883.0], [674.0, 39949.0], [673.0, 39924.0], [672.0, 39920.0], [686.0, 39873.0], [685.0, 39863.0], [684.0, 39882.0], [683.0, 39890.0], [681.0, 39906.0], [680.0, 39902.0], [695.0, 39902.0], [694.0, 39862.5], [692.0, 39858.0], [729.0, 39329.0], [734.0, 39324.0], [735.0, 39325.0], [721.0, 39793.0], [720.0, 39795.0], [723.0, 39812.0], [722.0, 39789.0], [725.0, 39787.0], [724.0, 39880.0], [733.0, 39333.0], [731.0, 39332.0], [730.0, 39339.0], [728.0, 39346.0], [708.0, 39854.5], [706.0, 39833.0], [705.0, 39834.0], [704.0, 39829.0], [719.0, 39888.0], [718.0, 39811.0], [716.0, 39803.0], [715.0, 39815.0], [714.0, 39800.0], [713.0, 39831.5], [712.0, 39830.0], [727.0, 39395.0], [726.0, 39460.0], [761.0, 7251.0], [766.0, 7251.0], [767.0, 7262.0], [753.0, 7362.666666666667], [765.0, 7263.0], [764.0, 7237.0], [763.0, 7252.0], [750.0, 7372.0], [736.0, 39324.0], [738.0, 39312.0], [737.0, 39319.0], [740.0, 39298.0], [739.0, 39304.0], [743.0, 7387.0], [742.0, 39292.0], [749.0, 7371.666666666667], [746.0, 7374.0], [745.0, 7379.0], [744.0, 7388.0], [757.0, 7350.0], [756.0, 7344.0], [755.0, 7347.0], [754.0, 7367.0], [797.0, 3471.0], [798.0, 3481.0], [795.0, 3478.0], [775.0, 7237.166666666667], [769.0, 7255.0], [768.0, 7262.0], [791.0, 3485.5], [790.0, 3480.0], [788.0, 3486.5], [784.0, 3504.5], [782.0, 3513.0], [781.0, 3513.5], [779.0, 3507.3333333333335], [776.0, 3788.0], [814.0, 3443.5], [819.0, 3461.5], [818.0, 3451.5], [815.0, 3446.0], [801.0, 3470.25], [804.0, 3471.0], [803.0, 3466.0], [812.0, 3453.0], [811.0, 3453.5], [809.0, 3468.0], [808.0, 3448.0], [807.0, 3463.0], [806.0, 3454.0], [859.0, 3300.1], [894.0, 3209.0], [895.0, 3200.0], [891.0, 3206.1428571428573], [867.0, 3200.6666666666665], [866.0, 3240.6666666666665], [865.0, 3198.0], [887.0, 3209.0], [883.0, 3209.0], [878.0, 3215.75], [881.0, 3206.0], [886.0, 3207.0], [874.0, 3240.5], [873.0, 3241.5], [872.0, 3245.0], [924.0, 3245.5], [921.0, 3261.0], [919.0, 3250.0], [922.0, 3254.0], [917.0, 3262.0], [920.0, 3264.0], [903.0, 3243.0], [901.0, 3249.0], [899.0, 3230.5], [898.0, 3240.0], [896.0, 3239.5], [909.0, 3229.0], [908.0, 3253.6666666666665], [906.0, 3249.5], [905.0, 3257.5], [904.0, 3251.0], [915.0, 3251.0], [913.0, 3239.0], [912.0, 3250.0], [955.0, 3203.0], [948.0, 3194.0], [958.0, 3196.3333333333335], [944.0, 3204.0], [953.0, 3212.0], [952.0, 3209.0], [942.0, 3206.0], [930.0, 3244.0], [929.0, 3277.0], [932.0, 3276.6666666666665], [931.0, 3273.0], [934.0, 3259.25], [933.0, 3259.5], [940.0, 3199.6666666666665], [936.0, 3270.5], [951.0, 3194.0], [950.0, 3205.0], [949.0, 3206.0], [947.0, 3189.0], [946.0, 3208.0], [989.0, 3189.0], [990.0, 3197.0], [988.0, 3222.5], [986.0, 3263.0], [985.0, 3233.5], [984.0, 3233.0], [983.0, 3204.0], [978.0, 3193.0], [976.0, 3204.0], [974.0, 3196.0], [962.0, 3204.0], [961.0, 3193.0], [966.0, 3202.0], [963.0, 3201.0], [973.0, 3192.25], [971.0, 3201.5], [969.0, 3200.0], [968.0, 3196.0], [1000.0, 2546.0], [999.0, 3160.5], [997.0, 3142.0], [996.0, 3174.0], [995.0, 3199.0], [994.0, 3203.0], [993.0, 3195.0], [992.0, 3203.0], [1.0, 45568.0]], "isOverall": false, "label": "Test Fragment", "isController": true}, {"data": [[502.39999999999833, 31712.913000000015]], "isOverall": false, "label": "Test Fragment-Aggregated", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 371.81666666666666, "minX": 1.68042708E12, "maxY": 21960.316666666666, "series": [{"data": [[1.68042714E12, 596.6833333333333], [1.68042708E12, 21960.316666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68042714E12, 371.81666666666666], [1.68042708E12, 6242.033333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042714E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 31118.969665271972, "minX": 1.68042708E12, "maxY": 44617.681818181816, "series": [{"data": [[1.68042714E12, 44617.681818181816], [1.68042708E12, 31118.969665271972]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042714E12, 44512.0], [1.68042708E12, 31700.101101101114]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042714E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 30295.732217573197, "minX": 1.68042708E12, "maxY": 44617.681818181816, "series": [{"data": [[1.68042714E12, 44617.681818181816], [1.68042708E12, 30295.732217573197]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042714E12, 44512.0], [1.68042708E12, 30912.298298298298]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042714E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1992.3294979079496, "minX": 1.68042708E12, "maxY": 5375.34090909091, "series": [{"data": [[1.68042714E12, 5375.34090909091], [1.68042708E12, 1992.3294979079496]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042714E12, 4167.0], [1.68042708E12, 2139.1541541541537]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042714E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 39290.0, "minX": 1.68042708E12, "maxY": 45568.0, "series": [{"data": [[1.68042714E12, 45568.0], [1.68042708E12, 43627.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68042714E12, 45412.5], [1.68042708E12, 41771.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68042714E12, 45568.0], [1.68042708E12, 43381.37]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68042714E12, 45501.25], [1.68042708E12, 42132.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68042714E12, 43677.0], [1.68042708E12, 39290.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68042714E12, 44627.0], [1.68042708E12, 41341.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042714E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3167.0, "minX": 1.0, "maxY": 44627.0, "series": [{"data": [[17.0, 39325.0], [143.0, 41737.0], [22.0, 44627.0], [23.0, 43127.0], [409.0, 41313.0], [106.0, 39926.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 3167.0], [33.0, 7262.0], [223.0, 3253.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 409.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 44627.0, "series": [{"data": [[17.0, 39325.0], [143.0, 41737.0], [22.0, 44627.0], [23.0, 43127.0], [409.0, 41313.0], [106.0, 39926.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 1273.0], [33.0, 0.0], [223.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 409.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.68042708E12, "maxY": 16.666666666666668, "series": [{"data": [[1.68042708E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042708E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68042708E12, "maxY": 11.633333333333333, "series": [{"data": [[1.68042708E12, 0.08333333333333333]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.68042708E12, 3.55]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.68042714E12, 0.7333333333333333], [1.68042708E12, 11.633333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68042708E12, 0.016666666666666666]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.68042708E12, 0.65]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042714E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68042708E12, "maxY": 12.35, "series": [{"data": [[1.68042708E12, 4.3]], "isOverall": false, "label": "Test Fragment-failure", "isController": true}, {"data": [[1.68042714E12, 0.016666666666666666], [1.68042708E12, 12.35]], "isOverall": false, "label": "Test Fragment-success", "isController": true}, {"data": [[1.68042708E12, 4.3]], "isOverall": false, "label": "Login-failure", "isController": false}, {"data": [[1.68042714E12, 0.7333333333333333], [1.68042708E12, 11.633333333333333]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042714E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.75, "minX": 1.68042708E12, "maxY": 23.983333333333334, "series": [{"data": [[1.68042714E12, 0.75], [1.68042708E12, 23.983333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68042708E12, 8.6]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042714E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

