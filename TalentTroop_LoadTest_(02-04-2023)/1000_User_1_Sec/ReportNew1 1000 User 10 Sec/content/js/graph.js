/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6375.0, "minX": 0.0, "maxY": 39247.0, "series": [{"data": [[0.0, 6375.0], [0.1, 6376.0], [0.2, 6376.0], [0.3, 6376.0], [0.4, 6379.0], [0.5, 6379.0], [0.6, 6379.0], [0.7, 6381.0], [0.8, 6384.0], [0.9, 6385.0], [1.0, 6386.0], [1.1, 6387.0], [1.2, 6387.0], [1.3, 6388.0], [1.4, 6388.0], [1.5, 6390.0], [1.6, 6390.0], [1.7, 6391.0], [1.8, 6391.0], [1.9, 6392.0], [2.0, 6392.0], [2.1, 6392.0], [2.2, 6392.0], [2.3, 6393.0], [2.4, 6393.0], [2.5, 6393.0], [2.6, 6393.0], [2.7, 6394.0], [2.8, 6395.0], [2.9, 6396.0], [3.0, 6397.0], [3.1, 6397.0], [3.2, 6399.0], [3.3, 6399.0], [3.4, 6399.0], [3.5, 6399.0], [3.6, 6399.0], [3.7, 6399.0], [3.8, 6399.0], [3.9, 6400.0], [4.0, 6401.0], [4.1, 6401.0], [4.2, 6402.0], [4.3, 6402.0], [4.4, 6403.0], [4.5, 6403.0], [4.6, 6403.0], [4.7, 6403.0], [4.8, 6404.0], [4.9, 6404.0], [5.0, 6404.0], [5.1, 6404.0], [5.2, 6405.0], [5.3, 6406.0], [5.4, 6406.0], [5.5, 6406.0], [5.6, 6407.0], [5.7, 6407.0], [5.8, 6408.0], [5.9, 6408.0], [6.0, 6408.0], [6.1, 6409.0], [6.2, 6409.0], [6.3, 6409.0], [6.4, 6410.0], [6.5, 6410.0], [6.6, 6410.0], [6.7, 6412.0], [6.8, 6413.0], [6.9, 6413.0], [7.0, 6413.0], [7.1, 6414.0], [7.2, 6415.0], [7.3, 6415.0], [7.4, 6415.0], [7.5, 6417.0], [7.6, 6417.0], [7.7, 6418.0], [7.8, 6418.0], [7.9, 6420.0], [8.0, 6420.0], [8.1, 6421.0], [8.2, 6422.0], [8.3, 6423.0], [8.4, 6423.0], [8.5, 6423.0], [8.6, 6424.0], [8.7, 6424.0], [8.8, 6424.0], [8.9, 6425.0], [9.0, 6425.0], [9.1, 6425.0], [9.2, 6425.0], [9.3, 6427.0], [9.4, 6427.0], [9.5, 6427.0], [9.6, 6427.0], [9.7, 6428.0], [9.8, 6429.0], [9.9, 6430.0], [10.0, 6431.0], [10.1, 6431.0], [10.2, 6431.0], [10.3, 6433.0], [10.4, 6433.0], [10.5, 6433.0], [10.6, 6433.0], [10.7, 6434.0], [10.8, 6435.0], [10.9, 6436.0], [11.0, 6436.0], [11.1, 6436.0], [11.2, 6436.0], [11.3, 6438.0], [11.4, 6438.0], [11.5, 6438.0], [11.6, 6438.0], [11.7, 6438.0], [11.8, 6439.0], [11.9, 6439.0], [12.0, 6439.0], [12.1, 6439.0], [12.2, 6440.0], [12.3, 6441.0], [12.4, 6441.0], [12.5, 6441.0], [12.6, 6441.0], [12.7, 6442.0], [12.8, 6442.0], [12.9, 6442.0], [13.0, 6443.0], [13.1, 6443.0], [13.2, 6443.0], [13.3, 6443.0], [13.4, 6443.0], [13.5, 6443.0], [13.6, 6444.0], [13.7, 6444.0], [13.8, 6445.0], [13.9, 6445.0], [14.0, 6445.0], [14.1, 6446.0], [14.2, 6446.0], [14.3, 6446.0], [14.4, 6446.0], [14.5, 6447.0], [14.6, 6447.0], [14.7, 6447.0], [14.8, 6448.0], [14.9, 6448.0], [15.0, 6448.0], [15.1, 6449.0], [15.2, 6449.0], [15.3, 6449.0], [15.4, 6449.0], [15.5, 6449.0], [15.6, 6449.0], [15.7, 6450.0], [15.8, 6450.0], [15.9, 6450.0], [16.0, 6451.0], [16.1, 6451.0], [16.2, 6452.0], [16.3, 6452.0], [16.4, 6452.0], [16.5, 6453.0], [16.6, 6453.0], [16.7, 6454.0], [16.8, 6454.0], [16.9, 6454.0], [17.0, 6455.0], [17.1, 6457.0], [17.2, 6457.0], [17.3, 6457.0], [17.4, 6457.0], [17.5, 6458.0], [17.6, 6458.0], [17.7, 6458.0], [17.8, 6458.0], [17.9, 6459.0], [18.0, 6459.0], [18.1, 6460.0], [18.2, 6460.0], [18.3, 6460.0], [18.4, 6462.0], [18.5, 6462.0], [18.6, 6463.0], [18.7, 6463.0], [18.8, 6463.0], [18.9, 6463.0], [19.0, 6464.0], [19.1, 6464.0], [19.2, 6464.0], [19.3, 6465.0], [19.4, 6466.0], [19.5, 6466.0], [19.6, 6466.0], [19.7, 6466.0], [19.8, 6466.0], [19.9, 6467.0], [20.0, 6468.0], [20.1, 6469.0], [20.2, 6469.0], [20.3, 6469.0], [20.4, 6470.0], [20.5, 6471.0], [20.6, 6471.0], [20.7, 6472.0], [20.8, 6472.0], [20.9, 6473.0], [21.0, 6473.0], [21.1, 6475.0], [21.2, 6476.0], [21.3, 6476.0], [21.4, 6476.0], [21.5, 6476.0], [21.6, 6477.0], [21.7, 6477.0], [21.8, 6477.0], [21.9, 6479.0], [22.0, 6479.0], [22.1, 6480.0], [22.2, 6481.0], [22.3, 6481.0], [22.4, 6481.0], [22.5, 6481.0], [22.6, 6481.0], [22.7, 6482.0], [22.8, 6482.0], [22.9, 6482.0], [23.0, 6482.0], [23.1, 6482.0], [23.2, 6483.0], [23.3, 6483.0], [23.4, 6483.0], [23.5, 6483.0], [23.6, 6483.0], [23.7, 6483.0], [23.8, 6484.0], [23.9, 6485.0], [24.0, 6486.0], [24.1, 6486.0], [24.2, 6486.0], [24.3, 6487.0], [24.4, 6488.0], [24.5, 6488.0], [24.6, 6488.0], [24.7, 6489.0], [24.8, 6489.0], [24.9, 6489.0], [25.0, 6490.0], [25.1, 6490.0], [25.2, 6490.0], [25.3, 6491.0], [25.4, 6491.0], [25.5, 6494.0], [25.6, 6494.0], [25.7, 6495.0], [25.8, 6497.0], [25.9, 6497.0], [26.0, 6498.0], [26.1, 6499.0], [26.2, 6499.0], [26.3, 6499.0], [26.4, 6503.0], [26.5, 6506.0], [26.6, 6507.0], [26.7, 6510.0], [26.8, 6510.0], [26.9, 6510.0], [27.0, 6511.0], [27.1, 6511.0], [27.2, 6512.0], [27.3, 6513.0], [27.4, 6513.0], [27.5, 6514.0], [27.6, 6515.0], [27.7, 6515.0], [27.8, 6516.0], [27.9, 6517.0], [28.0, 6517.0], [28.1, 6518.0], [28.2, 6519.0], [28.3, 6519.0], [28.4, 6519.0], [28.5, 6519.0], [28.6, 6519.0], [28.7, 6519.0], [28.8, 6519.0], [28.9, 6520.0], [29.0, 6520.0], [29.1, 6520.0], [29.2, 6521.0], [29.3, 6521.0], [29.4, 6522.0], [29.5, 6522.0], [29.6, 6523.0], [29.7, 6524.0], [29.8, 6524.0], [29.9, 6525.0], [30.0, 6525.0], [30.1, 6525.0], [30.2, 6526.0], [30.3, 6526.0], [30.4, 6526.0], [30.5, 6527.0], [30.6, 6527.0], [30.7, 6527.0], [30.8, 6529.0], [30.9, 6529.0], [31.0, 6532.0], [31.1, 6532.0], [31.2, 6534.0], [31.3, 6537.0], [31.4, 6540.0], [31.5, 6576.0], [31.6, 6580.0], [31.7, 6580.0], [31.8, 6587.0], [31.9, 26459.0], [32.0, 35137.0], [32.1, 35307.0], [32.2, 35356.0], [32.3, 35375.0], [32.4, 35387.0], [32.5, 35432.0], [32.6, 35438.0], [32.7, 35439.0], [32.8, 35440.0], [32.9, 35442.0], [33.0, 35480.0], [33.1, 35506.0], [33.2, 35542.0], [33.3, 35546.0], [33.4, 35552.0], [33.5, 35567.0], [33.6, 35593.0], [33.7, 35611.0], [33.8, 35619.0], [33.9, 35623.0], [34.0, 35625.0], [34.1, 35626.0], [34.2, 35631.0], [34.3, 35635.0], [34.4, 35637.0], [34.5, 35640.0], [34.6, 35643.0], [34.7, 35649.0], [34.8, 35651.0], [34.9, 35653.0], [35.0, 35654.0], [35.1, 35659.0], [35.2, 35663.0], [35.3, 35665.0], [35.4, 35666.0], [35.5, 35671.0], [35.6, 35671.0], [35.7, 35686.0], [35.8, 35689.0], [35.9, 35692.0], [36.0, 35694.0], [36.1, 35697.0], [36.2, 35700.0], [36.3, 35703.0], [36.4, 35708.0], [36.5, 35708.0], [36.6, 35715.0], [36.7, 35715.0], [36.8, 35717.0], [36.9, 35720.0], [37.0, 35723.0], [37.1, 35725.0], [37.2, 35725.0], [37.3, 35725.0], [37.4, 35726.0], [37.5, 35727.0], [37.6, 35730.0], [37.7, 35732.0], [37.8, 35734.0], [37.9, 35738.0], [38.0, 35744.0], [38.1, 35764.0], [38.2, 35777.0], [38.3, 35786.0], [38.4, 35794.0], [38.5, 35796.0], [38.6, 35835.0], [38.7, 35854.0], [38.8, 35865.0], [38.9, 35869.0], [39.0, 35890.0], [39.1, 35931.0], [39.2, 35934.0], [39.3, 35936.0], [39.4, 35944.0], [39.5, 35956.0], [39.6, 36006.0], [39.7, 36011.0], [39.8, 36035.0], [39.9, 36071.0], [40.0, 36075.0], [40.1, 36080.0], [40.2, 36081.0], [40.3, 36082.0], [40.4, 36085.0], [40.5, 36088.0], [40.6, 36096.0], [40.7, 36103.0], [40.8, 36103.0], [40.9, 36106.0], [41.0, 36106.0], [41.1, 36109.0], [41.2, 36109.0], [41.3, 36109.0], [41.4, 36118.0], [41.5, 36119.0], [41.6, 36122.0], [41.7, 36124.0], [41.8, 36124.0], [41.9, 36125.0], [42.0, 36128.0], [42.1, 36131.0], [42.2, 36131.0], [42.3, 36131.0], [42.4, 36133.0], [42.5, 36134.0], [42.6, 36138.0], [42.7, 36138.0], [42.8, 36143.0], [42.9, 36144.0], [43.0, 36162.0], [43.1, 36164.0], [43.2, 36166.0], [43.3, 36166.0], [43.4, 36168.0], [43.5, 36170.0], [43.6, 36171.0], [43.7, 36172.0], [43.8, 36172.0], [43.9, 36175.0], [44.0, 36176.0], [44.1, 36176.0], [44.2, 36177.0], [44.3, 36177.0], [44.4, 36178.0], [44.5, 36178.0], [44.6, 36179.0], [44.7, 36179.0], [44.8, 36180.0], [44.9, 36186.0], [45.0, 36187.0], [45.1, 36187.0], [45.2, 36190.0], [45.3, 36190.0], [45.4, 36191.0], [45.5, 36191.0], [45.6, 36193.0], [45.7, 36194.0], [45.8, 36196.0], [45.9, 36200.0], [46.0, 36202.0], [46.1, 36203.0], [46.2, 36205.0], [46.3, 36206.0], [46.4, 36213.0], [46.5, 36213.0], [46.6, 36215.0], [46.7, 36218.0], [46.8, 36218.0], [46.9, 36219.0], [47.0, 36219.0], [47.1, 36220.0], [47.2, 36220.0], [47.3, 36220.0], [47.4, 36221.0], [47.5, 36221.0], [47.6, 36227.0], [47.7, 36228.0], [47.8, 36228.0], [47.9, 36228.0], [48.0, 36229.0], [48.1, 36231.0], [48.2, 36233.0], [48.3, 36234.0], [48.4, 36235.0], [48.5, 36237.0], [48.6, 36239.0], [48.7, 36241.0], [48.8, 36245.0], [48.9, 36246.0], [49.0, 36247.0], [49.1, 36247.0], [49.2, 36247.0], [49.3, 36249.0], [49.4, 36251.0], [49.5, 36254.0], [49.6, 36255.0], [49.7, 36255.0], [49.8, 36257.0], [49.9, 36258.0], [50.0, 36261.0], [50.1, 36262.0], [50.2, 36264.0], [50.3, 36265.0], [50.4, 36265.0], [50.5, 36266.0], [50.6, 36266.0], [50.7, 36267.0], [50.8, 36268.0], [50.9, 36268.0], [51.0, 36272.0], [51.1, 36273.0], [51.2, 36273.0], [51.3, 36273.0], [51.4, 36275.0], [51.5, 36276.0], [51.6, 36277.0], [51.7, 36278.0], [51.8, 36278.0], [51.9, 36279.0], [52.0, 36280.0], [52.1, 36281.0], [52.2, 36283.0], [52.3, 36283.0], [52.4, 36284.0], [52.5, 36285.0], [52.6, 36286.0], [52.7, 36286.0], [52.8, 36288.0], [52.9, 36292.0], [53.0, 36293.0], [53.1, 36293.0], [53.2, 36296.0], [53.3, 36298.0], [53.4, 36298.0], [53.5, 36300.0], [53.6, 36300.0], [53.7, 36301.0], [53.8, 36301.0], [53.9, 36301.0], [54.0, 36302.0], [54.1, 36302.0], [54.2, 36304.0], [54.3, 36305.0], [54.4, 36305.0], [54.5, 36308.0], [54.6, 36309.0], [54.7, 36312.0], [54.8, 36313.0], [54.9, 36313.0], [55.0, 36315.0], [55.1, 36316.0], [55.2, 36316.0], [55.3, 36317.0], [55.4, 36319.0], [55.5, 36319.0], [55.6, 36319.0], [55.7, 36320.0], [55.8, 36321.0], [55.9, 36323.0], [56.0, 36324.0], [56.1, 36325.0], [56.2, 36326.0], [56.3, 36327.0], [56.4, 36327.0], [56.5, 36329.0], [56.6, 36331.0], [56.7, 36332.0], [56.8, 36332.0], [56.9, 36333.0], [57.0, 36334.0], [57.1, 36334.0], [57.2, 36334.0], [57.3, 36336.0], [57.4, 36336.0], [57.5, 36336.0], [57.6, 36338.0], [57.7, 36339.0], [57.8, 36339.0], [57.9, 36340.0], [58.0, 36340.0], [58.1, 36340.0], [58.2, 36342.0], [58.3, 36344.0], [58.4, 36347.0], [58.5, 36348.0], [58.6, 36348.0], [58.7, 36350.0], [58.8, 36350.0], [58.9, 36352.0], [59.0, 36354.0], [59.1, 36354.0], [59.2, 36354.0], [59.3, 36355.0], [59.4, 36357.0], [59.5, 36357.0], [59.6, 36358.0], [59.7, 36358.0], [59.8, 36358.0], [59.9, 36361.0], [60.0, 36361.0], [60.1, 36362.0], [60.2, 36367.0], [60.3, 36368.0], [60.4, 36368.0], [60.5, 36369.0], [60.6, 36369.0], [60.7, 36369.0], [60.8, 36371.0], [60.9, 36371.0], [61.0, 36371.0], [61.1, 36371.0], [61.2, 36372.0], [61.3, 36372.0], [61.4, 36375.0], [61.5, 36375.0], [61.6, 36376.0], [61.7, 36376.0], [61.8, 36376.0], [61.9, 36376.0], [62.0, 36377.0], [62.1, 36377.0], [62.2, 36378.0], [62.3, 36379.0], [62.4, 36379.0], [62.5, 36380.0], [62.6, 36382.0], [62.7, 36384.0], [62.8, 36387.0], [62.9, 36388.0], [63.0, 36390.0], [63.1, 36390.0], [63.2, 36391.0], [63.3, 36392.0], [63.4, 36392.0], [63.5, 36394.0], [63.6, 36394.0], [63.7, 36395.0], [63.8, 36397.0], [63.9, 36397.0], [64.0, 36398.0], [64.1, 36401.0], [64.2, 36401.0], [64.3, 36404.0], [64.4, 36407.0], [64.5, 36409.0], [64.6, 36411.0], [64.7, 36414.0], [64.8, 36415.0], [64.9, 36415.0], [65.0, 36417.0], [65.1, 36418.0], [65.2, 36420.0], [65.3, 36421.0], [65.4, 36421.0], [65.5, 36421.0], [65.6, 36423.0], [65.7, 36423.0], [65.8, 36423.0], [65.9, 36424.0], [66.0, 36424.0], [66.1, 36425.0], [66.2, 36425.0], [66.3, 36428.0], [66.4, 36428.0], [66.5, 36429.0], [66.6, 36429.0], [66.7, 36429.0], [66.8, 36430.0], [66.9, 36430.0], [67.0, 36432.0], [67.1, 36436.0], [67.2, 36437.0], [67.3, 36438.0], [67.4, 36439.0], [67.5, 36440.0], [67.6, 36440.0], [67.7, 36440.0], [67.8, 36442.0], [67.9, 36443.0], [68.0, 36445.0], [68.1, 36447.0], [68.2, 36447.0], [68.3, 36448.0], [68.4, 36448.0], [68.5, 36451.0], [68.6, 36453.0], [68.7, 36455.0], [68.8, 36455.0], [68.9, 36457.0], [69.0, 36460.0], [69.1, 36461.0], [69.2, 36463.0], [69.3, 36464.0], [69.4, 36464.0], [69.5, 36465.0], [69.6, 36466.0], [69.7, 36467.0], [69.8, 36467.0], [69.9, 36470.0], [70.0, 36473.0], [70.1, 36474.0], [70.2, 36474.0], [70.3, 36477.0], [70.4, 36478.0], [70.5, 36478.0], [70.6, 36478.0], [70.7, 36479.0], [70.8, 36480.0], [70.9, 36480.0], [71.0, 36483.0], [71.1, 36483.0], [71.2, 36484.0], [71.3, 36484.0], [71.4, 36491.0], [71.5, 36491.0], [71.6, 36492.0], [71.7, 36492.0], [71.8, 36494.0], [71.9, 36496.0], [72.0, 36497.0], [72.1, 36497.0], [72.2, 36501.0], [72.3, 36501.0], [72.4, 36501.0], [72.5, 36502.0], [72.6, 36504.0], [72.7, 36505.0], [72.8, 36505.0], [72.9, 36506.0], [73.0, 36506.0], [73.1, 36506.0], [73.2, 36507.0], [73.3, 36507.0], [73.4, 36507.0], [73.5, 36507.0], [73.6, 36509.0], [73.7, 36509.0], [73.8, 36510.0], [73.9, 36512.0], [74.0, 36512.0], [74.1, 36512.0], [74.2, 36515.0], [74.3, 36515.0], [74.4, 36519.0], [74.5, 36521.0], [74.6, 36522.0], [74.7, 36523.0], [74.8, 36527.0], [74.9, 36528.0], [75.0, 36529.0], [75.1, 36530.0], [75.2, 36531.0], [75.3, 36531.0], [75.4, 36532.0], [75.5, 36533.0], [75.6, 36533.0], [75.7, 36533.0], [75.8, 36533.0], [75.9, 36535.0], [76.0, 36536.0], [76.1, 36538.0], [76.2, 36538.0], [76.3, 36539.0], [76.4, 36542.0], [76.5, 36543.0], [76.6, 36544.0], [76.7, 36544.0], [76.8, 36545.0], [76.9, 36545.0], [77.0, 36545.0], [77.1, 36546.0], [77.2, 36548.0], [77.3, 36551.0], [77.4, 36553.0], [77.5, 36554.0], [77.6, 36554.0], [77.7, 36556.0], [77.8, 36559.0], [77.9, 36560.0], [78.0, 36562.0], [78.1, 36565.0], [78.2, 36567.0], [78.3, 36570.0], [78.4, 36571.0], [78.5, 36571.0], [78.6, 36574.0], [78.7, 36577.0], [78.8, 36578.0], [78.9, 36580.0], [79.0, 36582.0], [79.1, 36584.0], [79.2, 36586.0], [79.3, 36587.0], [79.4, 36588.0], [79.5, 36590.0], [79.6, 36594.0], [79.7, 36594.0], [79.8, 36595.0], [79.9, 36596.0], [80.0, 36596.0], [80.1, 36600.0], [80.2, 36602.0], [80.3, 36603.0], [80.4, 36603.0], [80.5, 36603.0], [80.6, 36606.0], [80.7, 36607.0], [80.8, 36608.0], [80.9, 36611.0], [81.0, 36613.0], [81.1, 36616.0], [81.2, 36616.0], [81.3, 36618.0], [81.4, 36619.0], [81.5, 36619.0], [81.6, 36620.0], [81.7, 36620.0], [81.8, 36620.0], [81.9, 36621.0], [82.0, 36622.0], [82.1, 36623.0], [82.2, 36624.0], [82.3, 36625.0], [82.4, 36626.0], [82.5, 36627.0], [82.6, 36629.0], [82.7, 36630.0], [82.8, 36632.0], [82.9, 36632.0], [83.0, 36634.0], [83.1, 36634.0], [83.2, 36634.0], [83.3, 36635.0], [83.4, 36638.0], [83.5, 36639.0], [83.6, 36640.0], [83.7, 36641.0], [83.8, 36641.0], [83.9, 36641.0], [84.0, 36643.0], [84.1, 36644.0], [84.2, 36645.0], [84.3, 36645.0], [84.4, 36645.0], [84.5, 36646.0], [84.6, 36647.0], [84.7, 36648.0], [84.8, 36649.0], [84.9, 36650.0], [85.0, 36651.0], [85.1, 36657.0], [85.2, 36660.0], [85.3, 36662.0], [85.4, 36665.0], [85.5, 36665.0], [85.6, 36666.0], [85.7, 36666.0], [85.8, 36671.0], [85.9, 36671.0], [86.0, 36672.0], [86.1, 36673.0], [86.2, 36674.0], [86.3, 36676.0], [86.4, 36678.0], [86.5, 36679.0], [86.6, 36680.0], [86.7, 36683.0], [86.8, 36684.0], [86.9, 36684.0], [87.0, 36685.0], [87.1, 36685.0], [87.2, 36687.0], [87.3, 36687.0], [87.4, 36688.0], [87.5, 36690.0], [87.6, 36690.0], [87.7, 36691.0], [87.8, 36693.0], [87.9, 36700.0], [88.0, 36700.0], [88.1, 36703.0], [88.2, 36708.0], [88.3, 36709.0], [88.4, 36711.0], [88.5, 36711.0], [88.6, 36712.0], [88.7, 36712.0], [88.8, 36714.0], [88.9, 36715.0], [89.0, 36716.0], [89.1, 36717.0], [89.2, 36717.0], [89.3, 36719.0], [89.4, 36719.0], [89.5, 36721.0], [89.6, 36722.0], [89.7, 36723.0], [89.8, 36723.0], [89.9, 36726.0], [90.0, 36726.0], [90.1, 36726.0], [90.2, 36727.0], [90.3, 36728.0], [90.4, 36735.0], [90.5, 36735.0], [90.6, 36736.0], [90.7, 36736.0], [90.8, 36738.0], [90.9, 36745.0], [91.0, 36746.0], [91.1, 36758.0], [91.2, 36768.0], [91.3, 36768.0], [91.4, 36772.0], [91.5, 36773.0], [91.6, 36777.0], [91.7, 36778.0], [91.8, 36780.0], [91.9, 36781.0], [92.0, 36783.0], [92.1, 36784.0], [92.2, 36785.0], [92.3, 36786.0], [92.4, 36788.0], [92.5, 36791.0], [92.6, 36796.0], [92.7, 36800.0], [92.8, 36803.0], [92.9, 36807.0], [93.0, 36882.0], [93.1, 36905.0], [93.2, 36941.0], [93.3, 36965.0], [93.4, 36989.0], [93.5, 37041.0], [93.6, 37083.0], [93.7, 37093.0], [93.8, 37116.0], [93.9, 37129.0], [94.0, 37228.0], [94.1, 37259.0], [94.2, 37261.0], [94.3, 37289.0], [94.4, 37297.0], [94.5, 37359.0], [94.6, 37402.0], [94.7, 37403.0], [94.8, 37480.0], [94.9, 37504.0], [95.0, 37513.0], [95.1, 37608.0], [95.2, 37635.0], [95.3, 37635.0], [95.4, 37635.0], [95.5, 37737.0], [95.6, 37752.0], [95.7, 37782.0], [95.8, 37783.0], [95.9, 37841.0], [96.0, 37894.0], [96.1, 37959.0], [96.2, 37992.0], [96.3, 38003.0], [96.4, 38016.0], [96.5, 38018.0], [96.6, 38104.0], [96.7, 38139.0], [96.8, 38176.0], [96.9, 38196.0], [97.0, 38233.0], [97.1, 38275.0], [97.2, 38343.0], [97.3, 38370.0], [97.4, 38371.0], [97.5, 38397.0], [97.6, 38411.0], [97.7, 38506.0], [97.8, 38508.0], [97.9, 38545.0], [98.0, 38629.0], [98.1, 38658.0], [98.2, 38681.0], [98.3, 38692.0], [98.4, 38695.0], [98.5, 38728.0], [98.6, 38763.0], [98.7, 38805.0], [98.8, 38833.0], [98.9, 38923.0], [99.0, 38933.0], [99.1, 38970.0], [99.2, 38971.0], [99.3, 39006.0], [99.4, 39038.0], [99.5, 39107.0], [99.6, 39142.0], [99.7, 39195.0], [99.8, 39206.0], [99.9, 39247.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 6375.0], [0.1, 6376.0], [0.2, 6376.0], [0.3, 6376.0], [0.4, 6379.0], [0.5, 6379.0], [0.6, 6379.0], [0.7, 6381.0], [0.8, 6384.0], [0.9, 6385.0], [1.0, 6386.0], [1.1, 6387.0], [1.2, 6387.0], [1.3, 6388.0], [1.4, 6388.0], [1.5, 6390.0], [1.6, 6390.0], [1.7, 6391.0], [1.8, 6391.0], [1.9, 6392.0], [2.0, 6392.0], [2.1, 6392.0], [2.2, 6392.0], [2.3, 6393.0], [2.4, 6393.0], [2.5, 6393.0], [2.6, 6393.0], [2.7, 6394.0], [2.8, 6395.0], [2.9, 6396.0], [3.0, 6397.0], [3.1, 6397.0], [3.2, 6399.0], [3.3, 6399.0], [3.4, 6399.0], [3.5, 6399.0], [3.6, 6399.0], [3.7, 6399.0], [3.8, 6399.0], [3.9, 6400.0], [4.0, 6401.0], [4.1, 6401.0], [4.2, 6402.0], [4.3, 6402.0], [4.4, 6403.0], [4.5, 6403.0], [4.6, 6403.0], [4.7, 6403.0], [4.8, 6404.0], [4.9, 6404.0], [5.0, 6404.0], [5.1, 6404.0], [5.2, 6405.0], [5.3, 6406.0], [5.4, 6406.0], [5.5, 6406.0], [5.6, 6407.0], [5.7, 6407.0], [5.8, 6408.0], [5.9, 6408.0], [6.0, 6408.0], [6.1, 6409.0], [6.2, 6409.0], [6.3, 6409.0], [6.4, 6410.0], [6.5, 6410.0], [6.6, 6410.0], [6.7, 6412.0], [6.8, 6413.0], [6.9, 6413.0], [7.0, 6413.0], [7.1, 6414.0], [7.2, 6415.0], [7.3, 6415.0], [7.4, 6416.0], [7.5, 6417.0], [7.6, 6417.0], [7.7, 6418.0], [7.8, 6418.0], [7.9, 6420.0], [8.0, 6420.0], [8.1, 6421.0], [8.2, 6422.0], [8.3, 6423.0], [8.4, 6423.0], [8.5, 6423.0], [8.6, 6424.0], [8.7, 6424.0], [8.8, 6424.0], [8.9, 6425.0], [9.0, 6425.0], [9.1, 6425.0], [9.2, 6425.0], [9.3, 6427.0], [9.4, 6427.0], [9.5, 6427.0], [9.6, 6427.0], [9.7, 6428.0], [9.8, 6429.0], [9.9, 6430.0], [10.0, 6431.0], [10.1, 6431.0], [10.2, 6431.0], [10.3, 6433.0], [10.4, 6433.0], [10.5, 6433.0], [10.6, 6433.0], [10.7, 6434.0], [10.8, 6435.0], [10.9, 6436.0], [11.0, 6436.0], [11.1, 6436.0], [11.2, 6436.0], [11.3, 6438.0], [11.4, 6438.0], [11.5, 6438.0], [11.6, 6438.0], [11.7, 6438.0], [11.8, 6439.0], [11.9, 6439.0], [12.0, 6439.0], [12.1, 6439.0], [12.2, 6440.0], [12.3, 6441.0], [12.4, 6441.0], [12.5, 6441.0], [12.6, 6441.0], [12.7, 6442.0], [12.8, 6442.0], [12.9, 6442.0], [13.0, 6443.0], [13.1, 6443.0], [13.2, 6443.0], [13.3, 6443.0], [13.4, 6443.0], [13.5, 6443.0], [13.6, 6444.0], [13.7, 6444.0], [13.8, 6445.0], [13.9, 6445.0], [14.0, 6445.0], [14.1, 6446.0], [14.2, 6446.0], [14.3, 6446.0], [14.4, 6446.0], [14.5, 6447.0], [14.6, 6447.0], [14.7, 6447.0], [14.8, 6448.0], [14.9, 6448.0], [15.0, 6448.0], [15.1, 6449.0], [15.2, 6449.0], [15.3, 6449.0], [15.4, 6449.0], [15.5, 6449.0], [15.6, 6449.0], [15.7, 6450.0], [15.8, 6450.0], [15.9, 6450.0], [16.0, 6451.0], [16.1, 6451.0], [16.2, 6452.0], [16.3, 6452.0], [16.4, 6452.0], [16.5, 6453.0], [16.6, 6453.0], [16.7, 6454.0], [16.8, 6454.0], [16.9, 6454.0], [17.0, 6455.0], [17.1, 6457.0], [17.2, 6457.0], [17.3, 6457.0], [17.4, 6457.0], [17.5, 6458.0], [17.6, 6458.0], [17.7, 6458.0], [17.8, 6458.0], [17.9, 6459.0], [18.0, 6459.0], [18.1, 6460.0], [18.2, 6460.0], [18.3, 6460.0], [18.4, 6462.0], [18.5, 6462.0], [18.6, 6463.0], [18.7, 6463.0], [18.8, 6463.0], [18.9, 6463.0], [19.0, 6464.0], [19.1, 6464.0], [19.2, 6464.0], [19.3, 6465.0], [19.4, 6466.0], [19.5, 6466.0], [19.6, 6466.0], [19.7, 6466.0], [19.8, 6466.0], [19.9, 6467.0], [20.0, 6468.0], [20.1, 6469.0], [20.2, 6469.0], [20.3, 6469.0], [20.4, 6470.0], [20.5, 6471.0], [20.6, 6471.0], [20.7, 6472.0], [20.8, 6472.0], [20.9, 6473.0], [21.0, 6473.0], [21.1, 6475.0], [21.2, 6476.0], [21.3, 6476.0], [21.4, 6476.0], [21.5, 6476.0], [21.6, 6477.0], [21.7, 6477.0], [21.8, 6477.0], [21.9, 6479.0], [22.0, 6479.0], [22.1, 6480.0], [22.2, 6481.0], [22.3, 6481.0], [22.4, 6481.0], [22.5, 6481.0], [22.6, 6481.0], [22.7, 6482.0], [22.8, 6482.0], [22.9, 6482.0], [23.0, 6482.0], [23.1, 6482.0], [23.2, 6483.0], [23.3, 6483.0], [23.4, 6483.0], [23.5, 6483.0], [23.6, 6483.0], [23.7, 6483.0], [23.8, 6484.0], [23.9, 6485.0], [24.0, 6486.0], [24.1, 6486.0], [24.2, 6486.0], [24.3, 6487.0], [24.4, 6488.0], [24.5, 6488.0], [24.6, 6488.0], [24.7, 6489.0], [24.8, 6489.0], [24.9, 6489.0], [25.0, 6490.0], [25.1, 6490.0], [25.2, 6490.0], [25.3, 6491.0], [25.4, 6491.0], [25.5, 6494.0], [25.6, 6494.0], [25.7, 6495.0], [25.8, 6497.0], [25.9, 6497.0], [26.0, 6498.0], [26.1, 6499.0], [26.2, 6499.0], [26.3, 6499.0], [26.4, 6503.0], [26.5, 6506.0], [26.6, 6507.0], [26.7, 6510.0], [26.8, 6510.0], [26.9, 6510.0], [27.0, 6511.0], [27.1, 6511.0], [27.2, 6512.0], [27.3, 6513.0], [27.4, 6513.0], [27.5, 6514.0], [27.6, 6515.0], [27.7, 6515.0], [27.8, 6516.0], [27.9, 6517.0], [28.0, 6517.0], [28.1, 6518.0], [28.2, 6519.0], [28.3, 6519.0], [28.4, 6519.0], [28.5, 6519.0], [28.6, 6519.0], [28.7, 6519.0], [28.8, 6519.0], [28.9, 6520.0], [29.0, 6520.0], [29.1, 6520.0], [29.2, 6521.0], [29.3, 6521.0], [29.4, 6522.0], [29.5, 6522.0], [29.6, 6523.0], [29.7, 6524.0], [29.8, 6524.0], [29.9, 6525.0], [30.0, 6525.0], [30.1, 6525.0], [30.2, 6526.0], [30.3, 6526.0], [30.4, 6526.0], [30.5, 6527.0], [30.6, 6527.0], [30.7, 6527.0], [30.8, 6529.0], [30.9, 6529.0], [31.0, 6532.0], [31.1, 6532.0], [31.2, 6534.0], [31.3, 6537.0], [31.4, 6540.0], [31.5, 6576.0], [31.6, 6580.0], [31.7, 6580.0], [31.8, 6587.0], [31.9, 26459.0], [32.0, 35137.0], [32.1, 35307.0], [32.2, 35356.0], [32.3, 35375.0], [32.4, 35387.0], [32.5, 35432.0], [32.6, 35438.0], [32.7, 35439.0], [32.8, 35440.0], [32.9, 35442.0], [33.0, 35480.0], [33.1, 35506.0], [33.2, 35542.0], [33.3, 35546.0], [33.4, 35552.0], [33.5, 35567.0], [33.6, 35593.0], [33.7, 35611.0], [33.8, 35619.0], [33.9, 35623.0], [34.0, 35625.0], [34.1, 35626.0], [34.2, 35631.0], [34.3, 35635.0], [34.4, 35637.0], [34.5, 35640.0], [34.6, 35643.0], [34.7, 35649.0], [34.8, 35651.0], [34.9, 35653.0], [35.0, 35654.0], [35.1, 35659.0], [35.2, 35663.0], [35.3, 35665.0], [35.4, 35666.0], [35.5, 35671.0], [35.6, 35671.0], [35.7, 35686.0], [35.8, 35689.0], [35.9, 35692.0], [36.0, 35694.0], [36.1, 35697.0], [36.2, 35700.0], [36.3, 35703.0], [36.4, 35708.0], [36.5, 35708.0], [36.6, 35715.0], [36.7, 35715.0], [36.8, 35717.0], [36.9, 35720.0], [37.0, 35723.0], [37.1, 35725.0], [37.2, 35725.0], [37.3, 35725.0], [37.4, 35726.0], [37.5, 35727.0], [37.6, 35730.0], [37.7, 35732.0], [37.8, 35734.0], [37.9, 35738.0], [38.0, 35744.0], [38.1, 35764.0], [38.2, 35777.0], [38.3, 35786.0], [38.4, 35794.0], [38.5, 35796.0], [38.6, 35835.0], [38.7, 35854.0], [38.8, 35865.0], [38.9, 35869.0], [39.0, 35890.0], [39.1, 35931.0], [39.2, 35934.0], [39.3, 35936.0], [39.4, 35944.0], [39.5, 35956.0], [39.6, 36006.0], [39.7, 36011.0], [39.8, 36035.0], [39.9, 36071.0], [40.0, 36075.0], [40.1, 36080.0], [40.2, 36081.0], [40.3, 36082.0], [40.4, 36085.0], [40.5, 36088.0], [40.6, 36096.0], [40.7, 36103.0], [40.8, 36103.0], [40.9, 36106.0], [41.0, 36106.0], [41.1, 36109.0], [41.2, 36109.0], [41.3, 36109.0], [41.4, 36118.0], [41.5, 36119.0], [41.6, 36122.0], [41.7, 36124.0], [41.8, 36124.0], [41.9, 36125.0], [42.0, 36128.0], [42.1, 36131.0], [42.2, 36131.0], [42.3, 36131.0], [42.4, 36133.0], [42.5, 36134.0], [42.6, 36138.0], [42.7, 36138.0], [42.8, 36143.0], [42.9, 36144.0], [43.0, 36162.0], [43.1, 36164.0], [43.2, 36166.0], [43.3, 36166.0], [43.4, 36168.0], [43.5, 36170.0], [43.6, 36171.0], [43.7, 36172.0], [43.8, 36172.0], [43.9, 36175.0], [44.0, 36176.0], [44.1, 36176.0], [44.2, 36177.0], [44.3, 36177.0], [44.4, 36178.0], [44.5, 36178.0], [44.6, 36179.0], [44.7, 36179.0], [44.8, 36180.0], [44.9, 36186.0], [45.0, 36187.0], [45.1, 36187.0], [45.2, 36190.0], [45.3, 36190.0], [45.4, 36191.0], [45.5, 36191.0], [45.6, 36193.0], [45.7, 36194.0], [45.8, 36196.0], [45.9, 36200.0], [46.0, 36202.0], [46.1, 36203.0], [46.2, 36205.0], [46.3, 36206.0], [46.4, 36213.0], [46.5, 36213.0], [46.6, 36215.0], [46.7, 36218.0], [46.8, 36218.0], [46.9, 36219.0], [47.0, 36219.0], [47.1, 36220.0], [47.2, 36220.0], [47.3, 36220.0], [47.4, 36221.0], [47.5, 36221.0], [47.6, 36227.0], [47.7, 36228.0], [47.8, 36228.0], [47.9, 36228.0], [48.0, 36229.0], [48.1, 36231.0], [48.2, 36233.0], [48.3, 36234.0], [48.4, 36235.0], [48.5, 36237.0], [48.6, 36239.0], [48.7, 36241.0], [48.8, 36245.0], [48.9, 36246.0], [49.0, 36247.0], [49.1, 36247.0], [49.2, 36247.0], [49.3, 36249.0], [49.4, 36251.0], [49.5, 36254.0], [49.6, 36255.0], [49.7, 36255.0], [49.8, 36257.0], [49.9, 36258.0], [50.0, 36261.0], [50.1, 36262.0], [50.2, 36264.0], [50.3, 36265.0], [50.4, 36265.0], [50.5, 36266.0], [50.6, 36266.0], [50.7, 36267.0], [50.8, 36268.0], [50.9, 36268.0], [51.0, 36272.0], [51.1, 36273.0], [51.2, 36273.0], [51.3, 36273.0], [51.4, 36275.0], [51.5, 36276.0], [51.6, 36277.0], [51.7, 36278.0], [51.8, 36278.0], [51.9, 36279.0], [52.0, 36280.0], [52.1, 36281.0], [52.2, 36283.0], [52.3, 36283.0], [52.4, 36284.0], [52.5, 36285.0], [52.6, 36286.0], [52.7, 36286.0], [52.8, 36288.0], [52.9, 36292.0], [53.0, 36293.0], [53.1, 36293.0], [53.2, 36296.0], [53.3, 36298.0], [53.4, 36298.0], [53.5, 36300.0], [53.6, 36300.0], [53.7, 36301.0], [53.8, 36301.0], [53.9, 36301.0], [54.0, 36302.0], [54.1, 36302.0], [54.2, 36304.0], [54.3, 36305.0], [54.4, 36305.0], [54.5, 36308.0], [54.6, 36309.0], [54.7, 36312.0], [54.8, 36313.0], [54.9, 36313.0], [55.0, 36315.0], [55.1, 36316.0], [55.2, 36316.0], [55.3, 36317.0], [55.4, 36319.0], [55.5, 36319.0], [55.6, 36319.0], [55.7, 36320.0], [55.8, 36321.0], [55.9, 36323.0], [56.0, 36324.0], [56.1, 36325.0], [56.2, 36326.0], [56.3, 36327.0], [56.4, 36327.0], [56.5, 36329.0], [56.6, 36331.0], [56.7, 36332.0], [56.8, 36332.0], [56.9, 36333.0], [57.0, 36334.0], [57.1, 36334.0], [57.2, 36334.0], [57.3, 36336.0], [57.4, 36336.0], [57.5, 36336.0], [57.6, 36338.0], [57.7, 36339.0], [57.8, 36339.0], [57.9, 36340.0], [58.0, 36340.0], [58.1, 36340.0], [58.2, 36342.0], [58.3, 36344.0], [58.4, 36347.0], [58.5, 36348.0], [58.6, 36348.0], [58.7, 36350.0], [58.8, 36350.0], [58.9, 36352.0], [59.0, 36354.0], [59.1, 36354.0], [59.2, 36354.0], [59.3, 36355.0], [59.4, 36357.0], [59.5, 36357.0], [59.6, 36358.0], [59.7, 36358.0], [59.8, 36358.0], [59.9, 36361.0], [60.0, 36361.0], [60.1, 36362.0], [60.2, 36367.0], [60.3, 36368.0], [60.4, 36368.0], [60.5, 36369.0], [60.6, 36369.0], [60.7, 36369.0], [60.8, 36371.0], [60.9, 36371.0], [61.0, 36371.0], [61.1, 36371.0], [61.2, 36372.0], [61.3, 36372.0], [61.4, 36375.0], [61.5, 36375.0], [61.6, 36376.0], [61.7, 36376.0], [61.8, 36376.0], [61.9, 36376.0], [62.0, 36377.0], [62.1, 36377.0], [62.2, 36378.0], [62.3, 36379.0], [62.4, 36379.0], [62.5, 36380.0], [62.6, 36382.0], [62.7, 36384.0], [62.8, 36387.0], [62.9, 36388.0], [63.0, 36390.0], [63.1, 36390.0], [63.2, 36391.0], [63.3, 36392.0], [63.4, 36392.0], [63.5, 36394.0], [63.6, 36394.0], [63.7, 36395.0], [63.8, 36397.0], [63.9, 36397.0], [64.0, 36398.0], [64.1, 36401.0], [64.2, 36401.0], [64.3, 36404.0], [64.4, 36407.0], [64.5, 36409.0], [64.6, 36411.0], [64.7, 36414.0], [64.8, 36415.0], [64.9, 36415.0], [65.0, 36417.0], [65.1, 36418.0], [65.2, 36420.0], [65.3, 36421.0], [65.4, 36421.0], [65.5, 36421.0], [65.6, 36423.0], [65.7, 36423.0], [65.8, 36423.0], [65.9, 36424.0], [66.0, 36424.0], [66.1, 36425.0], [66.2, 36425.0], [66.3, 36428.0], [66.4, 36428.0], [66.5, 36429.0], [66.6, 36429.0], [66.7, 36429.0], [66.8, 36430.0], [66.9, 36430.0], [67.0, 36432.0], [67.1, 36436.0], [67.2, 36437.0], [67.3, 36438.0], [67.4, 36439.0], [67.5, 36440.0], [67.6, 36440.0], [67.7, 36440.0], [67.8, 36442.0], [67.9, 36443.0], [68.0, 36445.0], [68.1, 36447.0], [68.2, 36447.0], [68.3, 36448.0], [68.4, 36448.0], [68.5, 36451.0], [68.6, 36453.0], [68.7, 36455.0], [68.8, 36455.0], [68.9, 36457.0], [69.0, 36460.0], [69.1, 36461.0], [69.2, 36463.0], [69.3, 36464.0], [69.4, 36464.0], [69.5, 36465.0], [69.6, 36466.0], [69.7, 36467.0], [69.8, 36467.0], [69.9, 36470.0], [70.0, 36473.0], [70.1, 36474.0], [70.2, 36474.0], [70.3, 36477.0], [70.4, 36478.0], [70.5, 36478.0], [70.6, 36478.0], [70.7, 36479.0], [70.8, 36480.0], [70.9, 36480.0], [71.0, 36483.0], [71.1, 36483.0], [71.2, 36484.0], [71.3, 36484.0], [71.4, 36491.0], [71.5, 36491.0], [71.6, 36492.0], [71.7, 36492.0], [71.8, 36494.0], [71.9, 36496.0], [72.0, 36497.0], [72.1, 36497.0], [72.2, 36501.0], [72.3, 36501.0], [72.4, 36501.0], [72.5, 36502.0], [72.6, 36504.0], [72.7, 36505.0], [72.8, 36505.0], [72.9, 36506.0], [73.0, 36506.0], [73.1, 36506.0], [73.2, 36507.0], [73.3, 36507.0], [73.4, 36507.0], [73.5, 36507.0], [73.6, 36509.0], [73.7, 36509.0], [73.8, 36510.0], [73.9, 36512.0], [74.0, 36512.0], [74.1, 36512.0], [74.2, 36515.0], [74.3, 36515.0], [74.4, 36519.0], [74.5, 36521.0], [74.6, 36522.0], [74.7, 36523.0], [74.8, 36527.0], [74.9, 36528.0], [75.0, 36529.0], [75.1, 36530.0], [75.2, 36531.0], [75.3, 36531.0], [75.4, 36532.0], [75.5, 36533.0], [75.6, 36533.0], [75.7, 36533.0], [75.8, 36533.0], [75.9, 36535.0], [76.0, 36536.0], [76.1, 36538.0], [76.2, 36538.0], [76.3, 36539.0], [76.4, 36542.0], [76.5, 36543.0], [76.6, 36544.0], [76.7, 36544.0], [76.8, 36545.0], [76.9, 36545.0], [77.0, 36545.0], [77.1, 36546.0], [77.2, 36548.0], [77.3, 36551.0], [77.4, 36553.0], [77.5, 36554.0], [77.6, 36554.0], [77.7, 36556.0], [77.8, 36559.0], [77.9, 36560.0], [78.0, 36562.0], [78.1, 36565.0], [78.2, 36567.0], [78.3, 36570.0], [78.4, 36571.0], [78.5, 36571.0], [78.6, 36574.0], [78.7, 36577.0], [78.8, 36578.0], [78.9, 36580.0], [79.0, 36582.0], [79.1, 36584.0], [79.2, 36586.0], [79.3, 36587.0], [79.4, 36588.0], [79.5, 36590.0], [79.6, 36594.0], [79.7, 36594.0], [79.8, 36595.0], [79.9, 36596.0], [80.0, 36596.0], [80.1, 36600.0], [80.2, 36602.0], [80.3, 36603.0], [80.4, 36603.0], [80.5, 36603.0], [80.6, 36606.0], [80.7, 36607.0], [80.8, 36608.0], [80.9, 36611.0], [81.0, 36613.0], [81.1, 36616.0], [81.2, 36616.0], [81.3, 36618.0], [81.4, 36619.0], [81.5, 36619.0], [81.6, 36620.0], [81.7, 36620.0], [81.8, 36620.0], [81.9, 36621.0], [82.0, 36622.0], [82.1, 36623.0], [82.2, 36624.0], [82.3, 36625.0], [82.4, 36626.0], [82.5, 36627.0], [82.6, 36629.0], [82.7, 36630.0], [82.8, 36632.0], [82.9, 36632.0], [83.0, 36634.0], [83.1, 36634.0], [83.2, 36634.0], [83.3, 36635.0], [83.4, 36638.0], [83.5, 36639.0], [83.6, 36640.0], [83.7, 36641.0], [83.8, 36641.0], [83.9, 36641.0], [84.0, 36643.0], [84.1, 36644.0], [84.2, 36645.0], [84.3, 36645.0], [84.4, 36645.0], [84.5, 36646.0], [84.6, 36647.0], [84.7, 36648.0], [84.8, 36649.0], [84.9, 36650.0], [85.0, 36651.0], [85.1, 36657.0], [85.2, 36660.0], [85.3, 36662.0], [85.4, 36665.0], [85.5, 36665.0], [85.6, 36666.0], [85.7, 36666.0], [85.8, 36671.0], [85.9, 36671.0], [86.0, 36672.0], [86.1, 36673.0], [86.2, 36674.0], [86.3, 36676.0], [86.4, 36678.0], [86.5, 36679.0], [86.6, 36680.0], [86.7, 36683.0], [86.8, 36684.0], [86.9, 36684.0], [87.0, 36685.0], [87.1, 36685.0], [87.2, 36687.0], [87.3, 36687.0], [87.4, 36688.0], [87.5, 36690.0], [87.6, 36690.0], [87.7, 36691.0], [87.8, 36693.0], [87.9, 36700.0], [88.0, 36700.0], [88.1, 36703.0], [88.2, 36708.0], [88.3, 36709.0], [88.4, 36711.0], [88.5, 36711.0], [88.6, 36712.0], [88.7, 36712.0], [88.8, 36714.0], [88.9, 36715.0], [89.0, 36716.0], [89.1, 36717.0], [89.2, 36717.0], [89.3, 36719.0], [89.4, 36719.0], [89.5, 36721.0], [89.6, 36722.0], [89.7, 36723.0], [89.8, 36723.0], [89.9, 36726.0], [90.0, 36726.0], [90.1, 36726.0], [90.2, 36727.0], [90.3, 36728.0], [90.4, 36735.0], [90.5, 36735.0], [90.6, 36736.0], [90.7, 36736.0], [90.8, 36738.0], [90.9, 36745.0], [91.0, 36746.0], [91.1, 36758.0], [91.2, 36768.0], [91.3, 36768.0], [91.4, 36772.0], [91.5, 36773.0], [91.6, 36777.0], [91.7, 36778.0], [91.8, 36780.0], [91.9, 36781.0], [92.0, 36783.0], [92.1, 36784.0], [92.2, 36785.0], [92.3, 36786.0], [92.4, 36788.0], [92.5, 36791.0], [92.6, 36796.0], [92.7, 36800.0], [92.8, 36803.0], [92.9, 36807.0], [93.0, 36882.0], [93.1, 36905.0], [93.2, 36941.0], [93.3, 36965.0], [93.4, 36989.0], [93.5, 37041.0], [93.6, 37083.0], [93.7, 37093.0], [93.8, 37116.0], [93.9, 37129.0], [94.0, 37228.0], [94.1, 37259.0], [94.2, 37261.0], [94.3, 37289.0], [94.4, 37297.0], [94.5, 37359.0], [94.6, 37402.0], [94.7, 37403.0], [94.8, 37480.0], [94.9, 37504.0], [95.0, 37513.0], [95.1, 37608.0], [95.2, 37635.0], [95.3, 37635.0], [95.4, 37635.0], [95.5, 37737.0], [95.6, 37752.0], [95.7, 37782.0], [95.8, 37783.0], [95.9, 37841.0], [96.0, 37894.0], [96.1, 37959.0], [96.2, 37992.0], [96.3, 38003.0], [96.4, 38016.0], [96.5, 38018.0], [96.6, 38104.0], [96.7, 38139.0], [96.8, 38176.0], [96.9, 38196.0], [97.0, 38233.0], [97.1, 38275.0], [97.2, 38343.0], [97.3, 38370.0], [97.4, 38371.0], [97.5, 38397.0], [97.6, 38411.0], [97.7, 38506.0], [97.8, 38508.0], [97.9, 38545.0], [98.0, 38629.0], [98.1, 38658.0], [98.2, 38681.0], [98.3, 38692.0], [98.4, 38695.0], [98.5, 38728.0], [98.6, 38763.0], [98.7, 38805.0], [98.8, 38833.0], [98.9, 38923.0], [99.0, 38933.0], [99.1, 38970.0], [99.2, 38971.0], [99.3, 39006.0], [99.4, 39038.0], [99.5, 39107.0], [99.6, 39142.0], [99.7, 39195.0], [99.8, 39206.0], [99.9, 39247.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 6300.0, "maxY": 225.0, "series": [{"data": [[26400.0, 1.0], [35100.0, 1.0], [35300.0, 4.0], [36400.0, 81.0], [36500.0, 79.0], [36600.0, 79.0], [36700.0, 48.0], [36800.0, 4.0], [35400.0, 6.0], [35500.0, 6.0], [35600.0, 25.0], [35700.0, 24.0], [35800.0, 5.0], [35900.0, 5.0], [36000.0, 11.0], [36100.0, 52.0], [36200.0, 76.0], [36300.0, 106.0], [37200.0, 5.0], [37700.0, 4.0], [37000.0, 3.0], [36900.0, 4.0], [37800.0, 2.0], [37100.0, 2.0], [37400.0, 3.0], [37300.0, 1.0], [38400.0, 1.0], [38500.0, 3.0], [38600.0, 5.0], [38700.0, 2.0], [38800.0, 2.0], [38900.0, 4.0], [37900.0, 2.0], [38000.0, 3.0], [38100.0, 4.0], [38200.0, 2.0], [38300.0, 4.0], [37500.0, 2.0], [37600.0, 4.0], [39000.0, 2.0], [39100.0, 3.0], [39200.0, 2.0], [6300.0, 38.0], [6500.0, 55.0], [6400.0, 225.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[26400.0, 1.0], [35100.0, 1.0], [35300.0, 4.0], [36400.0, 81.0], [36500.0, 79.0], [36600.0, 79.0], [36700.0, 48.0], [36800.0, 4.0], [35400.0, 6.0], [35500.0, 6.0], [35600.0, 25.0], [35700.0, 24.0], [35800.0, 5.0], [35900.0, 5.0], [36000.0, 11.0], [36100.0, 52.0], [36200.0, 76.0], [36300.0, 106.0], [37200.0, 5.0], [37700.0, 4.0], [37000.0, 3.0], [36900.0, 4.0], [37800.0, 2.0], [37100.0, 2.0], [37400.0, 3.0], [37300.0, 1.0], [38400.0, 1.0], [38500.0, 3.0], [38600.0, 5.0], [38700.0, 2.0], [38800.0, 2.0], [38900.0, 4.0], [37900.0, 2.0], [38000.0, 3.0], [38100.0, 4.0], [38200.0, 2.0], [38300.0, 4.0], [37500.0, 2.0], [37600.0, 4.0], [39000.0, 2.0], [39100.0, 3.0], [39200.0, 2.0], [6300.0, 38.0], [6500.0, 55.0], [6400.0, 225.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 39200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 318.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 682.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 682.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 318.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 546.8016153457838, "minX": 1.68041982E12, "maxY": 1000.0, "series": [{"data": [[1.68041988E12, 546.8016153457838], [1.68041982E12, 1000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041988E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6454.965408805029, "minX": 1.0, "maxY": 39247.0, "series": [{"data": [[2.0, 39247.0], [3.0, 39206.0], [4.0, 39107.0], [5.0, 39142.0], [6.0, 39038.0], [7.0, 39006.0], [8.0, 38971.0], [9.0, 38923.0], [10.0, 38970.0], [11.0, 38933.0], [12.0, 38833.0], [13.0, 38805.0], [14.0, 38763.0], [15.0, 38728.0], [16.0, 38681.0], [17.0, 38658.0], [18.0, 38692.0], [19.0, 38695.0], [20.0, 38629.0], [21.0, 38506.0], [22.0, 38545.0], [23.0, 38508.0], [24.0, 38397.0], [25.0, 38370.0], [26.0, 38411.0], [27.0, 38371.0], [28.0, 38343.0], [29.0, 38233.0], [30.0, 38275.0], [31.0, 38176.0], [33.0, 38104.0], [32.0, 38196.0], [35.0, 38018.0], [34.0, 38139.0], [37.0, 38016.0], [36.0, 38003.0], [39.0, 37959.0], [38.0, 37992.0], [41.0, 37894.0], [40.0, 37841.0], [43.0, 37752.0], [42.0, 37782.0], [45.0, 37737.0], [44.0, 37783.0], [47.0, 37635.0], [46.0, 37635.0], [49.0, 37608.0], [48.0, 37635.0], [51.0, 37480.0], [50.0, 37513.0], [53.0, 37403.0], [52.0, 37504.0], [55.0, 37402.0], [54.0, 37359.0], [57.0, 37259.0], [56.0, 37289.0], [59.0, 37261.0], [58.0, 37297.0], [61.0, 37129.0], [60.0, 37228.0], [63.0, 37116.0], [62.0, 37083.0], [67.0, 36989.0], [66.0, 36941.0], [65.0, 37041.0], [64.0, 37093.0], [71.0, 36773.0], [70.0, 36882.0], [69.0, 36905.0], [68.0, 36965.0], [75.0, 36726.0], [74.0, 36736.0], [73.0, 36800.0], [72.0, 36807.0], [79.0, 36784.0], [78.0, 36711.0], [77.0, 36723.0], [76.0, 36803.0], [82.0, 36735.0], [81.0, 36721.0], [80.0, 36796.0], [87.0, 36786.0], [86.0, 36719.0], [85.0, 36762.333333333336], [91.0, 36783.0], [90.0, 36708.0], [89.0, 36786.5], [94.0, 36717.0], [93.0, 36714.0], [92.0, 36719.0], [99.0, 36777.0], [98.0, 36690.0], [97.0, 36778.0], [96.0, 36748.5], [102.0, 36685.0], [101.0, 36711.0], [100.0, 36687.0], [107.0, 36768.0], [106.0, 36700.0], [104.0, 36770.0], [111.0, 36684.0], [110.0, 36678.0], [109.0, 36716.0], [112.0, 36745.0], [119.0, 36685.0], [118.0, 36683.0], [117.0, 36666.0], [116.0, 36698.0], [123.0, 36736.0], [122.0, 36657.0], [121.0, 36671.0], [120.0, 36665.0], [125.0, 36735.0], [124.0, 36665.0], [135.0, 36641.0], [134.0, 36723.0], [133.0, 36727.0], [132.0, 36726.0], [131.0, 36671.0], [130.0, 36702.8], [143.0, 36645.0], [142.0, 36641.0], [141.0, 36703.0], [140.0, 36682.0], [138.0, 36645.0], [137.0, 36634.0], [136.0, 36726.0], [151.0, 36635.5], [149.0, 36638.0], [148.0, 36634.0], [147.0, 36709.0], [146.0, 36712.0], [145.0, 36649.0], [144.0, 36712.0], [159.0, 36609.0], [158.0, 36607.0], [157.0, 36616.0], [155.0, 36618.0], [154.0, 36620.0], [153.0, 36622.0], [152.0, 36643.0], [167.0, 36688.0], [166.0, 36619.0], [165.0, 36657.0], [163.0, 36655.0], [161.0, 36690.0], [160.0, 36687.0], [175.0, 36675.5], [173.0, 36616.0], [172.0, 36602.0], [171.0, 36613.0], [170.0, 36594.0], [169.0, 36619.0], [168.0, 36616.0], [183.0, 36651.0], [182.0, 36603.0], [181.0, 36666.0], [180.0, 36584.0], [178.0, 36584.0], [177.0, 36594.0], [191.0, 36647.0], [190.0, 36640.5], [188.0, 36619.5], [186.0, 36662.0], [185.0, 36660.0], [184.0, 36578.0], [197.0, 36597.0], [194.0, 36646.0], [193.0, 36562.0], [192.0, 36635.0], [207.0, 36630.0], [206.0, 36545.0], [205.0, 36553.0], [204.0, 36551.0], [203.0, 36571.0], [202.0, 36632.0], [201.0, 36634.0], [200.0, 36586.666666666664], [215.0, 36544.0], [214.0, 36621.0], [213.0, 36620.0], [212.0, 36582.5], [210.0, 36565.0], [209.0, 36625.0], [208.0, 36544.0], [223.0, 36611.0], [222.0, 36603.0], [221.0, 36538.0], [220.0, 36548.0], [219.0, 36554.0], [218.0, 36539.0], [217.0, 36620.0], [216.0, 36545.0], [231.0, 36532.0], [230.0, 36545.0], [229.0, 36596.0], [228.0, 36527.0], [227.0, 36526.5], [225.0, 36546.0], [224.0, 36603.0], [239.0, 36515.0], [238.0, 36596.0], [237.0, 36533.0], [236.0, 36533.0], [235.0, 36587.0], [234.0, 36530.0], [233.0, 36574.5], [247.0, 36506.0], [246.0, 36504.0], [245.0, 36505.0], [244.0, 36507.0], [243.0, 36549.5], [241.0, 36595.0], [240.0, 36580.0], [252.0, 36574.0], [250.0, 36509.0], [249.0, 36512.0], [248.0, 36505.0], [270.0, 36483.0], [271.0, 36477.0], [269.0, 36492.0], [268.0, 36478.0], [267.0, 36479.0], [266.0, 36525.0], [264.0, 36476.0], [262.0, 36554.0], [256.0, 36510.2], [258.0, 36478.0], [257.0, 36506.0], [261.0, 36501.0], [260.0, 36525.5], [286.0, 36528.0], [287.0, 36455.0], [285.0, 36531.0], [284.0, 36536.0], [283.0, 36533.0], [282.0, 36535.0], [281.0, 36461.0], [280.0, 36473.0], [279.0, 36542.0], [273.0, 36467.0], [272.0, 36464.0], [275.0, 36483.0], [274.0, 36533.0], [278.0, 36463.0], [277.0, 36474.0], [276.0, 36480.0], [302.0, 36512.0], [303.0, 36507.0], [301.0, 36507.0], [300.0, 36506.0], [299.0, 36512.0], [298.0, 36515.0], [297.0, 36428.0], [296.0, 36448.0], [295.0, 36510.0], [289.0, 36447.0], [288.0, 36529.0], [291.0, 36523.0], [290.0, 36453.0], [294.0, 36521.0], [293.0, 36488.0], [317.0, 36411.0], [319.0, 36425.5], [316.0, 36415.0], [315.0, 36424.0], [314.0, 36501.0], [313.0, 36497.0], [312.0, 36496.0], [311.0, 36451.5], [305.0, 36436.0], [304.0, 36430.0], [307.0, 36459.0], [335.0, 36465.0], [334.0, 36462.5], [332.0, 36390.0], [331.0, 36407.5], [329.0, 36406.5], [328.0, 36467.0], [326.0, 36459.333333333336], [323.0, 36436.0], [339.0, 36401.0], [351.0, 36381.0], [349.0, 36372.333333333336], [346.0, 36391.0], [345.0, 36411.0], [343.0, 36460.0], [342.0, 36399.0], [340.0, 36395.0], [338.0, 36464.0], [337.0, 36376.0], [336.0, 36466.0], [366.0, 36361.0], [367.0, 36377.0], [365.0, 36428.0], [364.0, 36358.0], [363.0, 36358.0], [362.0, 36442.0], [361.0, 36445.0], [360.0, 36378.0], [358.0, 36437.0], [353.0, 36440.0], [352.0, 36371.0], [355.0, 36448.0], [354.0, 36371.0], [357.0, 36379.0], [356.0, 36447.0], [383.0, 36425.0], [379.0, 36368.0], [378.0, 36429.0], [377.0, 36362.5], [375.0, 36364.0], [369.0, 36438.0], [368.0, 36354.0], [373.0, 36348.0], [372.0, 36440.0], [371.0, 36440.0], [370.0, 36432.0], [398.0, 36348.0], [399.0, 36350.0], [397.0, 36325.0], [396.0, 36344.0], [395.0, 36417.0], [394.0, 36355.0], [393.0, 36339.0], [392.0, 36339.0], [391.0, 36340.0], [385.0, 36422.5], [390.0, 36333.0], [389.0, 36407.0], [388.0, 36374.333333333336], [408.0, 36331.0], [414.0, 36329.333333333336], [411.0, 36394.0], [410.0, 36394.0], [409.0, 36398.0], [406.0, 36329.0], [404.0, 36390.0], [403.0, 36340.0], [402.0, 36329.0], [401.0, 36319.0], [400.0, 36404.0], [419.0, 36312.0], [431.0, 36375.0], [430.0, 36343.25], [426.0, 36301.0], [424.0, 36388.0], [423.0, 36352.666666666664], [421.0, 36384.0], [418.0, 36316.0], [417.0, 36392.0], [416.0, 36321.0], [446.0, 36362.0], [447.0, 36293.0], [445.0, 36354.0], [444.0, 36283.0], [443.0, 36308.0], [442.0, 36296.0], [441.0, 36300.0], [440.0, 36284.0], [439.0, 36288.0], [433.0, 36372.0], [432.0, 36376.0], [435.0, 36305.0], [434.0, 36371.0], [438.0, 36372.5], [436.0, 36293.0], [463.0, 36310.0], [461.0, 36276.0], [459.0, 36352.0], [458.0, 36281.0], [457.0, 36350.0], [456.0, 36313.0], [454.0, 36308.0], [452.0, 36285.0], [451.0, 36358.0], [450.0, 36273.0], [449.0, 36273.0], [448.0, 36278.0], [478.0, 36290.5], [479.0, 36326.0], [476.0, 36265.0], [467.0, 36336.0], [466.0, 36334.0], [465.0, 36321.0], [464.0, 36255.0], [475.0, 36247.0], [474.0, 36266.0], [473.0, 36268.0], [472.0, 36332.0], [471.0, 36334.0], [470.0, 36334.0], [469.0, 36300.5], [494.0, 36221.0], [495.0, 36247.0], [493.0, 36229.0], [492.0, 36228.0], [491.0, 36239.0], [490.0, 36242.0], [488.0, 36315.0], [487.0, 36314.5], [481.0, 36241.0], [480.0, 36309.0], [483.0, 36246.0], [482.0, 36319.0], [485.0, 36245.0], [484.0, 36313.0], [499.0, 36235.0], [509.0, 36218.0], [511.0, 36212.0], [508.0, 36286.0], [507.0, 36213.0], [506.0, 36280.25], [502.0, 36298.0], [501.0, 36223.5], [498.0, 36301.0], [497.0, 36221.0], [496.0, 36305.0], [536.0, 36215.0], [540.0, 36261.0], [543.0, 36186.0], [528.0, 36257.0], [530.0, 36268.0], [529.0, 36194.0], [542.0, 36258.0], [541.0, 36179.0], [539.0, 36171.0], [538.0, 36200.0], [537.0, 36178.0], [527.0, 36267.0], [513.0, 36220.0], [512.0, 36292.0], [515.0, 36227.0], [514.0, 36228.0], [518.0, 36284.5], [516.0, 36280.0], [526.0, 36191.0], [525.0, 36204.0], [522.0, 36278.0], [521.0, 36279.0], [520.0, 36208.0], [533.0, 36226.5], [531.0, 36262.0], [568.0, 36125.0], [574.0, 36155.5], [575.0, 36124.0], [561.0, 36131.0], [560.0, 36138.0], [563.0, 36143.0], [562.0, 36134.0], [572.0, 36109.0], [571.0, 36132.0], [569.0, 36193.0], [559.0, 36178.5], [545.0, 36252.0], [548.0, 36204.5], [546.0, 36190.0], [551.0, 36175.0], [550.0, 36235.5], [557.0, 36215.0], [556.0, 36231.0], [555.0, 36172.0], [554.0, 36166.0], [553.0, 36173.0], [567.0, 36203.0], [566.0, 36138.0], [565.0, 36119.0], [564.0, 36124.0], [604.0, 36011.0], [607.0, 35934.0], [597.0, 36101.6], [592.0, 36170.0], [606.0, 35956.0], [605.0, 36035.0], [603.0, 36006.0], [602.0, 36071.0], [601.0, 36080.0], [600.0, 36075.0], [591.0, 36176.0], [578.0, 36122.0], [576.0, 36190.0], [581.0, 36128.0], [580.0, 36103.0], [590.0, 36179.0], [589.0, 36103.0], [588.0, 36106.0], [587.0, 36177.0], [586.0, 36177.0], [585.0, 36133.5], [599.0, 36088.0], [598.0, 36166.0], [632.0, 35666.0], [638.0, 35695.5], [639.0, 35651.0], [624.0, 35764.0], [627.0, 35744.0], [626.0, 35689.0], [636.0, 35663.0], [635.0, 35725.0], [634.0, 35695.5], [623.0, 35777.0], [608.0, 35944.0], [610.0, 35936.0], [609.0, 35865.0], [612.0, 35835.0], [611.0, 35931.0], [614.0, 35794.0], [613.0, 35890.0], [622.0, 35786.0], [621.0, 35732.5], [619.0, 35723.0], [618.0, 35730.0], [617.0, 35854.0], [616.0, 35832.5], [631.0, 35671.0], [630.0, 35671.0], [629.0, 35734.0], [628.0, 35654.0], [668.0, 35542.0], [671.0, 35480.0], [656.0, 35665.0], [659.0, 35700.0], [658.0, 35659.5], [670.0, 35506.0], [669.0, 35567.0], [667.0, 35546.0], [666.0, 35619.0], [665.0, 35552.0], [664.0, 35593.0], [652.0, 35664.0], [642.0, 35725.0], [640.0, 35720.0], [644.0, 35649.0], [643.0, 35717.0], [646.0, 35631.0], [645.0, 35715.0], [651.0, 35708.0], [648.0, 35648.0], [663.0, 35650.0], [661.0, 35666.0], [682.0, 26459.0], [681.0, 35137.0], [680.0, 35307.0], [679.0, 35398.0], [677.0, 35375.0], [676.0, 35439.0], [675.0, 35387.0], [674.0, 35438.0], [673.0, 35432.0], [672.0, 35442.0], [1000.0, 6454.965408805029], [1.0, 39195.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[551.1040000000011, 26945.825000000015]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 39247.0], [3.0, 39206.0], [4.0, 39107.0], [5.0, 39142.0], [6.0, 39038.0], [7.0, 39006.0], [8.0, 38971.0], [9.0, 38923.0], [10.0, 38970.0], [11.0, 38933.0], [12.0, 38833.0], [13.0, 38805.0], [14.0, 38763.0], [15.0, 38728.0], [16.0, 38681.0], [17.0, 38658.0], [18.0, 38692.0], [19.0, 38695.0], [20.0, 38629.0], [21.0, 38506.0], [22.0, 38545.0], [23.0, 38508.0], [24.0, 38397.0], [25.0, 38370.0], [26.0, 38411.0], [27.0, 38371.0], [28.0, 38343.0], [29.0, 38233.0], [30.0, 38275.0], [31.0, 38176.0], [33.0, 38104.0], [32.0, 38196.0], [35.0, 38018.0], [34.0, 38139.0], [37.0, 38016.0], [36.0, 38003.0], [39.0, 37959.0], [38.0, 37992.0], [41.0, 37894.0], [40.0, 37841.0], [43.0, 37752.0], [42.0, 37782.0], [45.0, 37737.0], [44.0, 37783.0], [47.0, 37635.0], [46.0, 37635.0], [49.0, 37608.0], [48.0, 37635.0], [51.0, 37480.0], [50.0, 37513.0], [53.0, 37403.0], [52.0, 37504.0], [55.0, 37402.0], [54.0, 37359.0], [57.0, 37259.0], [56.0, 37289.0], [59.0, 37261.0], [58.0, 37297.0], [61.0, 37129.0], [60.0, 37228.0], [63.0, 37116.0], [62.0, 37083.0], [67.0, 36989.0], [66.0, 36941.0], [65.0, 37041.0], [64.0, 37093.0], [71.0, 36773.0], [70.0, 36882.0], [69.0, 36905.0], [68.0, 36965.0], [75.0, 36726.0], [74.0, 36736.0], [73.0, 36800.0], [72.0, 36807.0], [79.0, 36784.0], [78.0, 36711.0], [77.0, 36723.0], [76.0, 36803.0], [82.0, 36735.0], [81.0, 36721.0], [80.0, 36796.0], [87.0, 36786.0], [86.0, 36719.0], [85.0, 36762.333333333336], [91.0, 36783.0], [90.0, 36708.0], [89.0, 36786.5], [94.0, 36717.0], [93.0, 36714.0], [92.0, 36719.0], [99.0, 36777.0], [98.0, 36690.0], [97.0, 36778.0], [96.0, 36748.5], [102.0, 36685.0], [101.0, 36711.0], [100.0, 36687.0], [107.0, 36768.0], [106.0, 36700.0], [104.0, 36770.0], [111.0, 36684.0], [110.0, 36678.0], [109.0, 36716.0], [112.0, 36745.0], [119.0, 36685.0], [118.0, 36683.0], [117.0, 36666.0], [116.0, 36698.0], [123.0, 36736.0], [122.0, 36657.0], [121.0, 36671.0], [120.0, 36665.0], [125.0, 36735.0], [124.0, 36665.0], [135.0, 36641.0], [134.0, 36723.0], [133.0, 36727.0], [132.0, 36726.0], [131.0, 36671.0], [130.0, 36702.8], [143.0, 36645.0], [142.0, 36641.0], [141.0, 36703.0], [140.0, 36682.0], [138.0, 36645.0], [137.0, 36634.0], [136.0, 36726.0], [151.0, 36635.5], [149.0, 36638.0], [148.0, 36634.0], [147.0, 36709.0], [146.0, 36712.0], [145.0, 36649.0], [144.0, 36712.0], [159.0, 36609.0], [158.0, 36607.0], [157.0, 36616.0], [155.0, 36618.0], [154.0, 36620.0], [153.0, 36622.0], [152.0, 36643.0], [167.0, 36688.0], [166.0, 36619.0], [165.0, 36657.0], [163.0, 36655.0], [161.0, 36690.0], [160.0, 36687.0], [175.0, 36675.5], [173.0, 36616.0], [172.0, 36602.0], [171.0, 36613.0], [170.0, 36594.0], [169.0, 36619.0], [168.0, 36616.0], [183.0, 36651.0], [182.0, 36603.0], [181.0, 36666.0], [180.0, 36584.0], [178.0, 36584.0], [177.0, 36594.0], [191.0, 36647.0], [190.0, 36640.5], [188.0, 36619.5], [186.0, 36662.0], [185.0, 36660.0], [184.0, 36578.0], [197.0, 36597.0], [194.0, 36646.0], [193.0, 36562.0], [192.0, 36635.0], [207.0, 36630.0], [206.0, 36545.0], [205.0, 36553.0], [204.0, 36551.0], [203.0, 36571.0], [202.0, 36632.0], [201.0, 36634.0], [200.0, 36586.666666666664], [215.0, 36544.0], [214.0, 36621.0], [213.0, 36620.0], [212.0, 36582.5], [210.0, 36565.0], [209.0, 36625.0], [208.0, 36544.0], [223.0, 36611.0], [222.0, 36603.0], [221.0, 36538.0], [220.0, 36548.0], [219.0, 36554.0], [218.0, 36539.0], [217.0, 36620.0], [216.0, 36545.0], [231.0, 36532.0], [230.0, 36545.0], [229.0, 36596.0], [228.0, 36527.0], [227.0, 36526.5], [225.0, 36546.0], [224.0, 36603.0], [239.0, 36515.0], [238.0, 36596.0], [237.0, 36533.0], [236.0, 36533.0], [235.0, 36587.0], [234.0, 36530.0], [233.0, 36574.5], [247.0, 36506.0], [246.0, 36504.0], [245.0, 36505.0], [244.0, 36507.0], [243.0, 36549.5], [241.0, 36595.0], [240.0, 36580.0], [252.0, 36574.0], [250.0, 36509.0], [249.0, 36512.0], [248.0, 36505.0], [270.0, 36483.0], [271.0, 36477.0], [269.0, 36492.0], [268.0, 36478.0], [267.0, 36479.0], [266.0, 36525.0], [264.0, 36476.0], [262.0, 36554.0], [256.0, 36510.2], [258.0, 36478.0], [257.0, 36506.0], [261.0, 36501.0], [260.0, 36525.5], [286.0, 36528.0], [287.0, 36455.0], [285.0, 36531.0], [284.0, 36536.0], [283.0, 36533.0], [282.0, 36535.0], [281.0, 36461.0], [280.0, 36473.0], [279.0, 36542.0], [273.0, 36467.0], [272.0, 36464.0], [275.0, 36483.0], [274.0, 36533.0], [278.0, 36463.0], [277.0, 36474.0], [276.0, 36480.0], [302.0, 36512.0], [303.0, 36507.0], [301.0, 36507.0], [300.0, 36506.0], [299.0, 36512.0], [298.0, 36515.0], [297.0, 36428.0], [296.0, 36448.0], [295.0, 36510.0], [289.0, 36447.0], [288.0, 36529.0], [291.0, 36523.0], [290.0, 36453.0], [294.0, 36521.0], [293.0, 36488.0], [317.0, 36411.0], [319.0, 36425.5], [316.0, 36415.0], [315.0, 36424.0], [314.0, 36501.0], [313.0, 36497.0], [312.0, 36496.0], [311.0, 36451.5], [305.0, 36436.0], [304.0, 36430.0], [307.0, 36459.0], [335.0, 36465.0], [334.0, 36462.5], [332.0, 36390.0], [331.0, 36407.5], [329.0, 36406.5], [328.0, 36467.0], [326.0, 36459.333333333336], [323.0, 36436.0], [339.0, 36401.0], [351.0, 36381.0], [349.0, 36372.333333333336], [346.0, 36391.0], [345.0, 36411.0], [343.0, 36460.0], [342.0, 36399.0], [340.0, 36395.0], [338.0, 36464.0], [337.0, 36376.0], [336.0, 36466.0], [366.0, 36361.0], [367.0, 36377.0], [365.0, 36428.0], [364.0, 36358.0], [363.0, 36358.0], [362.0, 36442.0], [361.0, 36445.0], [360.0, 36378.0], [358.0, 36437.0], [353.0, 36440.0], [352.0, 36371.0], [355.0, 36448.0], [354.0, 36371.0], [357.0, 36379.0], [356.0, 36447.0], [383.0, 36425.0], [379.0, 36368.0], [378.0, 36429.0], [377.0, 36362.5], [375.0, 36364.0], [369.0, 36438.0], [368.0, 36354.0], [373.0, 36348.0], [372.0, 36440.0], [371.0, 36440.0], [370.0, 36432.0], [398.0, 36348.0], [399.0, 36350.0], [397.0, 36325.0], [396.0, 36344.0], [395.0, 36417.0], [394.0, 36355.0], [393.0, 36339.0], [392.0, 36339.0], [391.0, 36340.0], [385.0, 36422.5], [390.0, 36333.0], [389.0, 36407.0], [388.0, 36374.333333333336], [408.0, 36331.0], [414.0, 36329.333333333336], [411.0, 36394.0], [410.0, 36394.0], [409.0, 36398.0], [406.0, 36329.0], [404.0, 36390.0], [403.0, 36340.0], [402.0, 36329.0], [401.0, 36319.0], [400.0, 36404.0], [419.0, 36312.0], [431.0, 36375.0], [430.0, 36343.25], [426.0, 36301.0], [424.0, 36388.0], [423.0, 36352.666666666664], [421.0, 36384.0], [418.0, 36316.0], [417.0, 36392.0], [416.0, 36321.0], [446.0, 36362.0], [447.0, 36293.0], [445.0, 36354.0], [444.0, 36283.0], [443.0, 36308.0], [442.0, 36296.0], [441.0, 36300.0], [440.0, 36284.0], [439.0, 36288.0], [433.0, 36372.0], [432.0, 36376.0], [435.0, 36305.0], [434.0, 36371.0], [438.0, 36372.5], [436.0, 36293.0], [463.0, 36310.0], [461.0, 36276.0], [459.0, 36352.0], [458.0, 36281.0], [457.0, 36350.0], [456.0, 36313.0], [454.0, 36308.0], [452.0, 36285.0], [451.0, 36358.0], [450.0, 36273.0], [449.0, 36273.0], [448.0, 36278.0], [478.0, 36290.5], [479.0, 36326.0], [476.0, 36265.0], [467.0, 36336.0], [466.0, 36334.0], [465.0, 36321.0], [464.0, 36255.0], [475.0, 36247.0], [474.0, 36266.0], [473.0, 36268.0], [472.0, 36332.0], [471.0, 36334.0], [470.0, 36334.0], [469.0, 36300.5], [494.0, 36221.0], [495.0, 36247.0], [493.0, 36229.0], [492.0, 36228.0], [491.0, 36239.0], [490.0, 36242.0], [488.0, 36315.0], [487.0, 36314.5], [481.0, 36241.0], [480.0, 36309.0], [483.0, 36246.0], [482.0, 36319.0], [485.0, 36245.0], [484.0, 36313.0], [499.0, 36235.0], [509.0, 36218.0], [511.0, 36212.0], [508.0, 36286.0], [507.0, 36213.0], [506.0, 36280.25], [502.0, 36298.0], [501.0, 36223.5], [498.0, 36301.0], [497.0, 36221.0], [496.0, 36305.0], [536.0, 36215.0], [540.0, 36261.0], [543.0, 36186.0], [528.0, 36257.0], [530.0, 36268.0], [529.0, 36194.0], [542.0, 36258.0], [541.0, 36179.0], [539.0, 36171.0], [538.0, 36200.0], [537.0, 36178.0], [527.0, 36267.0], [513.0, 36220.0], [512.0, 36292.0], [515.0, 36227.0], [514.0, 36228.0], [518.0, 36284.5], [516.0, 36280.0], [526.0, 36191.0], [525.0, 36204.0], [522.0, 36278.0], [521.0, 36279.0], [520.0, 36208.0], [533.0, 36226.5], [531.0, 36262.0], [568.0, 36125.0], [574.0, 36155.5], [575.0, 36124.0], [561.0, 36131.0], [560.0, 36138.0], [563.0, 36143.0], [562.0, 36134.0], [572.0, 36109.0], [571.0, 36132.0], [569.0, 36193.0], [559.0, 36178.5], [545.0, 36252.0], [548.0, 36204.5], [546.0, 36190.0], [551.0, 36175.0], [550.0, 36235.5], [557.0, 36215.0], [556.0, 36231.0], [555.0, 36172.0], [554.0, 36166.0], [553.0, 36173.0], [567.0, 36203.0], [566.0, 36138.0], [565.0, 36119.0], [564.0, 36124.0], [604.0, 36011.0], [607.0, 35934.0], [597.0, 36101.6], [592.0, 36170.0], [606.0, 35956.0], [605.0, 36035.0], [603.0, 36006.0], [602.0, 36071.0], [601.0, 36080.0], [600.0, 36075.0], [591.0, 36176.0], [578.0, 36122.0], [576.0, 36190.0], [581.0, 36128.0], [580.0, 36103.0], [590.0, 36179.0], [589.0, 36103.0], [588.0, 36106.0], [587.0, 36177.0], [586.0, 36177.0], [585.0, 36133.5], [599.0, 36088.0], [598.0, 36166.0], [632.0, 35666.0], [638.0, 35695.5], [639.0, 35651.0], [624.0, 35764.0], [627.0, 35744.0], [626.0, 35689.0], [636.0, 35663.0], [635.0, 35725.0], [634.0, 35695.5], [623.0, 35777.0], [608.0, 35944.0], [610.0, 35936.0], [609.0, 35865.0], [612.0, 35835.0], [611.0, 35931.0], [614.0, 35794.0], [613.0, 35890.0], [622.0, 35786.0], [621.0, 35732.5], [619.0, 35723.0], [618.0, 35730.0], [617.0, 35854.0], [616.0, 35832.5], [631.0, 35671.0], [630.0, 35671.0], [629.0, 35734.0], [628.0, 35654.0], [668.0, 35542.0], [671.0, 35480.0], [656.0, 35665.0], [659.0, 35700.0], [658.0, 35659.5], [670.0, 35506.0], [669.0, 35567.0], [667.0, 35546.0], [666.0, 35619.0], [665.0, 35552.0], [664.0, 35593.0], [652.0, 35664.0], [642.0, 35725.0], [640.0, 35720.0], [644.0, 35649.0], [643.0, 35717.0], [646.0, 35631.0], [645.0, 35715.0], [651.0, 35708.0], [648.0, 35648.0], [663.0, 35650.0], [661.0, 35666.0], [682.0, 26459.0], [681.0, 35137.0], [680.0, 35307.0], [679.0, 35398.0], [677.0, 35375.0], [676.0, 35439.0], [675.0, 35387.0], [674.0, 35438.0], [673.0, 35432.0], [672.0, 35442.0], [1000.0, 6454.968553459119], [1.0, 39195.0]], "isOverall": false, "label": "Test Fragment", "isController": true}, {"data": [[551.1040000000011, 26945.82599999999]], "isOverall": false, "label": "Test Fragment-Aggregated", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5878.25, "minX": 1.68041988E12, "maxY": 28599.283333333333, "series": [{"data": [[1.68041988E12, 28599.283333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68041988E12, 5878.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041988E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6443.578947368421, "minX": 1.68041982E12, "maxY": 27342.913353720698, "series": [{"data": [[1.68041988E12, 26945.825000000015]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68041988E12, 27342.913353720698], [1.68041982E12, 6443.578947368421]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041988E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68041982E12, "maxY": 25461.847094801204, "series": [{"data": [[1.68041988E12, 24978.072000000004]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68041988E12, 25461.847094801204], [1.68041982E12, 0.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041988E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6057.143730886858, "minX": 1.68041982E12, "maxY": 6102.631578947367, "series": [{"data": [[1.68041988E12, 6058.007999999995]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68041988E12, 6057.143730886858], [1.68041982E12, 6102.631578947367]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041988E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26459.0, "minX": 1.68041988E12, "maxY": 39247.0, "series": [{"data": [[1.68041988E12, 39247.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68041988E12, 36930.200000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68041988E12, 39011.44]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68041988E12, 38091.1]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68041988E12, 26459.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68041988E12, 36424.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041988E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6450.5, "minX": 1.0, "maxY": 38971.0, "series": [{"data": [[1.0, 26459.0], [532.0, 36408.0], [47.0, 36965.0], [28.0, 38254.0], [59.0, 35653.0], [15.0, 38971.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[318.0, 6450.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 532.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 38971.0, "series": [{"data": [[1.0, 26459.0], [532.0, 36408.0], [47.0, 36965.0], [28.0, 38254.0], [59.0, 35653.0], [15.0, 38971.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[318.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 532.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.68041988E12, "maxY": 16.666666666666668, "series": [{"data": [[1.68041988E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041988E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.68041988E12, "maxY": 11.366666666666667, "series": [{"data": [[1.68041988E12, 3.65]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.68041988E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.68041988E12, 11.366666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68041988E12, 0.21666666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68041988E12, 1.3666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68041988E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.68041982E12, "maxY": 11.366666666666667, "series": [{"data": [[1.68041988E12, 4.983333333333333], [1.68041982E12, 0.31666666666666665]], "isOverall": false, "label": "Test Fragment-failure", "isController": true}, {"data": [[1.68041988E12, 11.366666666666667]], "isOverall": false, "label": "Test Fragment-success", "isController": true}, {"data": [[1.68041988E12, 5.3]], "isOverall": false, "label": "Login-failure", "isController": false}, {"data": [[1.68041988E12, 11.366666666666667]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041988E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.68041982E12, "maxY": 22.733333333333334, "series": [{"data": [[1.68041988E12, 22.733333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68041988E12, 10.283333333333333], [1.68041982E12, 0.31666666666666665]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68041988E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

