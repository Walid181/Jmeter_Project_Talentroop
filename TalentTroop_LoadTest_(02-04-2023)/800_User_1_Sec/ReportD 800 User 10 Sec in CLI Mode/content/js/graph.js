/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 100.0, "minX": 0.0, "maxY": 42413.0, "series": [{"data": [[0.0, 100.0], [0.1, 100.0], [0.2, 100.0], [0.3, 101.0], [0.4, 101.0], [0.5, 154.0], [0.6, 154.0], [0.7, 157.0], [0.8, 158.0], [0.9, 158.0], [1.0, 162.0], [1.1, 162.0], [1.2, 164.0], [1.3, 164.0], [1.4, 167.0], [1.5, 187.0], [1.6, 187.0], [1.7, 199.0], [1.8, 3116.0], [1.9, 3117.0], [2.0, 3144.0], [2.1, 3144.0], [2.2, 3146.0], [2.3, 3146.0], [2.4, 3146.0], [2.5, 3150.0], [2.6, 3150.0], [2.7, 3150.0], [2.8, 3153.0], [2.9, 3153.0], [3.0, 3154.0], [3.1, 3154.0], [3.2, 3266.0], [3.3, 3319.0], [3.4, 3322.0], [3.5, 3349.0], [3.6, 3349.0], [3.7, 3355.0], [3.8, 3355.0], [3.9, 3356.0], [4.0, 3356.0], [4.1, 3356.0], [4.2, 3357.0], [4.3, 3358.0], [4.4, 3358.0], [4.5, 3360.0], [4.6, 3360.0], [4.7, 3361.0], [4.8, 3364.0], [4.9, 3365.0], [5.0, 3365.0], [5.1, 3365.0], [5.2, 3366.0], [5.3, 3366.0], [5.4, 24661.0], [5.5, 32626.0], [5.6, 32626.0], [5.7, 32662.0], [5.8, 32707.0], [5.9, 32736.0], [6.0, 32783.0], [6.1, 32783.0], [6.2, 32820.0], [6.3, 32858.0], [6.4, 32931.0], [6.5, 32933.0], [6.6, 32933.0], [6.7, 37589.0], [6.8, 37870.0], [6.9, 38024.0], [7.0, 38097.0], [7.1, 38097.0], [7.2, 38167.0], [7.3, 38231.0], [7.4, 38357.0], [7.5, 38462.0], [7.6, 38462.0], [7.7, 38521.0], [7.8, 38545.0], [7.9, 38598.0], [8.0, 38620.0], [8.1, 38620.0], [8.2, 38632.0], [8.3, 38671.0], [8.4, 38676.0], [8.5, 38698.0], [8.6, 38698.0], [8.7, 38739.0], [8.8, 38748.0], [8.9, 38748.0], [9.0, 38796.0], [9.1, 38796.0], [9.2, 38821.0], [9.3, 38837.0], [9.4, 38893.0], [9.5, 38896.0], [9.6, 38896.0], [9.7, 38916.0], [9.8, 38918.0], [9.9, 38934.0], [10.0, 38937.0], [10.1, 38937.0], [10.2, 38940.0], [10.3, 38946.0], [10.4, 38947.0], [10.5, 38963.0], [10.6, 38963.0], [10.7, 38968.0], [10.8, 38979.0], [10.9, 39042.0], [11.0, 39043.0], [11.1, 39043.0], [11.2, 39045.0], [11.3, 39046.0], [11.4, 39054.0], [11.5, 39067.0], [11.6, 39067.0], [11.7, 39081.0], [11.8, 39087.0], [11.9, 39097.0], [12.0, 39097.0], [12.1, 39097.0], [12.2, 39099.0], [12.3, 39103.0], [12.4, 39105.0], [12.5, 39105.0], [12.6, 39105.0], [12.7, 39105.0], [12.8, 39107.0], [12.9, 39109.0], [13.0, 39109.0], [13.1, 39109.0], [13.2, 39110.0], [13.3, 39112.0], [13.4, 39112.0], [13.5, 39113.0], [13.6, 39113.0], [13.7, 39114.0], [13.8, 39115.0], [13.9, 39117.0], [14.0, 39118.0], [14.1, 39118.0], [14.2, 39120.0], [14.3, 39121.0], [14.4, 39125.0], [14.5, 39125.0], [14.6, 39125.0], [14.7, 39125.0], [14.8, 39126.0], [14.9, 39128.0], [15.0, 39128.0], [15.1, 39128.0], [15.2, 39129.0], [15.3, 39130.0], [15.4, 39131.0], [15.5, 39133.0], [15.6, 39133.0], [15.7, 39134.0], [15.8, 39136.0], [15.9, 39136.0], [16.0, 39136.0], [16.1, 39136.0], [16.2, 39136.0], [16.3, 39136.0], [16.4, 39137.0], [16.5, 39139.0], [16.6, 39139.0], [16.7, 39141.0], [16.8, 39142.0], [16.9, 39145.0], [17.0, 39148.0], [17.1, 39148.0], [17.2, 39148.0], [17.3, 39156.0], [17.4, 39156.0], [17.5, 39157.0], [17.6, 39157.0], [17.7, 39159.0], [17.8, 39162.0], [17.9, 39162.0], [18.0, 39163.0], [18.1, 39163.0], [18.2, 39165.0], [18.3, 39165.0], [18.4, 39165.0], [18.5, 39166.0], [18.6, 39166.0], [18.7, 39166.0], [18.8, 39167.0], [18.9, 39167.0], [19.0, 39167.0], [19.1, 39167.0], [19.2, 39168.0], [19.3, 39170.0], [19.4, 39171.0], [19.5, 39172.0], [19.6, 39172.0], [19.7, 39175.0], [19.8, 39176.0], [19.9, 39177.0], [20.0, 39177.0], [20.1, 39177.0], [20.2, 39179.0], [20.3, 39180.0], [20.4, 39183.0], [20.5, 39185.0], [20.6, 39185.0], [20.7, 39186.0], [20.8, 39188.0], [20.9, 39189.0], [21.0, 39189.0], [21.1, 39189.0], [21.2, 39190.0], [21.3, 39191.0], [21.4, 39193.0], [21.5, 39194.0], [21.6, 39194.0], [21.7, 39197.0], [21.8, 39198.0], [21.9, 39199.0], [22.0, 39200.0], [22.1, 39200.0], [22.2, 39204.0], [22.3, 39206.0], [22.4, 39206.0], [22.5, 39207.0], [22.6, 39207.0], [22.7, 39208.0], [22.8, 39209.0], [22.9, 39209.0], [23.0, 39209.0], [23.1, 39209.0], [23.2, 39209.0], [23.3, 39209.0], [23.4, 39212.0], [23.5, 39213.0], [23.6, 39213.0], [23.7, 39216.0], [23.8, 39217.0], [23.9, 39217.0], [24.0, 39217.0], [24.1, 39217.0], [24.2, 39223.0], [24.3, 39223.0], [24.4, 39223.0], [24.5, 39224.0], [24.6, 39224.0], [24.7, 39228.0], [24.8, 39229.0], [24.9, 39230.0], [25.0, 39231.0], [25.1, 39231.0], [25.2, 39231.0], [25.3, 39232.0], [25.4, 39233.0], [25.5, 39233.0], [25.6, 39233.0], [25.7, 39234.0], [25.8, 39234.0], [25.9, 39237.0], [26.0, 39240.0], [26.1, 39240.0], [26.2, 39241.0], [26.3, 39242.0], [26.4, 39244.0], [26.5, 39245.0], [26.6, 39245.0], [26.7, 39245.0], [26.8, 39246.0], [26.9, 39252.0], [27.0, 39254.0], [27.1, 39254.0], [27.2, 39255.0], [27.3, 39257.0], [27.4, 39258.0], [27.5, 39258.0], [27.6, 39258.0], [27.7, 39259.0], [27.8, 39260.0], [27.9, 39261.0], [28.0, 39264.0], [28.1, 39264.0], [28.2, 39264.0], [28.3, 39265.0], [28.4, 39265.0], [28.5, 39265.0], [28.6, 39265.0], [28.7, 39267.0], [28.8, 39267.0], [28.9, 39267.0], [29.0, 39267.0], [29.1, 39267.0], [29.2, 39269.0], [29.3, 39270.0], [29.4, 39271.0], [29.5, 39272.0], [29.6, 39272.0], [29.7, 39273.0], [29.8, 39277.0], [29.9, 39278.0], [30.0, 39281.0], [30.1, 39281.0], [30.2, 39282.0], [30.3, 39282.0], [30.4, 39283.0], [30.5, 39284.0], [30.6, 39284.0], [30.7, 39285.0], [30.8, 39285.0], [30.9, 39290.0], [31.0, 39291.0], [31.1, 39291.0], [31.2, 39292.0], [31.3, 39295.0], [31.4, 39296.0], [31.5, 39297.0], [31.6, 39297.0], [31.7, 39299.0], [31.8, 39299.0], [31.9, 39299.0], [32.0, 39299.0], [32.1, 39299.0], [32.2, 39300.0], [32.3, 39303.0], [32.4, 39308.0], [32.5, 39308.0], [32.6, 39308.0], [32.7, 39308.0], [32.8, 39310.0], [32.9, 39311.0], [33.0, 39314.0], [33.1, 39314.0], [33.2, 39314.0], [33.3, 39315.0], [33.4, 39318.0], [33.5, 39318.0], [33.6, 39318.0], [33.7, 39319.0], [33.8, 39320.0], [33.9, 39320.0], [34.0, 39321.0], [34.1, 39321.0], [34.2, 39323.0], [34.3, 39323.0], [34.4, 39323.0], [34.5, 39324.0], [34.6, 39324.0], [34.7, 39324.0], [34.8, 39324.0], [34.9, 39325.0], [35.0, 39326.0], [35.1, 39326.0], [35.2, 39326.0], [35.3, 39328.0], [35.4, 39330.0], [35.5, 39330.0], [35.6, 39330.0], [35.7, 39334.0], [35.8, 39335.0], [35.9, 39337.0], [36.0, 39337.0], [36.1, 39337.0], [36.2, 39340.0], [36.3, 39341.0], [36.4, 39343.0], [36.5, 39343.0], [36.6, 39343.0], [36.7, 39343.0], [36.8, 39348.0], [36.9, 39351.0], [37.0, 39351.0], [37.1, 39351.0], [37.2, 39352.0], [37.3, 39352.0], [37.4, 39355.0], [37.5, 39357.0], [37.6, 39357.0], [37.7, 39361.0], [37.8, 39361.0], [37.9, 39364.0], [38.0, 39364.0], [38.1, 39364.0], [38.2, 39366.0], [38.3, 39368.0], [38.4, 39370.0], [38.5, 39371.0], [38.6, 39371.0], [38.7, 39372.0], [38.8, 39373.0], [38.9, 39373.0], [39.0, 39376.0], [39.1, 39376.0], [39.2, 39377.0], [39.3, 39377.0], [39.4, 39377.0], [39.5, 39378.0], [39.6, 39378.0], [39.7, 39378.0], [39.8, 39379.0], [39.9, 39379.0], [40.0, 39379.0], [40.1, 39379.0], [40.2, 39382.0], [40.3, 39382.0], [40.4, 39383.0], [40.5, 39385.0], [40.6, 39385.0], [40.7, 39387.0], [40.8, 39388.0], [40.9, 39388.0], [41.0, 39389.0], [41.1, 39389.0], [41.2, 39389.0], [41.3, 39392.0], [41.4, 39392.0], [41.5, 39392.0], [41.6, 39392.0], [41.7, 39394.0], [41.8, 39396.0], [41.9, 39397.0], [42.0, 39398.0], [42.1, 39398.0], [42.2, 39398.0], [42.3, 39399.0], [42.4, 39400.0], [42.5, 39400.0], [42.6, 39400.0], [42.7, 39400.0], [42.8, 39401.0], [42.9, 39402.0], [43.0, 39404.0], [43.1, 39404.0], [43.2, 39407.0], [43.3, 39407.0], [43.4, 39408.0], [43.5, 39408.0], [43.6, 39408.0], [43.7, 39409.0], [43.8, 39411.0], [43.9, 39412.0], [44.0, 39417.0], [44.1, 39417.0], [44.2, 39418.0], [44.3, 39421.0], [44.4, 39421.0], [44.5, 39422.0], [44.6, 39422.0], [44.7, 39422.0], [44.8, 39424.0], [44.9, 39426.0], [45.0, 39428.0], [45.1, 39428.0], [45.2, 39428.0], [45.3, 39429.0], [45.4, 39430.0], [45.5, 39431.0], [45.6, 39431.0], [45.7, 39432.0], [45.8, 39433.0], [45.9, 39436.0], [46.0, 39437.0], [46.1, 39437.0], [46.2, 39439.0], [46.3, 39439.0], [46.4, 39440.0], [46.5, 39441.0], [46.6, 39441.0], [46.7, 39441.0], [46.8, 39441.0], [46.9, 39442.0], [47.0, 39443.0], [47.1, 39443.0], [47.2, 39446.0], [47.3, 39446.0], [47.4, 39447.0], [47.5, 39447.0], [47.6, 39447.0], [47.7, 39449.0], [47.8, 39449.0], [47.9, 39449.0], [48.0, 39453.0], [48.1, 39453.0], [48.2, 39456.0], [48.3, 39456.0], [48.4, 39457.0], [48.5, 39458.0], [48.6, 39458.0], [48.7, 39462.0], [48.8, 39463.0], [48.9, 39463.0], [49.0, 39465.0], [49.1, 39465.0], [49.2, 39466.0], [49.3, 39471.0], [49.4, 39476.0], [49.5, 39477.0], [49.6, 39477.0], [49.7, 39479.0], [49.8, 39479.0], [49.9, 39481.0], [50.0, 39481.0], [50.1, 39481.0], [50.2, 39483.0], [50.3, 39485.0], [50.4, 39486.0], [50.5, 39486.0], [50.6, 39486.0], [50.7, 39486.0], [50.8, 39487.0], [50.9, 39487.0], [51.0, 39488.0], [51.1, 39488.0], [51.2, 39488.0], [51.3, 39489.0], [51.4, 39489.0], [51.5, 39489.0], [51.6, 39489.0], [51.7, 39490.0], [51.8, 39490.0], [51.9, 39490.0], [52.0, 39490.0], [52.1, 39490.0], [52.2, 39493.0], [52.3, 39493.0], [52.4, 39493.0], [52.5, 39496.0], [52.6, 39496.0], [52.7, 39496.0], [52.8, 39497.0], [52.9, 39497.0], [53.0, 39498.0], [53.1, 39498.0], [53.2, 39499.0], [53.3, 39499.0], [53.4, 39499.0], [53.5, 39500.0], [53.6, 39500.0], [53.7, 39500.0], [53.8, 39501.0], [53.9, 39502.0], [54.0, 39504.0], [54.1, 39504.0], [54.2, 39504.0], [54.3, 39505.0], [54.4, 39506.0], [54.5, 39509.0], [54.6, 39509.0], [54.7, 39509.0], [54.8, 39510.0], [54.9, 39511.0], [55.0, 39512.0], [55.1, 39512.0], [55.2, 39512.0], [55.3, 39513.0], [55.4, 39516.0], [55.5, 39517.0], [55.6, 39517.0], [55.7, 39517.0], [55.8, 39519.0], [55.9, 39519.0], [56.0, 39520.0], [56.1, 39520.0], [56.2, 39521.0], [56.3, 39521.0], [56.4, 39521.0], [56.5, 39521.0], [56.6, 39521.0], [56.7, 39522.0], [56.8, 39522.0], [56.9, 39526.0], [57.0, 39527.0], [57.1, 39527.0], [57.2, 39530.0], [57.3, 39530.0], [57.4, 39532.0], [57.5, 39532.0], [57.6, 39532.0], [57.7, 39532.0], [57.8, 39534.0], [57.9, 39536.0], [58.0, 39536.0], [58.1, 39536.0], [58.2, 39537.0], [58.3, 39537.0], [58.4, 39537.0], [58.5, 39539.0], [58.6, 39539.0], [58.7, 39540.0], [58.8, 39542.0], [58.9, 39542.0], [59.0, 39542.0], [59.1, 39542.0], [59.2, 39544.0], [59.3, 39545.0], [59.4, 39547.0], [59.5, 39548.0], [59.6, 39548.0], [59.7, 39548.0], [59.8, 39549.0], [59.9, 39550.0], [60.0, 39550.0], [60.1, 39550.0], [60.2, 39551.0], [60.3, 39551.0], [60.4, 39555.0], [60.5, 39557.0], [60.6, 39557.0], [60.7, 39558.0], [60.8, 39559.0], [60.9, 39559.0], [61.0, 39559.0], [61.1, 39559.0], [61.2, 39560.0], [61.3, 39563.0], [61.4, 39564.0], [61.5, 39565.0], [61.6, 39565.0], [61.7, 39565.0], [61.8, 39566.0], [61.9, 39567.0], [62.0, 39568.0], [62.1, 39568.0], [62.2, 39569.0], [62.3, 39569.0], [62.4, 39569.0], [62.5, 39569.0], [62.6, 39569.0], [62.7, 39569.0], [62.8, 39570.0], [62.9, 39571.0], [63.0, 39572.0], [63.1, 39572.0], [63.2, 39577.0], [63.3, 39577.0], [63.4, 39577.0], [63.5, 39578.0], [63.6, 39578.0], [63.7, 39578.0], [63.8, 39580.0], [63.9, 39580.0], [64.0, 39582.0], [64.1, 39582.0], [64.2, 39583.0], [64.3, 39584.0], [64.4, 39585.0], [64.5, 39585.0], [64.6, 39585.0], [64.7, 39586.0], [64.8, 39587.0], [64.9, 39587.0], [65.0, 39588.0], [65.1, 39588.0], [65.2, 39588.0], [65.3, 39588.0], [65.4, 39589.0], [65.5, 39589.0], [65.6, 39589.0], [65.7, 39589.0], [65.8, 39591.0], [65.9, 39592.0], [66.0, 39594.0], [66.1, 39594.0], [66.2, 39595.0], [66.3, 39595.0], [66.4, 39597.0], [66.5, 39598.0], [66.6, 39598.0], [66.7, 39598.0], [66.8, 39600.0], [66.9, 39600.0], [67.0, 39601.0], [67.1, 39601.0], [67.2, 39602.0], [67.3, 39603.0], [67.4, 39603.0], [67.5, 39604.0], [67.6, 39604.0], [67.7, 39604.0], [67.8, 39604.0], [67.9, 39604.0], [68.0, 39605.0], [68.1, 39605.0], [68.2, 39605.0], [68.3, 39607.0], [68.4, 39608.0], [68.5, 39609.0], [68.6, 39609.0], [68.7, 39611.0], [68.8, 39612.0], [68.9, 39613.0], [69.0, 39614.0], [69.1, 39614.0], [69.2, 39615.0], [69.3, 39615.0], [69.4, 39615.0], [69.5, 39615.0], [69.6, 39615.0], [69.7, 39619.0], [69.8, 39620.0], [69.9, 39627.0], [70.0, 39628.0], [70.1, 39628.0], [70.2, 39628.0], [70.3, 39628.0], [70.4, 39628.0], [70.5, 39629.0], [70.6, 39629.0], [70.7, 39630.0], [70.8, 39630.0], [70.9, 39631.0], [71.0, 39631.0], [71.1, 39631.0], [71.2, 39632.0], [71.3, 39632.0], [71.4, 39632.0], [71.5, 39633.0], [71.6, 39633.0], [71.7, 39634.0], [71.8, 39634.0], [71.9, 39634.0], [72.0, 39634.0], [72.1, 39634.0], [72.2, 39635.0], [72.3, 39637.0], [72.4, 39637.0], [72.5, 39637.0], [72.6, 39637.0], [72.7, 39637.0], [72.8, 39639.0], [72.9, 39639.0], [73.0, 39639.0], [73.1, 39639.0], [73.2, 39640.0], [73.3, 39641.0], [73.4, 39641.0], [73.5, 39641.0], [73.6, 39641.0], [73.7, 39647.0], [73.8, 39648.0], [73.9, 39649.0], [74.0, 39653.0], [74.1, 39653.0], [74.2, 39653.0], [74.3, 39656.0], [74.4, 39658.0], [74.5, 39658.0], [74.6, 39658.0], [74.7, 39659.0], [74.8, 39659.0], [74.9, 39660.0], [75.0, 39661.0], [75.1, 39661.0], [75.2, 39661.0], [75.3, 39666.0], [75.4, 39666.0], [75.5, 39667.0], [75.6, 39667.0], [75.7, 39670.0], [75.8, 39670.0], [75.9, 39675.0], [76.0, 39675.0], [76.1, 39675.0], [76.2, 39676.0], [76.3, 39677.0], [76.4, 39679.0], [76.5, 39680.0], [76.6, 39680.0], [76.7, 39683.0], [76.8, 39687.0], [76.9, 39688.0], [77.0, 39688.0], [77.1, 39688.0], [77.2, 39690.0], [77.3, 39691.0], [77.4, 39692.0], [77.5, 39694.0], [77.6, 39694.0], [77.7, 39695.0], [77.8, 39695.0], [77.9, 39696.0], [78.0, 39698.0], [78.1, 39698.0], [78.2, 39699.0], [78.3, 39699.0], [78.4, 39700.0], [78.5, 39701.0], [78.6, 39701.0], [78.7, 39701.0], [78.8, 39703.0], [78.9, 39705.0], [79.0, 39705.0], [79.1, 39705.0], [79.2, 39706.0], [79.3, 39708.0], [79.4, 39708.0], [79.5, 39708.0], [79.6, 39708.0], [79.7, 39711.0], [79.8, 39713.0], [79.9, 39714.0], [80.0, 39718.0], [80.1, 39718.0], [80.2, 39720.0], [80.3, 39721.0], [80.4, 39721.0], [80.5, 39724.0], [80.6, 39724.0], [80.7, 39724.0], [80.8, 39725.0], [80.9, 39727.0], [81.0, 39727.0], [81.1, 39727.0], [81.2, 39728.0], [81.3, 39729.0], [81.4, 39731.0], [81.5, 39732.0], [81.6, 39732.0], [81.7, 39735.0], [81.8, 39736.0], [81.9, 39738.0], [82.0, 39739.0], [82.1, 39739.0], [82.2, 39739.0], [82.3, 39740.0], [82.4, 39741.0], [82.5, 39742.0], [82.6, 39742.0], [82.7, 39742.0], [82.8, 39743.0], [82.9, 39744.0], [83.0, 39744.0], [83.1, 39744.0], [83.2, 39747.0], [83.3, 39747.0], [83.4, 39748.0], [83.5, 39751.0], [83.6, 39751.0], [83.7, 39755.0], [83.8, 39761.0], [83.9, 39763.0], [84.0, 39764.0], [84.1, 39764.0], [84.2, 39764.0], [84.3, 39764.0], [84.4, 39765.0], [84.5, 39766.0], [84.6, 39766.0], [84.7, 39767.0], [84.8, 39767.0], [84.9, 39772.0], [85.0, 39772.0], [85.1, 39772.0], [85.2, 39772.0], [85.3, 39776.0], [85.4, 39779.0], [85.5, 39779.0], [85.6, 39779.0], [85.7, 39780.0], [85.8, 39783.0], [85.9, 39783.0], [86.0, 39784.0], [86.1, 39784.0], [86.2, 39784.0], [86.3, 39786.0], [86.4, 39787.0], [86.5, 39787.0], [86.6, 39787.0], [86.7, 39788.0], [86.8, 39789.0], [86.9, 39789.0], [87.0, 39789.0], [87.1, 39789.0], [87.2, 39789.0], [87.3, 39789.0], [87.4, 39793.0], [87.5, 39794.0], [87.6, 39794.0], [87.7, 39796.0], [87.8, 39797.0], [87.9, 39798.0], [88.0, 39798.0], [88.1, 39798.0], [88.2, 39798.0], [88.3, 39798.0], [88.4, 39799.0], [88.5, 39803.0], [88.6, 39803.0], [88.7, 39804.0], [88.8, 39804.0], [88.9, 39807.0], [89.0, 39809.0], [89.1, 39809.0], [89.2, 39809.0], [89.3, 39815.0], [89.4, 39816.0], [89.5, 39819.0], [89.6, 39819.0], [89.7, 39820.0], [89.8, 39821.0], [89.9, 39823.0], [90.0, 39824.0], [90.1, 39824.0], [90.2, 39825.0], [90.3, 39825.0], [90.4, 39826.0], [90.5, 39826.0], [90.6, 39826.0], [90.7, 39828.0], [90.8, 39829.0], [90.9, 39832.0], [91.0, 39833.0], [91.1, 39833.0], [91.2, 39833.0], [91.3, 39835.0], [91.4, 39869.0], [91.5, 39876.0], [91.6, 39876.0], [91.7, 39883.0], [91.8, 39918.0], [91.9, 39957.0], [92.0, 40002.0], [92.1, 40002.0], [92.2, 40032.0], [92.3, 40116.0], [92.4, 40118.0], [92.5, 40147.0], [92.6, 40147.0], [92.7, 40198.0], [92.8, 40230.0], [92.9, 40266.0], [93.0, 40300.0], [93.1, 40300.0], [93.2, 40347.0], [93.3, 40387.0], [93.4, 40419.0], [93.5, 40497.0], [93.6, 40497.0], [93.7, 40505.0], [93.8, 40547.0], [93.9, 40588.0], [94.0, 40628.0], [94.1, 40628.0], [94.2, 40652.0], [94.3, 40699.0], [94.4, 40728.0], [94.5, 40771.0], [94.6, 40771.0], [94.7, 40782.0], [94.8, 40855.0], [94.9, 40856.0], [95.0, 40931.0], [95.1, 40931.0], [95.2, 40976.0], [95.3, 41004.0], [95.4, 41051.0], [95.5, 41055.0], [95.6, 41055.0], [95.7, 41125.0], [95.8, 41154.0], [95.9, 41199.0], [96.0, 41229.0], [96.1, 41229.0], [96.2, 41275.0], [96.3, 41311.0], [96.4, 41315.0], [96.5, 41387.0], [96.6, 41387.0], [96.7, 41424.0], [96.8, 41464.0], [96.9, 41493.0], [97.0, 41573.0], [97.1, 41573.0], [97.2, 41579.0], [97.3, 41613.0], [97.4, 41653.0], [97.5, 41700.0], [97.6, 41700.0], [97.7, 41739.0], [97.8, 41772.0], [97.9, 41777.0], [98.0, 41811.0], [98.1, 41811.0], [98.2, 41852.0], [98.3, 41913.0], [98.4, 41956.0], [98.5, 41998.0], [98.6, 41998.0], [98.7, 41999.0], [98.8, 42075.0], [98.9, 42078.0], [99.0, 42151.0], [99.1, 42151.0], [99.2, 42152.0], [99.3, 42225.0], [99.4, 42260.0], [99.5, 42301.0], [99.6, 42301.0], [99.7, 42363.0], [99.8, 42374.0], [99.9, 42413.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 100.0], [0.1, 100.0], [0.2, 100.0], [0.3, 101.0], [0.4, 101.0], [0.5, 154.0], [0.6, 154.0], [0.7, 157.0], [0.8, 158.0], [0.9, 158.0], [1.0, 162.0], [1.1, 162.0], [1.2, 164.0], [1.3, 164.0], [1.4, 167.0], [1.5, 187.0], [1.6, 187.0], [1.7, 199.0], [1.8, 3116.0], [1.9, 3117.0], [2.0, 3144.0], [2.1, 3144.0], [2.2, 3146.0], [2.3, 3146.0], [2.4, 3146.0], [2.5, 3150.0], [2.6, 3150.0], [2.7, 3150.0], [2.8, 3153.0], [2.9, 3153.0], [3.0, 3154.0], [3.1, 3154.0], [3.2, 3266.0], [3.3, 3319.0], [3.4, 3322.0], [3.5, 3349.0], [3.6, 3349.0], [3.7, 3355.0], [3.8, 3355.0], [3.9, 3356.0], [4.0, 3356.0], [4.1, 3356.0], [4.2, 3357.0], [4.3, 3358.0], [4.4, 3358.0], [4.5, 3360.0], [4.6, 3360.0], [4.7, 3361.0], [4.8, 3364.0], [4.9, 3365.0], [5.0, 3365.0], [5.1, 3365.0], [5.2, 3366.0], [5.3, 3366.0], [5.4, 24661.0], [5.5, 32626.0], [5.6, 32626.0], [5.7, 32662.0], [5.8, 32707.0], [5.9, 32736.0], [6.0, 32783.0], [6.1, 32783.0], [6.2, 32820.0], [6.3, 32858.0], [6.4, 32931.0], [6.5, 32933.0], [6.6, 32933.0], [6.7, 37589.0], [6.8, 37870.0], [6.9, 38024.0], [7.0, 38097.0], [7.1, 38097.0], [7.2, 38167.0], [7.3, 38231.0], [7.4, 38357.0], [7.5, 38462.0], [7.6, 38462.0], [7.7, 38521.0], [7.8, 38545.0], [7.9, 38598.0], [8.0, 38620.0], [8.1, 38620.0], [8.2, 38632.0], [8.3, 38671.0], [8.4, 38676.0], [8.5, 38698.0], [8.6, 38698.0], [8.7, 38739.0], [8.8, 38748.0], [8.9, 38748.0], [9.0, 38796.0], [9.1, 38796.0], [9.2, 38821.0], [9.3, 38837.0], [9.4, 38893.0], [9.5, 38896.0], [9.6, 38896.0], [9.7, 38916.0], [9.8, 38918.0], [9.9, 38934.0], [10.0, 38937.0], [10.1, 38937.0], [10.2, 38940.0], [10.3, 38946.0], [10.4, 38947.0], [10.5, 38963.0], [10.6, 38963.0], [10.7, 38968.0], [10.8, 38979.0], [10.9, 39042.0], [11.0, 39043.0], [11.1, 39043.0], [11.2, 39045.0], [11.3, 39046.0], [11.4, 39054.0], [11.5, 39067.0], [11.6, 39067.0], [11.7, 39081.0], [11.8, 39087.0], [11.9, 39097.0], [12.0, 39097.0], [12.1, 39097.0], [12.2, 39099.0], [12.3, 39103.0], [12.4, 39105.0], [12.5, 39105.0], [12.6, 39105.0], [12.7, 39105.0], [12.8, 39107.0], [12.9, 39109.0], [13.0, 39109.0], [13.1, 39109.0], [13.2, 39110.0], [13.3, 39112.0], [13.4, 39112.0], [13.5, 39113.0], [13.6, 39113.0], [13.7, 39114.0], [13.8, 39115.0], [13.9, 39117.0], [14.0, 39118.0], [14.1, 39118.0], [14.2, 39120.0], [14.3, 39121.0], [14.4, 39125.0], [14.5, 39125.0], [14.6, 39125.0], [14.7, 39125.0], [14.8, 39126.0], [14.9, 39128.0], [15.0, 39128.0], [15.1, 39128.0], [15.2, 39129.0], [15.3, 39130.0], [15.4, 39131.0], [15.5, 39133.0], [15.6, 39133.0], [15.7, 39134.0], [15.8, 39136.0], [15.9, 39136.0], [16.0, 39136.0], [16.1, 39136.0], [16.2, 39136.0], [16.3, 39136.0], [16.4, 39137.0], [16.5, 39139.0], [16.6, 39139.0], [16.7, 39141.0], [16.8, 39142.0], [16.9, 39145.0], [17.0, 39148.0], [17.1, 39148.0], [17.2, 39148.0], [17.3, 39156.0], [17.4, 39156.0], [17.5, 39157.0], [17.6, 39157.0], [17.7, 39159.0], [17.8, 39162.0], [17.9, 39162.0], [18.0, 39163.0], [18.1, 39163.0], [18.2, 39165.0], [18.3, 39165.0], [18.4, 39165.0], [18.5, 39166.0], [18.6, 39166.0], [18.7, 39166.0], [18.8, 39167.0], [18.9, 39167.0], [19.0, 39167.0], [19.1, 39167.0], [19.2, 39168.0], [19.3, 39170.0], [19.4, 39171.0], [19.5, 39172.0], [19.6, 39172.0], [19.7, 39175.0], [19.8, 39176.0], [19.9, 39177.0], [20.0, 39177.0], [20.1, 39177.0], [20.2, 39179.0], [20.3, 39180.0], [20.4, 39183.0], [20.5, 39185.0], [20.6, 39185.0], [20.7, 39186.0], [20.8, 39188.0], [20.9, 39189.0], [21.0, 39189.0], [21.1, 39189.0], [21.2, 39190.0], [21.3, 39191.0], [21.4, 39193.0], [21.5, 39194.0], [21.6, 39194.0], [21.7, 39197.0], [21.8, 39198.0], [21.9, 39199.0], [22.0, 39200.0], [22.1, 39200.0], [22.2, 39204.0], [22.3, 39206.0], [22.4, 39206.0], [22.5, 39207.0], [22.6, 39207.0], [22.7, 39208.0], [22.8, 39209.0], [22.9, 39209.0], [23.0, 39209.0], [23.1, 39209.0], [23.2, 39209.0], [23.3, 39209.0], [23.4, 39212.0], [23.5, 39213.0], [23.6, 39213.0], [23.7, 39216.0], [23.8, 39217.0], [23.9, 39217.0], [24.0, 39217.0], [24.1, 39217.0], [24.2, 39223.0], [24.3, 39223.0], [24.4, 39223.0], [24.5, 39224.0], [24.6, 39224.0], [24.7, 39228.0], [24.8, 39229.0], [24.9, 39230.0], [25.0, 39231.0], [25.1, 39231.0], [25.2, 39231.0], [25.3, 39232.0], [25.4, 39233.0], [25.5, 39233.0], [25.6, 39233.0], [25.7, 39234.0], [25.8, 39234.0], [25.9, 39237.0], [26.0, 39240.0], [26.1, 39240.0], [26.2, 39241.0], [26.3, 39242.0], [26.4, 39244.0], [26.5, 39245.0], [26.6, 39245.0], [26.7, 39245.0], [26.8, 39246.0], [26.9, 39252.0], [27.0, 39254.0], [27.1, 39254.0], [27.2, 39255.0], [27.3, 39257.0], [27.4, 39258.0], [27.5, 39258.0], [27.6, 39258.0], [27.7, 39259.0], [27.8, 39260.0], [27.9, 39261.0], [28.0, 39264.0], [28.1, 39264.0], [28.2, 39264.0], [28.3, 39265.0], [28.4, 39265.0], [28.5, 39265.0], [28.6, 39265.0], [28.7, 39267.0], [28.8, 39267.0], [28.9, 39267.0], [29.0, 39267.0], [29.1, 39267.0], [29.2, 39269.0], [29.3, 39270.0], [29.4, 39271.0], [29.5, 39272.0], [29.6, 39272.0], [29.7, 39273.0], [29.8, 39277.0], [29.9, 39278.0], [30.0, 39281.0], [30.1, 39281.0], [30.2, 39282.0], [30.3, 39282.0], [30.4, 39283.0], [30.5, 39284.0], [30.6, 39284.0], [30.7, 39285.0], [30.8, 39285.0], [30.9, 39290.0], [31.0, 39291.0], [31.1, 39291.0], [31.2, 39292.0], [31.3, 39295.0], [31.4, 39296.0], [31.5, 39297.0], [31.6, 39297.0], [31.7, 39299.0], [31.8, 39299.0], [31.9, 39299.0], [32.0, 39299.0], [32.1, 39299.0], [32.2, 39300.0], [32.3, 39303.0], [32.4, 39308.0], [32.5, 39308.0], [32.6, 39308.0], [32.7, 39308.0], [32.8, 39310.0], [32.9, 39311.0], [33.0, 39314.0], [33.1, 39314.0], [33.2, 39314.0], [33.3, 39315.0], [33.4, 39318.0], [33.5, 39318.0], [33.6, 39318.0], [33.7, 39319.0], [33.8, 39320.0], [33.9, 39320.0], [34.0, 39321.0], [34.1, 39321.0], [34.2, 39323.0], [34.3, 39323.0], [34.4, 39323.0], [34.5, 39324.0], [34.6, 39324.0], [34.7, 39324.0], [34.8, 39324.0], [34.9, 39325.0], [35.0, 39326.0], [35.1, 39326.0], [35.2, 39326.0], [35.3, 39328.0], [35.4, 39330.0], [35.5, 39330.0], [35.6, 39330.0], [35.7, 39334.0], [35.8, 39335.0], [35.9, 39337.0], [36.0, 39337.0], [36.1, 39337.0], [36.2, 39340.0], [36.3, 39341.0], [36.4, 39343.0], [36.5, 39343.0], [36.6, 39343.0], [36.7, 39343.0], [36.8, 39348.0], [36.9, 39351.0], [37.0, 39351.0], [37.1, 39351.0], [37.2, 39352.0], [37.3, 39352.0], [37.4, 39355.0], [37.5, 39357.0], [37.6, 39357.0], [37.7, 39361.0], [37.8, 39361.0], [37.9, 39364.0], [38.0, 39364.0], [38.1, 39364.0], [38.2, 39366.0], [38.3, 39368.0], [38.4, 39370.0], [38.5, 39371.0], [38.6, 39371.0], [38.7, 39372.0], [38.8, 39373.0], [38.9, 39373.0], [39.0, 39376.0], [39.1, 39376.0], [39.2, 39377.0], [39.3, 39377.0], [39.4, 39377.0], [39.5, 39378.0], [39.6, 39378.0], [39.7, 39378.0], [39.8, 39379.0], [39.9, 39379.0], [40.0, 39379.0], [40.1, 39379.0], [40.2, 39382.0], [40.3, 39382.0], [40.4, 39383.0], [40.5, 39385.0], [40.6, 39385.0], [40.7, 39387.0], [40.8, 39388.0], [40.9, 39388.0], [41.0, 39389.0], [41.1, 39389.0], [41.2, 39389.0], [41.3, 39392.0], [41.4, 39392.0], [41.5, 39392.0], [41.6, 39392.0], [41.7, 39394.0], [41.8, 39396.0], [41.9, 39397.0], [42.0, 39398.0], [42.1, 39398.0], [42.2, 39398.0], [42.3, 39399.0], [42.4, 39400.0], [42.5, 39400.0], [42.6, 39400.0], [42.7, 39400.0], [42.8, 39401.0], [42.9, 39402.0], [43.0, 39404.0], [43.1, 39404.0], [43.2, 39407.0], [43.3, 39407.0], [43.4, 39408.0], [43.5, 39408.0], [43.6, 39408.0], [43.7, 39409.0], [43.8, 39411.0], [43.9, 39412.0], [44.0, 39417.0], [44.1, 39417.0], [44.2, 39418.0], [44.3, 39421.0], [44.4, 39421.0], [44.5, 39422.0], [44.6, 39422.0], [44.7, 39422.0], [44.8, 39424.0], [44.9, 39426.0], [45.0, 39428.0], [45.1, 39428.0], [45.2, 39428.0], [45.3, 39429.0], [45.4, 39430.0], [45.5, 39431.0], [45.6, 39431.0], [45.7, 39432.0], [45.8, 39433.0], [45.9, 39436.0], [46.0, 39437.0], [46.1, 39437.0], [46.2, 39439.0], [46.3, 39439.0], [46.4, 39440.0], [46.5, 39441.0], [46.6, 39441.0], [46.7, 39441.0], [46.8, 39441.0], [46.9, 39442.0], [47.0, 39443.0], [47.1, 39443.0], [47.2, 39446.0], [47.3, 39446.0], [47.4, 39447.0], [47.5, 39447.0], [47.6, 39447.0], [47.7, 39449.0], [47.8, 39449.0], [47.9, 39449.0], [48.0, 39453.0], [48.1, 39453.0], [48.2, 39456.0], [48.3, 39456.0], [48.4, 39457.0], [48.5, 39458.0], [48.6, 39458.0], [48.7, 39462.0], [48.8, 39463.0], [48.9, 39463.0], [49.0, 39465.0], [49.1, 39465.0], [49.2, 39466.0], [49.3, 39471.0], [49.4, 39476.0], [49.5, 39477.0], [49.6, 39477.0], [49.7, 39479.0], [49.8, 39479.0], [49.9, 39481.0], [50.0, 39481.0], [50.1, 39481.0], [50.2, 39483.0], [50.3, 39485.0], [50.4, 39486.0], [50.5, 39486.0], [50.6, 39486.0], [50.7, 39486.0], [50.8, 39487.0], [50.9, 39487.0], [51.0, 39488.0], [51.1, 39488.0], [51.2, 39488.0], [51.3, 39489.0], [51.4, 39489.0], [51.5, 39489.0], [51.6, 39489.0], [51.7, 39490.0], [51.8, 39490.0], [51.9, 39490.0], [52.0, 39490.0], [52.1, 39490.0], [52.2, 39493.0], [52.3, 39493.0], [52.4, 39493.0], [52.5, 39496.0], [52.6, 39496.0], [52.7, 39496.0], [52.8, 39497.0], [52.9, 39497.0], [53.0, 39498.0], [53.1, 39498.0], [53.2, 39499.0], [53.3, 39499.0], [53.4, 39499.0], [53.5, 39500.0], [53.6, 39500.0], [53.7, 39500.0], [53.8, 39501.0], [53.9, 39502.0], [54.0, 39504.0], [54.1, 39504.0], [54.2, 39504.0], [54.3, 39505.0], [54.4, 39506.0], [54.5, 39509.0], [54.6, 39509.0], [54.7, 39509.0], [54.8, 39510.0], [54.9, 39511.0], [55.0, 39512.0], [55.1, 39512.0], [55.2, 39512.0], [55.3, 39513.0], [55.4, 39516.0], [55.5, 39517.0], [55.6, 39517.0], [55.7, 39517.0], [55.8, 39519.0], [55.9, 39519.0], [56.0, 39520.0], [56.1, 39520.0], [56.2, 39521.0], [56.3, 39521.0], [56.4, 39521.0], [56.5, 39521.0], [56.6, 39521.0], [56.7, 39522.0], [56.8, 39522.0], [56.9, 39526.0], [57.0, 39527.0], [57.1, 39527.0], [57.2, 39530.0], [57.3, 39530.0], [57.4, 39532.0], [57.5, 39532.0], [57.6, 39532.0], [57.7, 39532.0], [57.8, 39534.0], [57.9, 39536.0], [58.0, 39536.0], [58.1, 39536.0], [58.2, 39537.0], [58.3, 39537.0], [58.4, 39537.0], [58.5, 39539.0], [58.6, 39539.0], [58.7, 39540.0], [58.8, 39542.0], [58.9, 39542.0], [59.0, 39542.0], [59.1, 39542.0], [59.2, 39544.0], [59.3, 39545.0], [59.4, 39547.0], [59.5, 39548.0], [59.6, 39548.0], [59.7, 39548.0], [59.8, 39549.0], [59.9, 39550.0], [60.0, 39550.0], [60.1, 39550.0], [60.2, 39551.0], [60.3, 39551.0], [60.4, 39555.0], [60.5, 39557.0], [60.6, 39557.0], [60.7, 39558.0], [60.8, 39559.0], [60.9, 39559.0], [61.0, 39559.0], [61.1, 39559.0], [61.2, 39560.0], [61.3, 39563.0], [61.4, 39564.0], [61.5, 39565.0], [61.6, 39565.0], [61.7, 39565.0], [61.8, 39566.0], [61.9, 39567.0], [62.0, 39568.0], [62.1, 39568.0], [62.2, 39569.0], [62.3, 39569.0], [62.4, 39569.0], [62.5, 39569.0], [62.6, 39569.0], [62.7, 39569.0], [62.8, 39570.0], [62.9, 39571.0], [63.0, 39572.0], [63.1, 39572.0], [63.2, 39577.0], [63.3, 39577.0], [63.4, 39577.0], [63.5, 39578.0], [63.6, 39578.0], [63.7, 39578.0], [63.8, 39580.0], [63.9, 39580.0], [64.0, 39582.0], [64.1, 39582.0], [64.2, 39583.0], [64.3, 39584.0], [64.4, 39585.0], [64.5, 39585.0], [64.6, 39585.0], [64.7, 39586.0], [64.8, 39587.0], [64.9, 39587.0], [65.0, 39588.0], [65.1, 39588.0], [65.2, 39588.0], [65.3, 39588.0], [65.4, 39589.0], [65.5, 39589.0], [65.6, 39589.0], [65.7, 39589.0], [65.8, 39591.0], [65.9, 39592.0], [66.0, 39594.0], [66.1, 39594.0], [66.2, 39595.0], [66.3, 39595.0], [66.4, 39597.0], [66.5, 39598.0], [66.6, 39598.0], [66.7, 39598.0], [66.8, 39600.0], [66.9, 39600.0], [67.0, 39601.0], [67.1, 39601.0], [67.2, 39602.0], [67.3, 39603.0], [67.4, 39603.0], [67.5, 39604.0], [67.6, 39604.0], [67.7, 39604.0], [67.8, 39604.0], [67.9, 39604.0], [68.0, 39605.0], [68.1, 39605.0], [68.2, 39605.0], [68.3, 39607.0], [68.4, 39608.0], [68.5, 39609.0], [68.6, 39609.0], [68.7, 39611.0], [68.8, 39612.0], [68.9, 39613.0], [69.0, 39614.0], [69.1, 39614.0], [69.2, 39615.0], [69.3, 39615.0], [69.4, 39615.0], [69.5, 39615.0], [69.6, 39615.0], [69.7, 39619.0], [69.8, 39620.0], [69.9, 39627.0], [70.0, 39628.0], [70.1, 39628.0], [70.2, 39628.0], [70.3, 39628.0], [70.4, 39628.0], [70.5, 39629.0], [70.6, 39629.0], [70.7, 39630.0], [70.8, 39630.0], [70.9, 39631.0], [71.0, 39631.0], [71.1, 39631.0], [71.2, 39632.0], [71.3, 39632.0], [71.4, 39632.0], [71.5, 39633.0], [71.6, 39633.0], [71.7, 39634.0], [71.8, 39634.0], [71.9, 39634.0], [72.0, 39634.0], [72.1, 39634.0], [72.2, 39635.0], [72.3, 39637.0], [72.4, 39637.0], [72.5, 39637.0], [72.6, 39637.0], [72.7, 39637.0], [72.8, 39639.0], [72.9, 39639.0], [73.0, 39639.0], [73.1, 39639.0], [73.2, 39640.0], [73.3, 39641.0], [73.4, 39641.0], [73.5, 39641.0], [73.6, 39641.0], [73.7, 39647.0], [73.8, 39648.0], [73.9, 39649.0], [74.0, 39653.0], [74.1, 39653.0], [74.2, 39653.0], [74.3, 39656.0], [74.4, 39658.0], [74.5, 39658.0], [74.6, 39658.0], [74.7, 39659.0], [74.8, 39659.0], [74.9, 39660.0], [75.0, 39661.0], [75.1, 39661.0], [75.2, 39661.0], [75.3, 39666.0], [75.4, 39666.0], [75.5, 39667.0], [75.6, 39667.0], [75.7, 39670.0], [75.8, 39670.0], [75.9, 39675.0], [76.0, 39675.0], [76.1, 39675.0], [76.2, 39676.0], [76.3, 39677.0], [76.4, 39679.0], [76.5, 39680.0], [76.6, 39680.0], [76.7, 39683.0], [76.8, 39687.0], [76.9, 39688.0], [77.0, 39688.0], [77.1, 39688.0], [77.2, 39690.0], [77.3, 39691.0], [77.4, 39692.0], [77.5, 39694.0], [77.6, 39694.0], [77.7, 39695.0], [77.8, 39695.0], [77.9, 39696.0], [78.0, 39698.0], [78.1, 39698.0], [78.2, 39699.0], [78.3, 39699.0], [78.4, 39700.0], [78.5, 39701.0], [78.6, 39701.0], [78.7, 39701.0], [78.8, 39703.0], [78.9, 39705.0], [79.0, 39705.0], [79.1, 39705.0], [79.2, 39706.0], [79.3, 39708.0], [79.4, 39708.0], [79.5, 39708.0], [79.6, 39708.0], [79.7, 39711.0], [79.8, 39713.0], [79.9, 39714.0], [80.0, 39718.0], [80.1, 39718.0], [80.2, 39720.0], [80.3, 39721.0], [80.4, 39721.0], [80.5, 39724.0], [80.6, 39724.0], [80.7, 39724.0], [80.8, 39725.0], [80.9, 39727.0], [81.0, 39727.0], [81.1, 39727.0], [81.2, 39728.0], [81.3, 39729.0], [81.4, 39731.0], [81.5, 39732.0], [81.6, 39732.0], [81.7, 39735.0], [81.8, 39736.0], [81.9, 39738.0], [82.0, 39739.0], [82.1, 39739.0], [82.2, 39739.0], [82.3, 39740.0], [82.4, 39741.0], [82.5, 39742.0], [82.6, 39742.0], [82.7, 39742.0], [82.8, 39743.0], [82.9, 39744.0], [83.0, 39744.0], [83.1, 39744.0], [83.2, 39747.0], [83.3, 39747.0], [83.4, 39748.0], [83.5, 39751.0], [83.6, 39751.0], [83.7, 39755.0], [83.8, 39761.0], [83.9, 39763.0], [84.0, 39764.0], [84.1, 39764.0], [84.2, 39764.0], [84.3, 39764.0], [84.4, 39765.0], [84.5, 39766.0], [84.6, 39766.0], [84.7, 39767.0], [84.8, 39767.0], [84.9, 39772.0], [85.0, 39772.0], [85.1, 39772.0], [85.2, 39772.0], [85.3, 39776.0], [85.4, 39779.0], [85.5, 39779.0], [85.6, 39779.0], [85.7, 39780.0], [85.8, 39783.0], [85.9, 39783.0], [86.0, 39784.0], [86.1, 39784.0], [86.2, 39784.0], [86.3, 39786.0], [86.4, 39787.0], [86.5, 39787.0], [86.6, 39787.0], [86.7, 39788.0], [86.8, 39789.0], [86.9, 39789.0], [87.0, 39789.0], [87.1, 39789.0], [87.2, 39789.0], [87.3, 39789.0], [87.4, 39793.0], [87.5, 39794.0], [87.6, 39794.0], [87.7, 39796.0], [87.8, 39797.0], [87.9, 39798.0], [88.0, 39798.0], [88.1, 39798.0], [88.2, 39798.0], [88.3, 39798.0], [88.4, 39799.0], [88.5, 39803.0], [88.6, 39803.0], [88.7, 39804.0], [88.8, 39804.0], [88.9, 39807.0], [89.0, 39809.0], [89.1, 39809.0], [89.2, 39809.0], [89.3, 39815.0], [89.4, 39816.0], [89.5, 39819.0], [89.6, 39819.0], [89.7, 39820.0], [89.8, 39821.0], [89.9, 39823.0], [90.0, 39824.0], [90.1, 39824.0], [90.2, 39825.0], [90.3, 39825.0], [90.4, 39826.0], [90.5, 39826.0], [90.6, 39826.0], [90.7, 39828.0], [90.8, 39829.0], [90.9, 39832.0], [91.0, 39833.0], [91.1, 39833.0], [91.2, 39833.0], [91.3, 39835.0], [91.4, 39869.0], [91.5, 39876.0], [91.6, 39876.0], [91.7, 39883.0], [91.8, 39918.0], [91.9, 39957.0], [92.0, 40002.0], [92.1, 40002.0], [92.2, 40032.0], [92.3, 40116.0], [92.4, 40118.0], [92.5, 40147.0], [92.6, 40147.0], [92.7, 40198.0], [92.8, 40230.0], [92.9, 40266.0], [93.0, 40300.0], [93.1, 40300.0], [93.2, 40347.0], [93.3, 40387.0], [93.4, 40419.0], [93.5, 40497.0], [93.6, 40497.0], [93.7, 40505.0], [93.8, 40547.0], [93.9, 40588.0], [94.0, 40628.0], [94.1, 40628.0], [94.2, 40652.0], [94.3, 40699.0], [94.4, 40728.0], [94.5, 40771.0], [94.6, 40771.0], [94.7, 40782.0], [94.8, 40855.0], [94.9, 40856.0], [95.0, 40931.0], [95.1, 40931.0], [95.2, 40976.0], [95.3, 41004.0], [95.4, 41051.0], [95.5, 41055.0], [95.6, 41055.0], [95.7, 41125.0], [95.8, 41154.0], [95.9, 41199.0], [96.0, 41229.0], [96.1, 41229.0], [96.2, 41275.0], [96.3, 41311.0], [96.4, 41315.0], [96.5, 41387.0], [96.6, 41387.0], [96.7, 41424.0], [96.8, 41464.0], [96.9, 41493.0], [97.0, 41573.0], [97.1, 41573.0], [97.2, 41579.0], [97.3, 41613.0], [97.4, 41653.0], [97.5, 41700.0], [97.6, 41700.0], [97.7, 41739.0], [97.8, 41772.0], [97.9, 41777.0], [98.0, 41811.0], [98.1, 41811.0], [98.2, 41852.0], [98.3, 41913.0], [98.4, 41956.0], [98.5, 41998.0], [98.6, 41998.0], [98.7, 41999.0], [98.8, 42075.0], [98.9, 42078.0], [99.0, 42151.0], [99.1, 42151.0], [99.2, 42152.0], [99.3, 42225.0], [99.4, 42260.0], [99.5, 42301.0], [99.6, 42301.0], [99.7, 42363.0], [99.8, 42374.0], [99.9, 42413.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 106.0, "series": [{"data": [[3100.0, 11.0], [3200.0, 1.0], [3300.0, 17.0], [24600.0, 1.0], [100.0, 14.0], [32600.0, 2.0], [32700.0, 3.0], [32800.0, 2.0], [32900.0, 2.0], [38500.0, 3.0], [37500.0, 1.0], [37800.0, 1.0], [38000.0, 2.0], [38800.0, 4.0], [38900.0, 10.0], [38100.0, 1.0], [38200.0, 1.0], [38300.0, 1.0], [38400.0, 1.0], [38600.0, 5.0], [38700.0, 4.0], [39300.0, 82.0], [39800.0, 26.0], [39100.0, 78.0], [39000.0, 11.0], [39900.0, 2.0], [39200.0, 81.0], [39400.0, 89.0], [40500.0, 3.0], [40600.0, 3.0], [40700.0, 3.0], [40800.0, 2.0], [40900.0, 2.0], [40000.0, 2.0], [40100.0, 4.0], [40200.0, 2.0], [40300.0, 3.0], [40400.0, 2.0], [39500.0, 106.0], [39600.0, 93.0], [39700.0, 81.0], [41800.0, 2.0], [41100.0, 3.0], [41000.0, 3.0], [41900.0, 4.0], [41200.0, 2.0], [41300.0, 3.0], [41400.0, 3.0], [42000.0, 2.0], [42100.0, 2.0], [42200.0, 2.0], [42300.0, 3.0], [42400.0, 1.0], [41500.0, 2.0], [41600.0, 2.0], [41700.0, 4.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[3100.0, 11.0], [3200.0, 1.0], [3300.0, 17.0], [24600.0, 1.0], [100.0, 14.0], [32600.0, 2.0], [32700.0, 3.0], [32800.0, 2.0], [32900.0, 2.0], [38500.0, 3.0], [37500.0, 1.0], [37800.0, 1.0], [38000.0, 2.0], [38800.0, 4.0], [38900.0, 10.0], [38100.0, 1.0], [38200.0, 1.0], [38300.0, 1.0], [38400.0, 1.0], [38600.0, 5.0], [38700.0, 4.0], [39300.0, 82.0], [39800.0, 26.0], [39100.0, 78.0], [39000.0, 11.0], [39900.0, 2.0], [39200.0, 81.0], [39400.0, 89.0], [40500.0, 3.0], [40600.0, 3.0], [40700.0, 3.0], [40800.0, 2.0], [40900.0, 2.0], [40000.0, 2.0], [40100.0, 4.0], [40200.0, 2.0], [40300.0, 3.0], [40400.0, 2.0], [39500.0, 106.0], [39600.0, 93.0], [39700.0, 81.0], [41800.0, 2.0], [41100.0, 3.0], [41000.0, 3.0], [41900.0, 4.0], [41200.0, 2.0], [41300.0, 3.0], [41400.0, 3.0], [42000.0, 2.0], [42100.0, 2.0], [42200.0, 2.0], [42300.0, 3.0], [42400.0, 1.0], [41500.0, 2.0], [41600.0, 2.0], [41700.0, 4.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 42400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 43.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 757.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 757.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 43.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 383.04515706806274, "minX": 1.68042378E12, "maxY": 785.3749999999998, "series": [{"data": [[1.68042378E12, 785.3749999999998], [1.68042384E12, 383.04515706806274]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042384E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 100.33333333333333, "minX": 1.0, "maxY": 42413.0, "series": [{"data": [[2.0, 32931.0], [3.0, 32858.0], [4.0, 32820.0], [5.0, 32783.0], [6.0, 32736.0], [7.0, 32707.0], [8.0, 32662.0], [9.0, 32626.0], [10.0, 42413.0], [11.0, 42374.0], [12.0, 42363.0], [13.0, 42301.0], [14.0, 42260.0], [15.0, 42225.0], [16.0, 42152.0], [17.0, 42151.0], [18.0, 42078.0], [19.0, 42075.0], [20.0, 41998.0], [21.0, 41999.0], [22.0, 41956.0], [23.0, 41913.0], [24.0, 41852.0], [25.0, 41811.0], [26.0, 41777.0], [27.0, 41772.0], [28.0, 41739.0], [29.0, 41700.0], [30.0, 41653.0], [31.0, 41613.0], [33.0, 41579.0], [32.0, 41573.0], [35.0, 41464.0], [34.0, 41493.0], [37.0, 41387.0], [36.0, 41424.0], [39.0, 41311.0], [38.0, 41315.0], [41.0, 41229.0], [40.0, 41275.0], [43.0, 41154.0], [42.0, 41199.0], [45.0, 41055.0], [44.0, 41125.0], [47.0, 41004.0], [46.0, 41051.0], [49.0, 40931.0], [48.0, 40976.0], [51.0, 40856.0], [50.0, 40855.0], [53.0, 40771.0], [52.0, 40782.0], [55.0, 40699.0], [54.0, 40728.0], [57.0, 40628.0], [56.0, 40652.0], [59.0, 40547.0], [58.0, 40588.0], [61.0, 40497.0], [60.0, 40505.0], [63.0, 40387.0], [62.0, 40419.0], [67.0, 40230.0], [66.0, 40266.0], [65.0, 40300.0], [64.0, 40347.0], [71.0, 40116.0], [70.0, 40118.0], [69.0, 40147.0], [68.0, 40198.0], [75.0, 39918.0], [74.0, 39957.0], [73.0, 40002.0], [72.0, 40032.0], [79.0, 39833.0], [78.0, 39869.0], [77.0, 39879.5], [83.0, 39835.0], [82.0, 39798.0], [81.0, 39825.0], [80.0, 39832.0], [87.0, 39794.0], [86.0, 39833.0], [85.0, 39825.0], [84.0, 39826.0], [91.0, 39815.5], [95.0, 39806.5], [93.0, 39828.0], [92.0, 39787.0], [99.0, 39797.666666666664], [96.0, 39820.0], [103.0, 39815.0], [102.0, 39816.0], [101.0, 39819.0], [100.0, 39784.0], [107.0, 39776.0], [106.0, 39772.0], [105.0, 39803.0], [104.0, 39804.0], [111.0, 39798.0], [110.0, 39809.0], [109.0, 39807.0], [108.0, 39809.0], [115.0, 39767.0], [114.0, 39804.0], [113.0, 39799.0], [112.0, 39767.0], [119.0, 39793.0], [118.0, 39786.333333333336], [123.0, 39789.0], [122.0, 39796.0], [121.0, 39798.0], [120.0, 39789.0], [127.0, 39789.0], [126.0, 39783.0], [125.0, 39789.0], [124.0, 39784.0], [135.0, 39772.0], [134.0, 39766.0], [133.0, 39764.0], [132.0, 39772.0], [131.0, 39779.0], [129.0, 39784.0], [143.0, 39751.0], [141.0, 39751.0], [140.0, 39764.0], [139.0, 39765.0], [138.0, 39761.0], [137.0, 39727.0], [136.0, 39763.0], [151.0, 39738.0], [150.0, 39708.0], [149.0, 39748.0], [148.0, 39744.0], [147.0, 39743.0], [146.0, 39744.0], [145.0, 39742.0], [144.0, 39747.0], [159.0, 39735.0], [158.0, 39731.0], [157.0, 39739.0], [156.0, 39741.5], [154.0, 39740.0], [153.0, 39736.0], [152.0, 39739.0], [166.0, 39718.0], [165.0, 39727.0], [164.0, 39728.0], [163.0, 39724.0], [162.0, 39729.0], [161.0, 39725.0], [160.0, 39732.0], [175.0, 39677.0], [174.0, 39680.0], [173.0, 39720.0], [172.0, 39717.0], [170.0, 39721.0], [169.0, 39714.0], [168.0, 39705.5], [183.0, 39708.0], [182.0, 39708.0], [181.0, 39695.666666666664], [178.0, 39676.0], [177.0, 39705.0], [189.0, 39698.0], [188.0, 39699.0], [187.0, 39701.0], [186.0, 39699.0], [185.0, 39703.0], [184.0, 39706.0], [199.0, 39688.0], [198.0, 39690.0], [197.0, 39683.0], [196.0, 39693.0], [194.0, 39695.5], [192.0, 39695.333333333336], [207.0, 39668.0], [205.0, 39670.0], [204.0, 39675.0], [203.0, 39647.0], [202.0, 39648.0], [201.0, 39683.5], [213.0, 39661.0], [212.0, 39660.0], [209.0, 39647.0], [222.0, 39615.0], [221.0, 39650.5], [230.0, 39639.0], [229.0, 39639.0], [228.0, 39640.0], [227.0, 39630.0], [225.0, 39641.0], [224.0, 39653.0], [238.0, 39616.0], [236.0, 39641.0], [235.0, 39631.5], [233.0, 39634.0], [232.0, 39618.0], [246.0, 39630.0], [245.0, 39631.0], [243.0, 39604.0], [253.0, 39628.0], [252.0, 39631.5], [250.0, 39616.0], [271.0, 39602.5], [269.0, 39604.0], [267.0, 39578.0], [266.0, 39608.0], [265.0, 39614.5], [263.0, 39612.0], [262.0, 39615.5], [258.0, 39620.0], [257.0, 39635.75], [274.0, 39609.0], [285.0, 39589.0], [287.0, 39588.0], [284.0, 39598.0], [283.0, 39591.0], [282.0, 39596.25], [278.0, 39594.0], [277.0, 39605.0], [276.0, 39584.5], [273.0, 39603.0], [272.0, 39605.0], [301.0, 39577.0], [303.0, 39581.5], [300.0, 39568.0], [291.0, 39588.0], [288.0, 39589.0], [298.0, 39582.5], [296.0, 39551.0], [295.0, 39588.0], [294.0, 39573.0], [293.0, 39584.5], [292.0, 39595.0], [307.0, 39582.0], [318.0, 39569.0], [319.0, 39569.0], [317.0, 39568.333333333336], [314.0, 39568.333333333336], [311.0, 39565.0], [310.0, 39542.0], [309.0, 39577.0], [308.0, 39580.0], [306.0, 39583.0], [305.0, 39561.0], [333.0, 39548.0], [335.0, 39529.0], [332.0, 39517.0], [323.0, 39559.0], [322.0, 39567.0], [331.0, 39555.0], [330.0, 39559.0], [329.0, 39560.0], [328.0, 39530.0], [327.0, 39566.0], [326.0, 39557.5], [324.0, 39567.0], [350.0, 39532.0], [351.0, 39536.0], [348.0, 39540.0], [347.0, 39537.0], [346.0, 39523.0], [344.0, 39537.0], [343.0, 39545.333333333336], [340.0, 39548.666666666664], [337.0, 39542.0], [336.0, 39549.0], [366.0, 39520.0], [367.0, 39520.0], [364.0, 39505.0], [355.0, 39522.0], [354.0, 39526.0], [353.0, 39534.0], [352.0, 39536.0], [362.0, 39527.0], [361.0, 39522.0], [360.0, 39489.0], [359.0, 39521.0], [358.0, 39525.5], [357.0, 39532.0], [382.0, 39510.5], [383.0, 39501.0], [380.0, 39476.0], [371.0, 39511.0], [370.0, 39483.5], [368.0, 39519.0], [379.0, 39513.0], [378.0, 39504.0], [377.0, 39479.0], [376.0, 39505.0], [375.0, 39506.0], [374.0, 39479.0], [373.0, 39512.0], [372.0, 39517.0], [387.0, 39483.0], [397.0, 39499.0], [395.0, 39496.333333333336], [392.0, 39499.0], [391.0, 39502.0], [390.0, 39479.0], [388.0, 39493.0], [385.0, 39504.0], [384.0, 39510.0], [414.0, 39489.166666666664], [412.0, 39488.0], [411.0, 39489.75], [403.0, 39486.83333333333], [400.0, 39498.0], [430.0, 39442.0], [431.0, 39446.0], [429.0, 39451.0], [419.0, 39457.0], [418.0, 39471.0], [417.0, 39477.0], [416.0, 39482.0], [427.0, 39447.0], [426.0, 39456.0], [425.0, 39449.0], [424.0, 39449.0], [423.0, 39462.0], [422.0, 39456.0], [421.0, 39463.0], [420.0, 39463.0], [445.0, 39441.0], [447.0, 39434.0], [444.0, 39429.0], [443.0, 39430.5], [441.0, 39402.0], [440.0, 39436.5], [438.0, 39439.0], [436.0, 39447.0], [435.0, 39443.0], [434.0, 39443.5], [432.0, 39441.0], [461.0, 39409.0], [463.0, 39394.0], [460.0, 39421.0], [451.0, 39421.0], [450.0, 39428.0], [449.0, 39424.0], [448.0, 39398.0], [459.0, 39383.0], [458.0, 39422.0], [457.0, 39422.0], [455.0, 39417.0], [454.0, 39422.0], [453.0, 39432.0], [452.0, 39433.0], [478.0, 39400.0], [477.0, 39396.0], [475.0, 39392.0], [474.0, 39400.0], [473.0, 39407.0], [472.0, 39407.0], [471.0, 39401.666666666664], [468.0, 39401.0], [467.0, 39394.5], [465.0, 39406.0], [493.0, 39372.0], [495.0, 39379.0], [492.0, 39379.0], [481.0, 39391.666666666664], [491.0, 39378.0], [490.0, 39388.0], [489.0, 39379.0], [488.0, 39377.0], [487.0, 39388.0], [486.0, 39386.0], [484.0, 39394.0], [510.0, 39352.0], [511.0, 39351.0], [509.0, 39361.0], [508.0, 39364.0], [507.0, 39369.0], [505.0, 39335.0], [504.0, 39366.0], [501.0, 39371.0], [499.0, 39378.0], [500.0, 39366.0], [536.0, 39330.0], [540.0, 39321.0], [541.0, 39323.0], [528.0, 39318.0], [531.0, 39324.0], [530.0, 39327.0], [539.0, 39315.0], [538.0, 39319.0], [537.0, 39326.0], [526.0, 39340.0], [513.0, 39320.0], [512.0, 39326.0], [516.0, 39348.0], [515.0, 39356.0], [518.0, 39352.0], [517.0, 39351.0], [525.0, 39337.0], [524.0, 39334.0], [523.0, 39343.0], [522.0, 39343.0], [521.0, 39341.0], [520.0, 39327.0], [535.0, 39324.0], [534.0, 39323.0], [533.0, 39325.0], [532.0, 39328.0], [572.0, 39273.0], [575.0, 39240.0], [560.0, 39291.0], [562.0, 39290.0], [561.0, 39296.0], [565.0, 39282.0], [564.0, 39291.0], [574.0, 39271.0], [573.0, 39281.0], [571.0, 39284.0], [570.0, 39277.0], [569.0, 39278.0], [568.0, 39282.0], [559.0, 39300.0], [545.0, 39314.0], [544.0, 39308.0], [547.0, 39314.0], [546.0, 39320.0], [549.0, 39308.0], [548.0, 39318.0], [551.0, 39308.0], [550.0, 39303.0], [558.0, 39295.0], [557.0, 39299.0], [556.0, 39267.0], [555.0, 39299.0], [554.0, 39299.0], [553.0, 39308.0], [552.0, 39310.0], [567.0, 39285.0], [566.0, 39292.0], [606.0, 39242.0], [607.0, 39234.0], [595.0, 39252.3], [605.0, 39246.0], [604.0, 39245.0], [603.0, 39237.0], [602.0, 39248.0], [600.0, 39245.0], [583.0, 39270.0], [581.0, 39233.0], [580.0, 39272.0], [578.0, 39265.0], [577.0, 39269.0], [576.0, 39267.0], [585.0, 39261.0], [584.0, 39261.0], [599.0, 39254.0], [598.0, 39262.333333333336], [634.0, 39207.0], [638.0, 39197.0], [639.0, 39162.0], [625.0, 39208.0], [624.0, 39217.0], [627.0, 39209.0], [626.0, 39209.0], [629.0, 39213.0], [628.0, 39209.0], [637.0, 39199.0], [636.0, 39167.0], [635.0, 39200.0], [633.0, 39206.0], [615.0, 39224.0], [614.0, 39228.0], [613.0, 39193.0], [612.0, 39234.0], [611.0, 39229.0], [610.0, 39204.0], [609.0, 39241.0], [608.0, 39231.0], [623.0, 39183.0], [622.0, 39216.0], [621.0, 39223.0], [620.0, 39212.0], [619.0, 39217.0], [618.0, 39223.0], [617.0, 39217.0], [616.0, 39223.0], [631.0, 39209.0], [630.0, 39209.0], [670.0, 39161.0], [660.0, 39166.0], [671.0, 39148.0], [657.0, 39142.0], [656.0, 39170.0], [659.0, 39177.0], [658.0, 39167.0], [668.0, 39165.0], [666.0, 39162.0], [664.0, 39166.0], [647.0, 39187.0], [645.0, 39194.0], [644.0, 39186.0], [643.0, 39191.0], [642.0, 39178.5], [640.0, 39189.0], [655.0, 39177.0], [654.0, 39175.5], [652.0, 39179.0], [651.0, 39175.5], [649.0, 39190.0], [648.0, 39188.0], [663.0, 39172.0], [662.0, 39168.0], [661.0, 39165.0], [697.0, 39118.0], [702.0, 39121.0], [703.0, 39112.0], [689.0, 39133.0], [691.0, 39125.0], [690.0, 39134.5], [693.0, 39125.0], [692.0, 39126.0], [701.0, 39103.5], [699.0, 39128.0], [698.0, 39128.0], [696.0, 39125.0], [679.0, 39136.0], [678.0, 39110.0], [677.0, 39115.0], [676.0, 39141.0], [675.0, 39145.0], [674.0, 39148.0], [673.0, 39156.0], [672.0, 39156.0], [686.0, 39137.0], [684.0, 39131.0], [683.0, 39136.0], [682.0, 39122.5], [680.0, 39136.0], [695.0, 39097.0], [694.0, 39130.0], [732.0, 38916.0], [735.0, 38837.0], [720.0, 39042.0], [722.0, 39043.0], [721.0, 39045.0], [725.0, 38965.5], [723.0, 38979.0], [734.0, 38896.0], [733.0, 38893.0], [731.0, 38918.0], [730.0, 38934.0], [729.0, 38937.0], [728.0, 38946.0], [719.0, 39046.0], [704.0, 39113.0], [707.0, 39117.0], [706.0, 39095.0], [709.0, 39114.0], [708.0, 39105.0], [711.0, 39105.0], [710.0, 39103.0], [718.0, 39054.0], [717.0, 39086.0], [715.0, 39098.0], [713.0, 39109.5], [727.0, 38940.0], [726.0, 38947.0], [764.0, 157.0], [767.0, 154.0], [753.0, 38097.0], [752.0, 38167.0], [755.0, 37870.0], [754.0, 38024.0], [757.0, 24661.0], [756.0, 37589.0], [766.0, 158.0], [765.0, 158.0], [763.0, 164.0], [762.0, 162.0], [761.0, 164.0], [760.0, 167.0], [751.0, 38231.0], [737.0, 38796.0], [736.0, 38821.0], [739.0, 38748.0], [738.0, 38748.0], [741.0, 38698.0], [740.0, 38739.0], [743.0, 38671.0], [742.0, 38676.0], [750.0, 38357.0], [749.0, 38462.0], [748.0, 38521.0], [747.0, 38545.0], [746.0, 38598.0], [745.0, 38620.0], [744.0, 38632.0], [759.0, 187.0], [758.0, 199.0], [789.0, 3266.0], [788.0, 3350.0], [787.0, 3322.0], [785.0, 3359.25], [781.0, 3365.0], [780.0, 3356.0], [779.0, 3365.6666666666665], [778.0, 3355.0], [771.0, 100.33333333333333], [769.0, 101.0], [800.0, 3143.181818181818], [1.0, 32933.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[401.14999999999964, 37479.08624999997]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 32931.0], [3.0, 32858.0], [4.0, 32820.0], [5.0, 32783.0], [6.0, 32736.0], [7.0, 32707.0], [8.0, 32662.0], [9.0, 32626.0], [10.0, 42413.0], [11.0, 42374.0], [12.0, 42363.0], [13.0, 42301.0], [14.0, 42260.0], [15.0, 42225.0], [16.0, 42152.0], [17.0, 42151.0], [18.0, 42078.0], [19.0, 42075.0], [20.0, 41998.0], [21.0, 41999.0], [22.0, 41956.0], [23.0, 41913.0], [24.0, 41852.0], [25.0, 41811.0], [26.0, 41777.0], [27.0, 41772.0], [28.0, 41739.0], [29.0, 41700.0], [30.0, 41653.0], [31.0, 41613.0], [33.0, 41579.0], [32.0, 41573.0], [35.0, 41464.0], [34.0, 41493.0], [37.0, 41387.0], [36.0, 41424.0], [39.0, 41311.0], [38.0, 41315.0], [41.0, 41229.0], [40.0, 41275.0], [43.0, 41154.0], [42.0, 41199.0], [45.0, 41055.0], [44.0, 41125.0], [47.0, 41004.0], [46.0, 41051.0], [49.0, 40931.0], [48.0, 40976.0], [51.0, 40856.0], [50.0, 40855.0], [53.0, 40771.0], [52.0, 40782.0], [55.0, 40699.0], [54.0, 40728.0], [57.0, 40628.0], [56.0, 40652.0], [59.0, 40547.0], [58.0, 40588.0], [61.0, 40497.0], [60.0, 40505.0], [63.0, 40387.0], [62.0, 40419.0], [67.0, 40230.0], [66.0, 40266.0], [65.0, 40300.0], [64.0, 40347.0], [71.0, 40116.0], [70.0, 40118.0], [69.0, 40147.0], [68.0, 40198.0], [75.0, 39918.0], [74.0, 39957.0], [73.0, 40002.0], [72.0, 40032.0], [79.0, 39833.0], [78.0, 39869.0], [77.0, 39879.5], [83.0, 39835.0], [82.0, 39798.0], [81.0, 39825.0], [80.0, 39832.0], [87.0, 39794.0], [86.0, 39833.0], [85.0, 39825.0], [84.0, 39826.0], [91.0, 39815.5], [95.0, 39806.5], [93.0, 39828.0], [92.0, 39787.0], [99.0, 39797.666666666664], [96.0, 39820.0], [103.0, 39815.0], [102.0, 39816.0], [101.0, 39819.0], [100.0, 39784.0], [107.0, 39776.0], [106.0, 39772.0], [105.0, 39803.0], [104.0, 39804.0], [111.0, 39798.0], [110.0, 39809.0], [109.0, 39807.0], [108.0, 39809.0], [115.0, 39767.0], [114.0, 39804.0], [113.0, 39799.0], [112.0, 39767.0], [119.0, 39793.0], [118.0, 39786.333333333336], [123.0, 39789.0], [122.0, 39796.0], [121.0, 39798.0], [120.0, 39789.0], [127.0, 39789.0], [126.0, 39783.0], [125.0, 39789.0], [124.0, 39784.0], [135.0, 39772.0], [134.0, 39766.0], [133.0, 39764.0], [132.0, 39772.0], [131.0, 39779.0], [129.0, 39784.0], [143.0, 39751.0], [141.0, 39751.0], [140.0, 39764.0], [139.0, 39765.0], [138.0, 39761.0], [137.0, 39727.0], [136.0, 39763.0], [151.0, 39738.0], [150.0, 39708.0], [149.0, 39748.0], [148.0, 39744.0], [147.0, 39743.0], [146.0, 39744.0], [145.0, 39742.0], [144.0, 39747.0], [159.0, 39735.0], [158.0, 39731.0], [157.0, 39739.0], [156.0, 39741.5], [154.0, 39740.0], [153.0, 39736.0], [152.0, 39739.0], [166.0, 39718.0], [165.0, 39727.0], [164.0, 39728.0], [163.0, 39724.0], [162.0, 39729.0], [161.0, 39725.0], [160.0, 39732.0], [175.0, 39677.0], [174.0, 39680.0], [173.0, 39720.0], [172.0, 39717.0], [170.0, 39721.0], [169.0, 39714.0], [168.0, 39705.5], [183.0, 39708.0], [182.0, 39708.0], [181.0, 39695.666666666664], [178.0, 39676.0], [177.0, 39705.0], [189.0, 39698.0], [188.0, 39699.0], [187.0, 39701.0], [186.0, 39699.0], [185.0, 39703.0], [184.0, 39706.0], [199.0, 39688.0], [198.0, 39690.0], [197.0, 39683.0], [196.0, 39693.0], [194.0, 39695.5], [192.0, 39695.333333333336], [207.0, 39668.0], [205.0, 39670.0], [204.0, 39675.0], [203.0, 39647.0], [202.0, 39648.0], [201.0, 39683.5], [213.0, 39661.0], [212.0, 39660.0], [209.0, 39647.0], [222.0, 39615.0], [221.0, 39650.5], [230.0, 39639.0], [229.0, 39639.0], [228.0, 39640.0], [227.0, 39630.0], [225.0, 39641.0], [224.0, 39653.0], [238.0, 39616.0], [236.0, 39641.0], [235.0, 39631.5], [233.0, 39634.0], [232.0, 39618.0], [246.0, 39630.0], [245.0, 39631.0], [243.0, 39604.0], [253.0, 39628.0], [252.0, 39631.5], [250.0, 39616.0], [271.0, 39602.5], [269.0, 39604.0], [267.0, 39578.0], [266.0, 39608.0], [265.0, 39614.5], [263.0, 39612.0], [262.0, 39615.5], [258.0, 39620.0], [257.0, 39635.75], [274.0, 39609.0], [285.0, 39589.0], [287.0, 39588.0], [284.0, 39598.0], [283.0, 39591.0], [282.0, 39596.25], [278.0, 39594.0], [277.0, 39605.0], [276.0, 39584.5], [273.0, 39603.0], [272.0, 39605.0], [301.0, 39577.0], [303.0, 39581.5], [300.0, 39568.0], [291.0, 39588.0], [288.0, 39589.0], [298.0, 39582.5], [296.0, 39551.0], [295.0, 39588.0], [294.0, 39573.0], [293.0, 39584.5], [292.0, 39595.0], [307.0, 39582.0], [318.0, 39569.0], [319.0, 39569.0], [317.0, 39568.333333333336], [314.0, 39568.333333333336], [311.0, 39565.0], [310.0, 39542.0], [309.0, 39577.0], [308.0, 39580.0], [306.0, 39583.0], [305.0, 39561.0], [333.0, 39548.0], [335.0, 39529.0], [332.0, 39517.0], [323.0, 39559.0], [322.0, 39567.0], [331.0, 39555.0], [330.0, 39559.0], [329.0, 39560.0], [328.0, 39530.0], [327.0, 39566.0], [326.0, 39557.5], [324.0, 39567.0], [350.0, 39532.0], [351.0, 39536.0], [348.0, 39540.0], [347.0, 39537.0], [346.0, 39523.0], [344.0, 39537.0], [343.0, 39545.333333333336], [340.0, 39548.666666666664], [337.0, 39542.0], [336.0, 39549.0], [366.0, 39520.0], [367.0, 39520.0], [364.0, 39505.0], [355.0, 39522.0], [354.0, 39526.0], [353.0, 39534.0], [352.0, 39536.0], [362.0, 39527.0], [361.0, 39522.0], [360.0, 39489.0], [359.0, 39521.0], [358.0, 39525.5], [357.0, 39532.0], [382.0, 39510.5], [383.0, 39501.0], [380.0, 39476.0], [371.0, 39511.0], [370.0, 39483.5], [368.0, 39519.0], [379.0, 39513.0], [378.0, 39504.0], [377.0, 39479.0], [376.0, 39505.0], [375.0, 39506.0], [374.0, 39479.0], [373.0, 39512.0], [372.0, 39517.0], [387.0, 39483.0], [397.0, 39499.0], [395.0, 39496.333333333336], [392.0, 39499.0], [391.0, 39502.0], [390.0, 39479.0], [388.0, 39493.0], [385.0, 39504.0], [384.0, 39510.0], [414.0, 39489.166666666664], [412.0, 39488.0], [411.0, 39489.75], [403.0, 39486.83333333333], [400.0, 39498.0], [430.0, 39442.0], [431.0, 39446.0], [429.0, 39451.0], [419.0, 39457.0], [418.0, 39471.0], [417.0, 39477.0], [416.0, 39482.0], [427.0, 39447.0], [426.0, 39456.0], [425.0, 39449.0], [424.0, 39449.0], [423.0, 39462.0], [422.0, 39456.0], [421.0, 39463.0], [420.0, 39463.0], [445.0, 39441.0], [447.0, 39434.0], [444.0, 39429.0], [443.0, 39430.5], [441.0, 39402.0], [440.0, 39436.5], [438.0, 39439.0], [436.0, 39447.0], [435.0, 39443.0], [434.0, 39443.5], [432.0, 39441.0], [461.0, 39409.0], [463.0, 39394.0], [460.0, 39421.0], [451.0, 39421.0], [450.0, 39428.0], [449.0, 39424.0], [448.0, 39398.0], [459.0, 39383.0], [458.0, 39422.0], [457.0, 39422.0], [455.0, 39417.0], [454.0, 39422.0], [453.0, 39432.0], [452.0, 39433.0], [478.0, 39400.0], [477.0, 39396.0], [475.0, 39392.0], [474.0, 39400.0], [473.0, 39407.0], [472.0, 39407.0], [471.0, 39401.666666666664], [468.0, 39401.0], [467.0, 39394.5], [465.0, 39406.0], [493.0, 39372.0], [495.0, 39379.0], [492.0, 39379.0], [481.0, 39391.666666666664], [491.0, 39378.0], [490.0, 39388.0], [489.0, 39379.0], [488.0, 39377.0], [487.0, 39388.0], [486.0, 39386.0], [484.0, 39394.0], [510.0, 39352.0], [511.0, 39351.0], [509.0, 39361.0], [508.0, 39364.0], [507.0, 39369.0], [505.0, 39335.0], [504.0, 39366.0], [501.0, 39371.0], [499.0, 39378.0], [500.0, 39366.0], [536.0, 39330.0], [540.0, 39321.0], [541.0, 39323.0], [528.0, 39318.0], [531.0, 39324.0], [530.0, 39327.0], [539.0, 39315.0], [538.0, 39319.0], [537.0, 39326.0], [526.0, 39340.0], [513.0, 39320.0], [512.0, 39326.0], [516.0, 39348.0], [515.0, 39356.0], [518.0, 39352.0], [517.0, 39351.0], [525.0, 39337.0], [524.0, 39334.0], [523.0, 39343.0], [522.0, 39343.0], [521.0, 39341.0], [520.0, 39327.0], [535.0, 39324.0], [534.0, 39323.0], [533.0, 39325.0], [532.0, 39328.0], [572.0, 39273.0], [575.0, 39240.0], [560.0, 39291.0], [562.0, 39290.0], [561.0, 39296.0], [565.0, 39282.0], [564.0, 39291.0], [574.0, 39271.0], [573.0, 39281.0], [571.0, 39284.0], [570.0, 39277.0], [569.0, 39278.0], [568.0, 39282.0], [559.0, 39300.0], [545.0, 39314.0], [544.0, 39308.0], [547.0, 39314.0], [546.0, 39320.0], [549.0, 39308.0], [548.0, 39318.0], [551.0, 39308.0], [550.0, 39303.0], [558.0, 39295.0], [557.0, 39299.0], [556.0, 39267.0], [555.0, 39299.0], [554.0, 39299.0], [553.0, 39308.0], [552.0, 39310.0], [567.0, 39285.0], [566.0, 39292.0], [606.0, 39242.0], [607.0, 39234.0], [595.0, 39252.3], [605.0, 39246.0], [604.0, 39245.0], [603.0, 39237.0], [602.0, 39248.0], [600.0, 39245.0], [583.0, 39270.0], [581.0, 39233.0], [580.0, 39272.0], [578.0, 39265.0], [577.0, 39269.0], [576.0, 39267.0], [585.0, 39261.0], [584.0, 39261.0], [599.0, 39254.0], [598.0, 39262.333333333336], [634.0, 39207.0], [638.0, 39197.0], [639.0, 39162.0], [625.0, 39208.0], [624.0, 39217.0], [627.0, 39209.0], [626.0, 39209.0], [629.0, 39213.0], [628.0, 39209.0], [637.0, 39199.0], [636.0, 39167.0], [635.0, 39200.0], [633.0, 39206.0], [615.0, 39224.0], [614.0, 39228.0], [613.0, 39193.0], [612.0, 39234.0], [611.0, 39229.0], [610.0, 39204.0], [609.0, 39241.0], [608.0, 39231.0], [623.0, 39183.0], [622.0, 39216.0], [621.0, 39223.0], [620.0, 39212.0], [619.0, 39217.0], [618.0, 39223.0], [617.0, 39217.0], [616.0, 39223.0], [631.0, 39209.0], [630.0, 39209.0], [670.0, 39161.0], [660.0, 39166.0], [671.0, 39148.0], [657.0, 39142.0], [656.0, 39170.0], [659.0, 39177.0], [658.0, 39167.0], [668.0, 39165.0], [666.0, 39162.0], [664.0, 39166.0], [647.0, 39187.0], [645.0, 39194.0], [644.0, 39186.0], [643.0, 39191.0], [642.0, 39178.5], [640.0, 39189.0], [655.0, 39177.0], [654.0, 39175.5], [652.0, 39179.0], [651.0, 39175.5], [649.0, 39190.0], [648.0, 39188.0], [663.0, 39172.0], [662.0, 39168.0], [661.0, 39165.0], [697.0, 39118.0], [702.0, 39121.0], [703.0, 39112.0], [689.0, 39133.0], [691.0, 39125.0], [690.0, 39134.5], [693.0, 39125.0], [692.0, 39126.0], [701.0, 39103.5], [699.0, 39128.0], [698.0, 39128.0], [696.0, 39125.0], [679.0, 39136.0], [678.0, 39110.0], [677.0, 39115.0], [676.0, 39141.0], [675.0, 39145.0], [674.0, 39148.0], [673.0, 39156.0], [672.0, 39156.0], [686.0, 39137.0], [684.0, 39131.0], [683.0, 39136.0], [682.0, 39122.5], [680.0, 39136.0], [695.0, 39097.0], [694.0, 39130.0], [732.0, 38916.0], [735.0, 38837.0], [720.0, 39042.0], [722.0, 39043.0], [721.0, 39045.0], [725.0, 38965.5], [723.0, 38979.0], [734.0, 38896.0], [733.0, 38893.0], [731.0, 38918.0], [730.0, 38934.0], [729.0, 38937.0], [728.0, 38946.0], [719.0, 39046.0], [704.0, 39113.0], [707.0, 39117.0], [706.0, 39095.0], [709.0, 39114.0], [708.0, 39105.0], [711.0, 39105.0], [710.0, 39103.0], [718.0, 39054.0], [717.0, 39086.0], [715.0, 39098.0], [713.0, 39109.5], [727.0, 38940.0], [726.0, 38947.0], [764.0, 157.0], [767.0, 154.0], [753.0, 38097.0], [752.0, 38167.0], [755.0, 37870.0], [754.0, 38024.0], [757.0, 24661.0], [756.0, 37589.0], [766.0, 158.0], [765.0, 158.0], [763.0, 164.0], [762.0, 162.0], [761.0, 164.0], [760.0, 167.0], [751.0, 38231.0], [737.0, 38796.0], [736.0, 38821.0], [739.0, 38748.0], [738.0, 38748.0], [741.0, 38698.0], [740.0, 38739.0], [743.0, 38671.0], [742.0, 38676.0], [750.0, 38357.0], [749.0, 38462.0], [748.0, 38521.0], [747.0, 38545.0], [746.0, 38598.0], [745.0, 38620.0], [744.0, 38632.0], [759.0, 187.0], [758.0, 199.0], [789.0, 3266.0], [788.0, 3350.0], [787.0, 3322.0], [785.0, 3359.25], [781.0, 3365.0], [780.0, 3356.0], [779.0, 3365.6666666666665], [778.0, 3355.0], [771.0, 100.33333333333333], [769.0, 101.0], [800.0, 3143.1818181818185], [1.0, 32933.0]], "isOverall": false, "label": "Test Fragment", "isController": true}, {"data": [[401.14999999999964, 37479.08624999997]], "isOverall": false, "label": "Test Fragment-Aggregated", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 800.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 245.41666666666666, "minX": 1.68042378E12, "maxY": 10717.416666666666, "series": [{"data": [[1.68042378E12, 376.15], [1.68042384E12, 10717.416666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68042378E12, 245.41666666666666], [1.68042384E12, 6463.15]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042384E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2254.5348837209294, "minX": 1.68042378E12, "maxY": 39479.95244385734, "series": [{"data": [[1.68042378E12, 3271.4827586206893], [1.68042384E12, 38765.753566796404]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042378E12, 2254.5348837209294], [1.68042384E12, 39479.95244385734]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042384E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2232.6046511627915, "minX": 1.68042378E12, "maxY": 39479.93527080578, "series": [{"data": [[1.68042378E12, 3270.5172413793102], [1.68042384E12, 38764.54993514924]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042378E12, 2232.6046511627915], [1.68042384E12, 39479.93527080578]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042384E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2179.534883720931, "minX": 1.68042378E12, "maxY": 3176.2068965517246, "series": [{"data": [[1.68042378E12, 3176.2068965517246], [1.68042384E12, 2267.0843060959796]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042378E12, 2179.534883720931], [1.68042384E12, 2306.8850726552187]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042384E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 24661.0, "minX": 1.68042384E12, "maxY": 42413.0, "series": [{"data": [[1.68042384E12, 42413.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68042384E12, 39826.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68042384E12, 42151.42]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68042384E12, 41008.700000000004]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68042384E12, 24661.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68042384E12, 39496.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042384E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 158.0, "minX": 1.0, "maxY": 41293.0, "series": [{"data": [[1.0, 24661.0], [189.0, 39168.0], [6.0, 38060.5], [26.0, 41293.0], [13.0, 32858.0], [496.0, 39567.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[17.0, 3358.0], [12.0, 3148.0], [14.0, 158.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 496.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 78.5, "minX": 1.0, "maxY": 41293.0, "series": [{"data": [[1.0, 24661.0], [189.0, 39168.0], [6.0, 38060.5], [26.0, 41293.0], [13.0, 32858.0], [496.0, 39567.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[17.0, 3357.0], [12.0, 3146.0], [14.0, 78.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 496.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.68042378E12, "maxY": 12.95, "series": [{"data": [[1.68042378E12, 12.95], [1.68042384E12, 0.38333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042384E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68042378E12, "maxY": 12.616666666666667, "series": [{"data": [[1.68042384E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.68042384E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.68042384E12, 12.616666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68042378E12, 0.016666666666666666]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.68042378E12, 0.4666666666666667], [1.68042384E12, 0.11666666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68042384E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042384E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.68042378E12, "maxY": 12.616666666666667, "series": [{"data": [[1.68042378E12, 0.7166666666666667]], "isOverall": false, "label": "Test Fragment-failure", "isController": true}, {"data": [[1.68042384E12, 12.616666666666667]], "isOverall": false, "label": "Test Fragment-success", "isController": true}, {"data": [[1.68042378E12, 0.48333333333333334], [1.68042384E12, 0.23333333333333334]], "isOverall": false, "label": "Login-failure", "isController": false}, {"data": [[1.68042384E12, 12.616666666666667]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042384E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.68042378E12, "maxY": 25.233333333333334, "series": [{"data": [[1.68042384E12, 25.233333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68042378E12, 1.2], [1.68042384E12, 0.23333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042384E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

