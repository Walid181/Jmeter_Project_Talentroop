/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1987.0, "minX": 0.0, "maxY": 28907.0, "series": [{"data": [[0.0, 1987.0], [0.1, 1987.0], [0.2, 2039.0], [0.3, 2139.0], [0.4, 2182.0], [0.5, 2186.0], [0.6, 2186.0], [0.7, 2198.0], [0.8, 2208.0], [0.9, 2220.0], [1.0, 2225.0], [1.1, 2225.0], [1.2, 2246.0], [1.3, 2289.0], [1.4, 2333.0], [1.5, 2334.0], [1.6, 2334.0], [1.7, 2338.0], [1.8, 2354.0], [1.9, 2355.0], [2.0, 2362.0], [2.1, 2362.0], [2.2, 2372.0], [2.3, 2372.0], [2.4, 2372.0], [2.5, 2384.0], [2.6, 2384.0], [2.7, 2384.0], [2.8, 2386.0], [2.9, 2386.0], [3.0, 2393.0], [3.1, 2393.0], [3.2, 2394.0], [3.3, 2397.0], [3.4, 2398.0], [3.5, 2399.0], [3.6, 2399.0], [3.7, 2405.0], [3.8, 2405.0], [3.9, 2406.0], [4.0, 2407.0], [4.1, 2407.0], [4.2, 2407.0], [4.3, 2415.0], [4.4, 2418.0], [4.5, 2421.0], [4.6, 2421.0], [4.7, 2428.0], [4.8, 2429.0], [4.9, 2431.0], [5.0, 2434.0], [5.1, 2434.0], [5.2, 2435.0], [5.3, 2437.0], [5.4, 2439.0], [5.5, 2441.0], [5.6, 2441.0], [5.7, 2444.0], [5.8, 2447.0], [5.9, 2453.0], [6.0, 2458.0], [6.1, 2458.0], [6.2, 2458.0], [6.3, 2469.0], [6.4, 2471.0], [6.5, 2472.0], [6.6, 2472.0], [6.7, 2473.0], [6.8, 2476.0], [6.9, 2477.0], [7.0, 2478.0], [7.1, 2478.0], [7.2, 2478.0], [7.3, 2484.0], [7.4, 2484.0], [7.5, 2494.0], [7.6, 2494.0], [7.7, 2511.0], [7.8, 2523.0], [7.9, 2523.0], [8.0, 2524.0], [8.1, 2524.0], [8.2, 2528.0], [8.3, 2529.0], [8.4, 2529.0], [8.5, 2562.0], [8.6, 2562.0], [8.7, 2564.0], [8.8, 2565.0], [8.9, 2580.0], [9.0, 2583.0], [9.1, 2583.0], [9.2, 2592.0], [9.3, 2599.0], [9.4, 2617.0], [9.5, 2620.0], [9.6, 2620.0], [9.7, 2623.0], [9.8, 2641.0], [9.9, 2647.0], [10.0, 2657.0], [10.1, 2657.0], [10.2, 2662.0], [10.3, 2666.0], [10.4, 2667.0], [10.5, 2668.0], [10.6, 2668.0], [10.7, 2669.0], [10.8, 2672.0], [10.9, 2673.0], [11.0, 2674.0], [11.1, 2674.0], [11.2, 2674.0], [11.3, 2675.0], [11.4, 2679.0], [11.5, 2680.0], [11.6, 2680.0], [11.7, 2683.0], [11.8, 2689.0], [11.9, 2690.0], [12.0, 2691.0], [12.1, 2691.0], [12.2, 2692.0], [12.3, 2694.0], [12.4, 2696.0], [12.5, 2697.0], [12.6, 2697.0], [12.7, 2698.0], [12.8, 2701.0], [12.9, 2702.0], [13.0, 2702.0], [13.1, 2702.0], [13.2, 2702.0], [13.3, 2705.0], [13.4, 2705.0], [13.5, 2705.0], [13.6, 2705.0], [13.7, 2707.0], [13.8, 2708.0], [13.9, 2709.0], [14.0, 2713.0], [14.1, 2713.0], [14.2, 2716.0], [14.3, 2716.0], [14.4, 2717.0], [14.5, 2717.0], [14.6, 2717.0], [14.7, 2724.0], [14.8, 2726.0], [14.9, 2875.0], [15.0, 2882.0], [15.1, 2882.0], [15.2, 2886.0], [15.3, 2919.0], [15.4, 2919.0], [15.5, 2920.0], [15.6, 2920.0], [15.7, 2921.0], [15.8, 2924.0], [15.9, 2924.0], [16.0, 2925.0], [16.1, 2925.0], [16.2, 2925.0], [16.3, 2926.0], [16.4, 2932.0], [16.5, 2935.0], [16.6, 2935.0], [16.7, 2937.0], [16.8, 2952.0], [16.9, 2953.0], [17.0, 2953.0], [17.1, 2953.0], [17.2, 2955.0], [17.3, 2977.0], [17.4, 2979.0], [17.5, 2985.0], [17.6, 2985.0], [17.7, 2985.0], [17.8, 2989.0], [17.9, 2990.0], [18.0, 2990.0], [18.1, 2990.0], [18.2, 2991.0], [18.3, 2994.0], [18.4, 2998.0], [18.5, 2999.0], [18.6, 2999.0], [18.7, 3000.0], [18.8, 3001.0], [18.9, 3007.0], [19.0, 3008.0], [19.1, 3008.0], [19.2, 3009.0], [19.3, 3010.0], [19.4, 3011.0], [19.5, 3011.0], [19.6, 3011.0], [19.7, 3011.0], [19.8, 3011.0], [19.9, 3012.0], [20.0, 3015.0], [20.1, 3015.0], [20.2, 3015.0], [20.3, 3016.0], [20.4, 3016.0], [20.5, 3016.0], [20.6, 3016.0], [20.7, 3016.0], [20.8, 3017.0], [20.9, 3017.0], [21.0, 3017.0], [21.1, 3017.0], [21.2, 3018.0], [21.3, 3020.0], [21.4, 3021.0], [21.5, 3022.0], [21.6, 3022.0], [21.7, 3023.0], [21.8, 3023.0], [21.9, 3027.0], [22.0, 3028.0], [22.1, 3028.0], [22.2, 3031.0], [22.3, 3032.0], [22.4, 3032.0], [22.5, 3033.0], [22.6, 3033.0], [22.7, 3035.0], [22.8, 3035.0], [22.9, 3038.0], [23.0, 3039.0], [23.1, 3039.0], [23.2, 3040.0], [23.3, 3040.0], [23.4, 3040.0], [23.5, 3043.0], [23.6, 3043.0], [23.7, 3043.0], [23.8, 3044.0], [23.9, 3044.0], [24.0, 3044.0], [24.1, 3044.0], [24.2, 3044.0], [24.3, 3045.0], [24.4, 3045.0], [24.5, 3045.0], [24.6, 3045.0], [24.7, 3046.0], [24.8, 3047.0], [24.9, 3048.0], [25.0, 3048.0], [25.1, 3048.0], [25.2, 3048.0], [25.3, 3050.0], [25.4, 3051.0], [25.5, 3053.0], [25.6, 3053.0], [25.7, 3053.0], [25.8, 3054.0], [25.9, 3054.0], [26.0, 3055.0], [26.1, 3055.0], [26.2, 3055.0], [26.3, 3057.0], [26.4, 3057.0], [26.5, 3057.0], [26.6, 3057.0], [26.7, 3059.0], [26.8, 3059.0], [26.9, 3059.0], [27.0, 3059.0], [27.1, 3059.0], [27.2, 3059.0], [27.3, 3059.0], [27.4, 3060.0], [27.5, 3060.0], [27.6, 3060.0], [27.7, 3061.0], [27.8, 3061.0], [27.9, 3062.0], [28.0, 3062.0], [28.1, 3062.0], [28.2, 3062.0], [28.3, 3062.0], [28.4, 3063.0], [28.5, 3063.0], [28.6, 3063.0], [28.7, 3063.0], [28.8, 3063.0], [28.9, 3064.0], [29.0, 3064.0], [29.1, 3064.0], [29.2, 3065.0], [29.3, 3065.0], [29.4, 3065.0], [29.5, 3065.0], [29.6, 3065.0], [29.7, 3065.0], [29.8, 3066.0], [29.9, 3066.0], [30.0, 3066.0], [30.1, 3066.0], [30.2, 3066.0], [30.3, 3066.0], [30.4, 3068.0], [30.5, 3068.0], [30.6, 3068.0], [30.7, 3068.0], [30.8, 3069.0], [30.9, 3070.0], [31.0, 3070.0], [31.1, 3070.0], [31.2, 3071.0], [31.3, 3071.0], [31.4, 3072.0], [31.5, 3072.0], [31.6, 3072.0], [31.7, 3072.0], [31.8, 3073.0], [31.9, 3073.0], [32.0, 3074.0], [32.1, 3074.0], [32.2, 3074.0], [32.3, 3075.0], [32.4, 3075.0], [32.5, 3076.0], [32.6, 3076.0], [32.7, 3077.0], [32.8, 3078.0], [32.9, 3081.0], [33.0, 3081.0], [33.1, 3081.0], [33.2, 3082.0], [33.3, 3082.0], [33.4, 3083.0], [33.5, 3084.0], [33.6, 3084.0], [33.7, 3086.0], [33.8, 3097.0], [33.9, 18221.0], [34.0, 19062.0], [34.1, 19062.0], [34.2, 19091.0], [34.3, 19094.0], [34.4, 19132.0], [34.5, 19168.0], [34.6, 19168.0], [34.7, 19246.0], [34.8, 19247.0], [34.9, 19279.0], [35.0, 19320.0], [35.1, 19320.0], [35.2, 19353.0], [35.3, 19388.0], [35.4, 19439.0], [35.5, 19465.0], [35.6, 19465.0], [35.7, 19506.0], [35.8, 19534.0], [35.9, 19573.0], [36.0, 19611.0], [36.1, 19611.0], [36.2, 19647.0], [36.3, 19683.0], [36.4, 19721.0], [36.5, 19758.0], [36.6, 19758.0], [36.7, 19795.0], [36.8, 19830.0], [36.9, 19866.0], [37.0, 19937.0], [37.1, 19937.0], [37.2, 19937.0], [37.3, 19976.0], [37.4, 24346.0], [37.5, 24604.0], [37.6, 24604.0], [37.7, 24636.0], [37.8, 24664.0], [37.9, 24677.0], [38.0, 24678.0], [38.1, 24678.0], [38.2, 24683.0], [38.3, 24694.0], [38.4, 24695.0], [38.5, 24703.0], [38.6, 24703.0], [38.7, 24704.0], [38.8, 24707.0], [38.9, 24708.0], [39.0, 24708.0], [39.1, 24708.0], [39.2, 24709.0], [39.3, 24712.0], [39.4, 24713.0], [39.5, 24714.0], [39.6, 24714.0], [39.7, 24714.0], [39.8, 24717.0], [39.9, 24720.0], [40.0, 24720.0], [40.1, 24720.0], [40.2, 24720.0], [40.3, 24722.0], [40.4, 24723.0], [40.5, 24723.0], [40.6, 24723.0], [40.7, 24725.0], [40.8, 24729.0], [40.9, 24731.0], [41.0, 24736.0], [41.1, 24736.0], [41.2, 24740.0], [41.3, 24741.0], [41.4, 24750.0], [41.5, 24751.0], [41.6, 24751.0], [41.7, 24755.0], [41.8, 24762.0], [41.9, 24778.0], [42.0, 24778.0], [42.1, 24778.0], [42.2, 24780.0], [42.3, 24787.0], [42.4, 24787.0], [42.5, 24789.0], [42.6, 24789.0], [42.7, 24803.0], [42.8, 24826.0], [42.9, 24835.0], [43.0, 24838.0], [43.1, 24838.0], [43.2, 24840.0], [43.3, 24842.0], [43.4, 24848.0], [43.5, 24859.0], [43.6, 24859.0], [43.7, 25206.0], [43.8, 25222.0], [43.9, 25239.0], [44.0, 25242.0], [44.1, 25242.0], [44.2, 25245.0], [44.3, 25248.0], [44.4, 25249.0], [44.5, 25254.0], [44.6, 25254.0], [44.7, 25255.0], [44.8, 25257.0], [44.9, 25258.0], [45.0, 25258.0], [45.1, 25258.0], [45.2, 25259.0], [45.3, 25265.0], [45.4, 25268.0], [45.5, 25268.0], [45.6, 25268.0], [45.7, 25269.0], [45.8, 25274.0], [45.9, 25274.0], [46.0, 25274.0], [46.1, 25274.0], [46.2, 25275.0], [46.3, 25280.0], [46.4, 25281.0], [46.5, 25287.0], [46.6, 25287.0], [46.7, 25289.0], [46.8, 25293.0], [46.9, 25294.0], [47.0, 25294.0], [47.1, 25294.0], [47.2, 25297.0], [47.3, 25303.0], [47.4, 25303.0], [47.5, 25303.0], [47.6, 25303.0], [47.7, 25311.0], [47.8, 25314.0], [47.9, 25321.0], [48.0, 25322.0], [48.1, 25322.0], [48.2, 25323.0], [48.3, 25327.0], [48.4, 25330.0], [48.5, 25330.0], [48.6, 25330.0], [48.7, 25334.0], [48.8, 25337.0], [48.9, 25340.0], [49.0, 25341.0], [49.1, 25341.0], [49.2, 25343.0], [49.3, 25343.0], [49.4, 25345.0], [49.5, 25358.0], [49.6, 25358.0], [49.7, 25370.0], [49.8, 25380.0], [49.9, 25394.0], [50.0, 25398.0], [50.1, 25398.0], [50.2, 25407.0], [50.3, 25420.0], [50.4, 25433.0], [50.5, 25455.0], [50.6, 25455.0], [50.7, 25458.0], [50.8, 25463.0], [50.9, 25524.0], [51.0, 25531.0], [51.1, 25531.0], [51.2, 25537.0], [51.3, 25542.0], [51.4, 25552.0], [51.5, 25553.0], [51.6, 25553.0], [51.7, 25555.0], [51.8, 25571.0], [51.9, 25575.0], [52.0, 25577.0], [52.1, 25577.0], [52.2, 25577.0], [52.3, 25578.0], [52.4, 25585.0], [52.5, 25586.0], [52.6, 25586.0], [52.7, 25586.0], [52.8, 25587.0], [52.9, 25592.0], [53.0, 25594.0], [53.1, 25594.0], [53.2, 25596.0], [53.3, 25597.0], [53.4, 25597.0], [53.5, 25598.0], [53.6, 25598.0], [53.7, 25602.0], [53.8, 25604.0], [53.9, 25606.0], [54.0, 25611.0], [54.1, 25611.0], [54.2, 25613.0], [54.3, 25613.0], [54.4, 25613.0], [54.5, 25614.0], [54.6, 25614.0], [54.7, 25615.0], [54.8, 25616.0], [54.9, 25619.0], [55.0, 25620.0], [55.1, 25620.0], [55.2, 25621.0], [55.3, 25622.0], [55.4, 25624.0], [55.5, 25626.0], [55.6, 25626.0], [55.7, 25628.0], [55.8, 25631.0], [55.9, 25631.0], [56.0, 25633.0], [56.1, 25633.0], [56.2, 25636.0], [56.3, 25637.0], [56.4, 25637.0], [56.5, 25639.0], [56.6, 25639.0], [56.7, 25639.0], [56.8, 25640.0], [56.9, 25641.0], [57.0, 25642.0], [57.1, 25642.0], [57.2, 25646.0], [57.3, 25648.0], [57.4, 25648.0], [57.5, 25649.0], [57.6, 25649.0], [57.7, 25650.0], [57.8, 25650.0], [57.9, 25651.0], [58.0, 25652.0], [58.1, 25652.0], [58.2, 25653.0], [58.3, 25654.0], [58.4, 25654.0], [58.5, 25657.0], [58.6, 25657.0], [58.7, 25658.0], [58.8, 25659.0], [58.9, 25659.0], [59.0, 25661.0], [59.1, 25661.0], [59.2, 25661.0], [59.3, 25662.0], [59.4, 25664.0], [59.5, 25664.0], [59.6, 25664.0], [59.7, 25664.0], [59.8, 25665.0], [59.9, 25666.0], [60.0, 25670.0], [60.1, 25670.0], [60.2, 25674.0], [60.3, 25674.0], [60.4, 25675.0], [60.5, 25676.0], [60.6, 25676.0], [60.7, 25678.0], [60.8, 25679.0], [60.9, 25679.0], [61.0, 25680.0], [61.1, 25680.0], [61.2, 25680.0], [61.3, 25682.0], [61.4, 25684.0], [61.5, 25684.0], [61.6, 25684.0], [61.7, 25685.0], [61.8, 25686.0], [61.9, 25687.0], [62.0, 25689.0], [62.1, 25689.0], [62.2, 25690.0], [62.3, 25691.0], [62.4, 25692.0], [62.5, 25692.0], [62.6, 25692.0], [62.7, 25693.0], [62.8, 25694.0], [62.9, 25694.0], [63.0, 25695.0], [63.1, 25695.0], [63.2, 25695.0], [63.3, 25696.0], [63.4, 25697.0], [63.5, 25697.0], [63.6, 25697.0], [63.7, 25698.0], [63.8, 25698.0], [63.9, 25698.0], [64.0, 25699.0], [64.1, 25699.0], [64.2, 25700.0], [64.3, 25700.0], [64.4, 25702.0], [64.5, 25706.0], [64.6, 25706.0], [64.7, 25706.0], [64.8, 25707.0], [64.9, 25709.0], [65.0, 25710.0], [65.1, 25710.0], [65.2, 25710.0], [65.3, 25711.0], [65.4, 25712.0], [65.5, 25713.0], [65.6, 25713.0], [65.7, 25713.0], [65.8, 25714.0], [65.9, 25715.0], [66.0, 25716.0], [66.1, 25716.0], [66.2, 25717.0], [66.3, 25717.0], [66.4, 25720.0], [66.5, 25721.0], [66.6, 25721.0], [66.7, 25722.0], [66.8, 25722.0], [66.9, 25722.0], [67.0, 25724.0], [67.1, 25724.0], [67.2, 25725.0], [67.3, 25725.0], [67.4, 25726.0], [67.5, 25726.0], [67.6, 25726.0], [67.7, 25726.0], [67.8, 25728.0], [67.9, 25732.0], [68.0, 25734.0], [68.1, 25734.0], [68.2, 25737.0], [68.3, 25740.0], [68.4, 25740.0], [68.5, 25740.0], [68.6, 25740.0], [68.7, 25741.0], [68.8, 25745.0], [68.9, 25746.0], [69.0, 25747.0], [69.1, 25747.0], [69.2, 25754.0], [69.3, 25756.0], [69.4, 25766.0], [69.5, 25771.0], [69.6, 25771.0], [69.7, 25898.0], [69.8, 25940.0], [69.9, 25975.0], [70.0, 25989.0], [70.1, 25989.0], [70.2, 25996.0], [70.3, 26003.0], [70.4, 26015.0], [70.5, 26028.0], [70.6, 26028.0], [70.7, 26041.0], [70.8, 26044.0], [70.9, 26067.0], [71.0, 26068.0], [71.1, 26068.0], [71.2, 26074.0], [71.3, 26083.0], [71.4, 26089.0], [71.5, 26091.0], [71.6, 26091.0], [71.7, 26101.0], [71.8, 26110.0], [71.9, 26114.0], [72.0, 26118.0], [72.1, 26118.0], [72.2, 26118.0], [72.3, 26120.0], [72.4, 26124.0], [72.5, 26126.0], [72.6, 26126.0], [72.7, 26129.0], [72.8, 26131.0], [72.9, 26133.0], [73.0, 26139.0], [73.1, 26139.0], [73.2, 26146.0], [73.3, 26155.0], [73.4, 26157.0], [73.5, 26161.0], [73.6, 26161.0], [73.7, 26162.0], [73.8, 26167.0], [73.9, 26167.0], [74.0, 26170.0], [74.1, 26170.0], [74.2, 26171.0], [74.3, 26175.0], [74.4, 26182.0], [74.5, 26185.0], [74.6, 26185.0], [74.7, 26185.0], [74.8, 26186.0], [74.9, 26187.0], [75.0, 26198.0], [75.1, 26198.0], [75.2, 26199.0], [75.3, 26199.0], [75.4, 26202.0], [75.5, 26204.0], [75.6, 26204.0], [75.7, 26207.0], [75.8, 26212.0], [75.9, 26213.0], [76.0, 26219.0], [76.1, 26219.0], [76.2, 26220.0], [76.3, 26224.0], [76.4, 26224.0], [76.5, 26224.0], [76.6, 26224.0], [76.7, 26228.0], [76.8, 26228.0], [76.9, 26230.0], [77.0, 26230.0], [77.1, 26230.0], [77.2, 26231.0], [77.3, 26231.0], [77.4, 26232.0], [77.5, 26232.0], [77.6, 26232.0], [77.7, 26233.0], [77.8, 26234.0], [77.9, 26236.0], [78.0, 26240.0], [78.1, 26240.0], [78.2, 26242.0], [78.3, 26243.0], [78.4, 26244.0], [78.5, 26244.0], [78.6, 26244.0], [78.7, 26245.0], [78.8, 26246.0], [78.9, 26246.0], [79.0, 26248.0], [79.1, 26248.0], [79.2, 26250.0], [79.3, 26252.0], [79.4, 26254.0], [79.5, 26258.0], [79.6, 26258.0], [79.7, 26262.0], [79.8, 26263.0], [79.9, 26264.0], [80.0, 26268.0], [80.1, 26268.0], [80.2, 26269.0], [80.3, 26272.0], [80.4, 26273.0], [80.5, 26276.0], [80.6, 26276.0], [80.7, 26277.0], [80.8, 26290.0], [80.9, 26294.0], [81.0, 26296.0], [81.1, 26296.0], [81.2, 26297.0], [81.3, 26297.0], [81.4, 26297.0], [81.5, 26306.0], [81.6, 26306.0], [81.7, 26307.0], [81.8, 26310.0], [81.9, 26311.0], [82.0, 26314.0], [82.1, 26314.0], [82.2, 26314.0], [82.3, 26317.0], [82.4, 26317.0], [82.5, 26319.0], [82.6, 26319.0], [82.7, 26319.0], [82.8, 26320.0], [82.9, 26323.0], [83.0, 26323.0], [83.1, 26323.0], [83.2, 26327.0], [83.3, 26328.0], [83.4, 26329.0], [83.5, 26329.0], [83.6, 26329.0], [83.7, 26332.0], [83.8, 26332.0], [83.9, 26334.0], [84.0, 26334.0], [84.1, 26334.0], [84.2, 26334.0], [84.3, 26336.0], [84.4, 26339.0], [84.5, 26339.0], [84.6, 26339.0], [84.7, 26343.0], [84.8, 26343.0], [84.9, 26343.0], [85.0, 26349.0], [85.1, 26349.0], [85.2, 26349.0], [85.3, 26352.0], [85.4, 26352.0], [85.5, 26354.0], [85.6, 26354.0], [85.7, 26354.0], [85.8, 26355.0], [85.9, 26355.0], [86.0, 26356.0], [86.1, 26356.0], [86.2, 26358.0], [86.3, 26362.0], [86.4, 26363.0], [86.5, 26363.0], [86.6, 26363.0], [86.7, 26365.0], [86.8, 26365.0], [86.9, 26365.0], [87.0, 26370.0], [87.1, 26370.0], [87.2, 26374.0], [87.3, 26374.0], [87.4, 26374.0], [87.5, 26378.0], [87.6, 26378.0], [87.7, 26381.0], [87.8, 26386.0], [87.9, 26389.0], [88.0, 26394.0], [88.1, 26394.0], [88.2, 26402.0], [88.3, 26411.0], [88.4, 26417.0], [88.5, 26418.0], [88.6, 26418.0], [88.7, 26422.0], [88.8, 26425.0], [88.9, 26426.0], [89.0, 26438.0], [89.1, 26438.0], [89.2, 26440.0], [89.3, 26442.0], [89.4, 26442.0], [89.5, 26443.0], [89.6, 26443.0], [89.7, 26451.0], [89.8, 26453.0], [89.9, 26458.0], [90.0, 26459.0], [90.1, 26459.0], [90.2, 26460.0], [90.3, 26466.0], [90.4, 26470.0], [90.5, 26474.0], [90.6, 26474.0], [90.7, 26477.0], [90.8, 26486.0], [90.9, 26490.0], [91.0, 26491.0], [91.1, 26491.0], [91.2, 26495.0], [91.3, 26496.0], [91.4, 26496.0], [91.5, 26500.0], [91.6, 26500.0], [91.7, 26503.0], [91.8, 26512.0], [91.9, 26535.0], [92.0, 26561.0], [92.1, 26561.0], [92.2, 26594.0], [92.3, 26628.0], [92.4, 26661.0], [92.5, 26697.0], [92.6, 26697.0], [92.7, 26745.0], [92.8, 26756.0], [92.9, 26819.0], [93.0, 26860.0], [93.1, 26860.0], [93.2, 26909.0], [93.3, 26924.0], [93.4, 26931.0], [93.5, 27003.0], [93.6, 27003.0], [93.7, 27043.0], [93.8, 27072.0], [93.9, 27080.0], [94.0, 27105.0], [94.1, 27105.0], [94.2, 27142.0], [94.3, 27187.0], [94.4, 27259.0], [94.5, 27329.0], [94.6, 27329.0], [94.7, 27333.0], [94.8, 27337.0], [94.9, 27368.0], [95.0, 27399.0], [95.1, 27399.0], [95.2, 27479.0], [95.3, 27511.0], [95.4, 27517.0], [95.5, 27549.0], [95.6, 27549.0], [95.7, 27629.0], [95.8, 27652.0], [95.9, 27660.0], [96.0, 27748.0], [96.1, 27748.0], [96.2, 27769.0], [96.3, 27793.0], [96.4, 27802.0], [96.5, 27873.0], [96.6, 27873.0], [96.7, 27906.0], [96.8, 27945.0], [96.9, 27980.0], [97.0, 28055.0], [97.1, 28055.0], [97.2, 28057.0], [97.3, 28107.0], [97.4, 28159.0], [97.5, 28177.0], [97.6, 28177.0], [97.7, 28256.0], [97.8, 28270.0], [97.9, 28288.0], [98.0, 28300.0], [98.1, 28300.0], [98.2, 28328.0], [98.3, 28404.0], [98.4, 28437.0], [98.5, 28450.0], [98.6, 28450.0], [98.7, 28515.0], [98.8, 28548.0], [98.9, 28551.0], [99.0, 28642.0], [99.1, 28642.0], [99.2, 28662.0], [99.3, 28680.0], [99.4, 28738.0], [99.5, 28747.0], [99.6, 28747.0], [99.7, 28786.0], [99.8, 28857.0], [99.9, 28907.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 1987.0], [0.1, 1987.0], [0.2, 2039.0], [0.3, 2139.0], [0.4, 2182.0], [0.5, 2186.0], [0.6, 2186.0], [0.7, 2198.0], [0.8, 2208.0], [0.9, 2220.0], [1.0, 2225.0], [1.1, 2225.0], [1.2, 2246.0], [1.3, 2289.0], [1.4, 2333.0], [1.5, 2334.0], [1.6, 2334.0], [1.7, 2338.0], [1.8, 2354.0], [1.9, 2355.0], [2.0, 2362.0], [2.1, 2362.0], [2.2, 2372.0], [2.3, 2372.0], [2.4, 2372.0], [2.5, 2384.0], [2.6, 2384.0], [2.7, 2384.0], [2.8, 2386.0], [2.9, 2386.0], [3.0, 2393.0], [3.1, 2393.0], [3.2, 2394.0], [3.3, 2397.0], [3.4, 2398.0], [3.5, 2399.0], [3.6, 2399.0], [3.7, 2405.0], [3.8, 2405.0], [3.9, 2406.0], [4.0, 2407.0], [4.1, 2407.0], [4.2, 2407.0], [4.3, 2415.0], [4.4, 2418.0], [4.5, 2421.0], [4.6, 2421.0], [4.7, 2428.0], [4.8, 2429.0], [4.9, 2431.0], [5.0, 2434.0], [5.1, 2434.0], [5.2, 2435.0], [5.3, 2437.0], [5.4, 2439.0], [5.5, 2441.0], [5.6, 2441.0], [5.7, 2444.0], [5.8, 2447.0], [5.9, 2453.0], [6.0, 2458.0], [6.1, 2458.0], [6.2, 2458.0], [6.3, 2469.0], [6.4, 2471.0], [6.5, 2472.0], [6.6, 2472.0], [6.7, 2473.0], [6.8, 2476.0], [6.9, 2477.0], [7.0, 2478.0], [7.1, 2478.0], [7.2, 2478.0], [7.3, 2484.0], [7.4, 2484.0], [7.5, 2494.0], [7.6, 2494.0], [7.7, 2511.0], [7.8, 2523.0], [7.9, 2523.0], [8.0, 2524.0], [8.1, 2524.0], [8.2, 2528.0], [8.3, 2529.0], [8.4, 2529.0], [8.5, 2562.0], [8.6, 2562.0], [8.7, 2564.0], [8.8, 2565.0], [8.9, 2580.0], [9.0, 2583.0], [9.1, 2583.0], [9.2, 2592.0], [9.3, 2599.0], [9.4, 2617.0], [9.5, 2620.0], [9.6, 2620.0], [9.7, 2623.0], [9.8, 2641.0], [9.9, 2647.0], [10.0, 2657.0], [10.1, 2657.0], [10.2, 2662.0], [10.3, 2666.0], [10.4, 2667.0], [10.5, 2668.0], [10.6, 2668.0], [10.7, 2669.0], [10.8, 2672.0], [10.9, 2673.0], [11.0, 2674.0], [11.1, 2674.0], [11.2, 2674.0], [11.3, 2675.0], [11.4, 2679.0], [11.5, 2680.0], [11.6, 2680.0], [11.7, 2683.0], [11.8, 2689.0], [11.9, 2690.0], [12.0, 2691.0], [12.1, 2691.0], [12.2, 2692.0], [12.3, 2694.0], [12.4, 2696.0], [12.5, 2697.0], [12.6, 2697.0], [12.7, 2698.0], [12.8, 2701.0], [12.9, 2702.0], [13.0, 2702.0], [13.1, 2702.0], [13.2, 2702.0], [13.3, 2705.0], [13.4, 2705.0], [13.5, 2705.0], [13.6, 2705.0], [13.7, 2707.0], [13.8, 2708.0], [13.9, 2709.0], [14.0, 2713.0], [14.1, 2713.0], [14.2, 2716.0], [14.3, 2716.0], [14.4, 2717.0], [14.5, 2717.0], [14.6, 2717.0], [14.7, 2724.0], [14.8, 2726.0], [14.9, 2875.0], [15.0, 2882.0], [15.1, 2882.0], [15.2, 2886.0], [15.3, 2919.0], [15.4, 2919.0], [15.5, 2920.0], [15.6, 2920.0], [15.7, 2921.0], [15.8, 2924.0], [15.9, 2924.0], [16.0, 2925.0], [16.1, 2925.0], [16.2, 2925.0], [16.3, 2926.0], [16.4, 2932.0], [16.5, 2935.0], [16.6, 2935.0], [16.7, 2937.0], [16.8, 2952.0], [16.9, 2953.0], [17.0, 2953.0], [17.1, 2953.0], [17.2, 2955.0], [17.3, 2977.0], [17.4, 2979.0], [17.5, 2985.0], [17.6, 2985.0], [17.7, 2985.0], [17.8, 2989.0], [17.9, 2990.0], [18.0, 2990.0], [18.1, 2990.0], [18.2, 2991.0], [18.3, 2994.0], [18.4, 2998.0], [18.5, 2999.0], [18.6, 2999.0], [18.7, 3000.0], [18.8, 3001.0], [18.9, 3007.0], [19.0, 3008.0], [19.1, 3008.0], [19.2, 3009.0], [19.3, 3010.0], [19.4, 3011.0], [19.5, 3011.0], [19.6, 3011.0], [19.7, 3011.0], [19.8, 3011.0], [19.9, 3012.0], [20.0, 3015.0], [20.1, 3015.0], [20.2, 3015.0], [20.3, 3016.0], [20.4, 3016.0], [20.5, 3016.0], [20.6, 3016.0], [20.7, 3016.0], [20.8, 3017.0], [20.9, 3017.0], [21.0, 3017.0], [21.1, 3017.0], [21.2, 3018.0], [21.3, 3020.0], [21.4, 3021.0], [21.5, 3022.0], [21.6, 3022.0], [21.7, 3023.0], [21.8, 3023.0], [21.9, 3027.0], [22.0, 3028.0], [22.1, 3028.0], [22.2, 3031.0], [22.3, 3032.0], [22.4, 3032.0], [22.5, 3033.0], [22.6, 3033.0], [22.7, 3035.0], [22.8, 3035.0], [22.9, 3038.0], [23.0, 3039.0], [23.1, 3039.0], [23.2, 3040.0], [23.3, 3040.0], [23.4, 3040.0], [23.5, 3043.0], [23.6, 3043.0], [23.7, 3043.0], [23.8, 3044.0], [23.9, 3044.0], [24.0, 3044.0], [24.1, 3044.0], [24.2, 3044.0], [24.3, 3045.0], [24.4, 3045.0], [24.5, 3045.0], [24.6, 3045.0], [24.7, 3046.0], [24.8, 3047.0], [24.9, 3048.0], [25.0, 3048.0], [25.1, 3048.0], [25.2, 3048.0], [25.3, 3050.0], [25.4, 3051.0], [25.5, 3053.0], [25.6, 3053.0], [25.7, 3053.0], [25.8, 3054.0], [25.9, 3054.0], [26.0, 3055.0], [26.1, 3055.0], [26.2, 3055.0], [26.3, 3057.0], [26.4, 3057.0], [26.5, 3057.0], [26.6, 3057.0], [26.7, 3059.0], [26.8, 3059.0], [26.9, 3059.0], [27.0, 3059.0], [27.1, 3059.0], [27.2, 3059.0], [27.3, 3059.0], [27.4, 3060.0], [27.5, 3060.0], [27.6, 3060.0], [27.7, 3061.0], [27.8, 3061.0], [27.9, 3062.0], [28.0, 3062.0], [28.1, 3062.0], [28.2, 3062.0], [28.3, 3062.0], [28.4, 3063.0], [28.5, 3063.0], [28.6, 3063.0], [28.7, 3063.0], [28.8, 3063.0], [28.9, 3064.0], [29.0, 3064.0], [29.1, 3064.0], [29.2, 3065.0], [29.3, 3065.0], [29.4, 3065.0], [29.5, 3065.0], [29.6, 3065.0], [29.7, 3065.0], [29.8, 3066.0], [29.9, 3066.0], [30.0, 3066.0], [30.1, 3066.0], [30.2, 3066.0], [30.3, 3066.0], [30.4, 3068.0], [30.5, 3068.0], [30.6, 3068.0], [30.7, 3068.0], [30.8, 3069.0], [30.9, 3070.0], [31.0, 3070.0], [31.1, 3070.0], [31.2, 3071.0], [31.3, 3071.0], [31.4, 3072.0], [31.5, 3072.0], [31.6, 3072.0], [31.7, 3072.0], [31.8, 3073.0], [31.9, 3073.0], [32.0, 3074.0], [32.1, 3074.0], [32.2, 3074.0], [32.3, 3075.0], [32.4, 3075.0], [32.5, 3076.0], [32.6, 3076.0], [32.7, 3077.0], [32.8, 3078.0], [32.9, 3081.0], [33.0, 3081.0], [33.1, 3081.0], [33.2, 3082.0], [33.3, 3082.0], [33.4, 3083.0], [33.5, 3084.0], [33.6, 3084.0], [33.7, 3086.0], [33.8, 3097.0], [33.9, 18221.0], [34.0, 19062.0], [34.1, 19062.0], [34.2, 19091.0], [34.3, 19094.0], [34.4, 19132.0], [34.5, 19168.0], [34.6, 19168.0], [34.7, 19246.0], [34.8, 19247.0], [34.9, 19279.0], [35.0, 19320.0], [35.1, 19320.0], [35.2, 19353.0], [35.3, 19388.0], [35.4, 19439.0], [35.5, 19465.0], [35.6, 19465.0], [35.7, 19506.0], [35.8, 19534.0], [35.9, 19573.0], [36.0, 19611.0], [36.1, 19611.0], [36.2, 19647.0], [36.3, 19683.0], [36.4, 19721.0], [36.5, 19758.0], [36.6, 19758.0], [36.7, 19795.0], [36.8, 19830.0], [36.9, 19866.0], [37.0, 19937.0], [37.1, 19937.0], [37.2, 19937.0], [37.3, 19976.0], [37.4, 24346.0], [37.5, 24604.0], [37.6, 24604.0], [37.7, 24636.0], [37.8, 24664.0], [37.9, 24677.0], [38.0, 24678.0], [38.1, 24678.0], [38.2, 24683.0], [38.3, 24694.0], [38.4, 24695.0], [38.5, 24703.0], [38.6, 24703.0], [38.7, 24704.0], [38.8, 24707.0], [38.9, 24708.0], [39.0, 24708.0], [39.1, 24708.0], [39.2, 24709.0], [39.3, 24712.0], [39.4, 24713.0], [39.5, 24714.0], [39.6, 24714.0], [39.7, 24714.0], [39.8, 24717.0], [39.9, 24720.0], [40.0, 24720.0], [40.1, 24720.0], [40.2, 24720.0], [40.3, 24722.0], [40.4, 24723.0], [40.5, 24723.0], [40.6, 24723.0], [40.7, 24725.0], [40.8, 24729.0], [40.9, 24731.0], [41.0, 24736.0], [41.1, 24736.0], [41.2, 24740.0], [41.3, 24741.0], [41.4, 24750.0], [41.5, 24751.0], [41.6, 24751.0], [41.7, 24755.0], [41.8, 24762.0], [41.9, 24778.0], [42.0, 24778.0], [42.1, 24778.0], [42.2, 24780.0], [42.3, 24787.0], [42.4, 24787.0], [42.5, 24789.0], [42.6, 24789.0], [42.7, 24803.0], [42.8, 24826.0], [42.9, 24835.0], [43.0, 24838.0], [43.1, 24838.0], [43.2, 24840.0], [43.3, 24842.0], [43.4, 24848.0], [43.5, 24859.0], [43.6, 24859.0], [43.7, 25206.0], [43.8, 25222.0], [43.9, 25239.0], [44.0, 25242.0], [44.1, 25242.0], [44.2, 25245.0], [44.3, 25248.0], [44.4, 25249.0], [44.5, 25254.0], [44.6, 25254.0], [44.7, 25255.0], [44.8, 25257.0], [44.9, 25258.0], [45.0, 25258.0], [45.1, 25258.0], [45.2, 25259.0], [45.3, 25265.0], [45.4, 25268.0], [45.5, 25268.0], [45.6, 25268.0], [45.7, 25269.0], [45.8, 25274.0], [45.9, 25274.0], [46.0, 25274.0], [46.1, 25274.0], [46.2, 25275.0], [46.3, 25280.0], [46.4, 25281.0], [46.5, 25287.0], [46.6, 25287.0], [46.7, 25289.0], [46.8, 25293.0], [46.9, 25294.0], [47.0, 25294.0], [47.1, 25294.0], [47.2, 25297.0], [47.3, 25303.0], [47.4, 25303.0], [47.5, 25303.0], [47.6, 25303.0], [47.7, 25311.0], [47.8, 25314.0], [47.9, 25321.0], [48.0, 25322.0], [48.1, 25322.0], [48.2, 25323.0], [48.3, 25327.0], [48.4, 25330.0], [48.5, 25330.0], [48.6, 25330.0], [48.7, 25334.0], [48.8, 25337.0], [48.9, 25340.0], [49.0, 25341.0], [49.1, 25341.0], [49.2, 25343.0], [49.3, 25343.0], [49.4, 25345.0], [49.5, 25358.0], [49.6, 25358.0], [49.7, 25370.0], [49.8, 25380.0], [49.9, 25394.0], [50.0, 25398.0], [50.1, 25398.0], [50.2, 25407.0], [50.3, 25420.0], [50.4, 25433.0], [50.5, 25455.0], [50.6, 25455.0], [50.7, 25458.0], [50.8, 25463.0], [50.9, 25524.0], [51.0, 25531.0], [51.1, 25531.0], [51.2, 25537.0], [51.3, 25542.0], [51.4, 25552.0], [51.5, 25553.0], [51.6, 25553.0], [51.7, 25555.0], [51.8, 25571.0], [51.9, 25575.0], [52.0, 25577.0], [52.1, 25577.0], [52.2, 25577.0], [52.3, 25578.0], [52.4, 25585.0], [52.5, 25586.0], [52.6, 25586.0], [52.7, 25586.0], [52.8, 25587.0], [52.9, 25592.0], [53.0, 25594.0], [53.1, 25594.0], [53.2, 25596.0], [53.3, 25597.0], [53.4, 25597.0], [53.5, 25598.0], [53.6, 25598.0], [53.7, 25602.0], [53.8, 25604.0], [53.9, 25606.0], [54.0, 25611.0], [54.1, 25611.0], [54.2, 25613.0], [54.3, 25613.0], [54.4, 25613.0], [54.5, 25614.0], [54.6, 25614.0], [54.7, 25615.0], [54.8, 25616.0], [54.9, 25619.0], [55.0, 25620.0], [55.1, 25620.0], [55.2, 25621.0], [55.3, 25622.0], [55.4, 25624.0], [55.5, 25626.0], [55.6, 25626.0], [55.7, 25628.0], [55.8, 25631.0], [55.9, 25631.0], [56.0, 25633.0], [56.1, 25633.0], [56.2, 25636.0], [56.3, 25637.0], [56.4, 25637.0], [56.5, 25639.0], [56.6, 25639.0], [56.7, 25639.0], [56.8, 25640.0], [56.9, 25641.0], [57.0, 25642.0], [57.1, 25642.0], [57.2, 25646.0], [57.3, 25648.0], [57.4, 25648.0], [57.5, 25649.0], [57.6, 25649.0], [57.7, 25650.0], [57.8, 25650.0], [57.9, 25651.0], [58.0, 25652.0], [58.1, 25652.0], [58.2, 25653.0], [58.3, 25654.0], [58.4, 25654.0], [58.5, 25657.0], [58.6, 25657.0], [58.7, 25658.0], [58.8, 25659.0], [58.9, 25659.0], [59.0, 25661.0], [59.1, 25661.0], [59.2, 25661.0], [59.3, 25662.0], [59.4, 25664.0], [59.5, 25664.0], [59.6, 25664.0], [59.7, 25664.0], [59.8, 25665.0], [59.9, 25666.0], [60.0, 25670.0], [60.1, 25670.0], [60.2, 25674.0], [60.3, 25674.0], [60.4, 25675.0], [60.5, 25676.0], [60.6, 25676.0], [60.7, 25678.0], [60.8, 25679.0], [60.9, 25679.0], [61.0, 25680.0], [61.1, 25680.0], [61.2, 25680.0], [61.3, 25682.0], [61.4, 25684.0], [61.5, 25684.0], [61.6, 25684.0], [61.7, 25685.0], [61.8, 25686.0], [61.9, 25687.0], [62.0, 25689.0], [62.1, 25689.0], [62.2, 25690.0], [62.3, 25691.0], [62.4, 25692.0], [62.5, 25692.0], [62.6, 25692.0], [62.7, 25693.0], [62.8, 25694.0], [62.9, 25694.0], [63.0, 25695.0], [63.1, 25695.0], [63.2, 25695.0], [63.3, 25696.0], [63.4, 25697.0], [63.5, 25697.0], [63.6, 25697.0], [63.7, 25698.0], [63.8, 25698.0], [63.9, 25698.0], [64.0, 25699.0], [64.1, 25699.0], [64.2, 25700.0], [64.3, 25700.0], [64.4, 25702.0], [64.5, 25706.0], [64.6, 25706.0], [64.7, 25706.0], [64.8, 25707.0], [64.9, 25709.0], [65.0, 25710.0], [65.1, 25710.0], [65.2, 25710.0], [65.3, 25711.0], [65.4, 25712.0], [65.5, 25713.0], [65.6, 25713.0], [65.7, 25713.0], [65.8, 25714.0], [65.9, 25715.0], [66.0, 25716.0], [66.1, 25716.0], [66.2, 25717.0], [66.3, 25717.0], [66.4, 25720.0], [66.5, 25721.0], [66.6, 25721.0], [66.7, 25722.0], [66.8, 25722.0], [66.9, 25722.0], [67.0, 25724.0], [67.1, 25724.0], [67.2, 25725.0], [67.3, 25725.0], [67.4, 25726.0], [67.5, 25726.0], [67.6, 25726.0], [67.7, 25726.0], [67.8, 25728.0], [67.9, 25732.0], [68.0, 25734.0], [68.1, 25734.0], [68.2, 25737.0], [68.3, 25740.0], [68.4, 25740.0], [68.5, 25740.0], [68.6, 25740.0], [68.7, 25741.0], [68.8, 25745.0], [68.9, 25746.0], [69.0, 25747.0], [69.1, 25747.0], [69.2, 25754.0], [69.3, 25756.0], [69.4, 25766.0], [69.5, 25771.0], [69.6, 25771.0], [69.7, 25898.0], [69.8, 25940.0], [69.9, 25975.0], [70.0, 25989.0], [70.1, 25989.0], [70.2, 25996.0], [70.3, 26003.0], [70.4, 26015.0], [70.5, 26028.0], [70.6, 26028.0], [70.7, 26041.0], [70.8, 26044.0], [70.9, 26067.0], [71.0, 26068.0], [71.1, 26068.0], [71.2, 26074.0], [71.3, 26083.0], [71.4, 26089.0], [71.5, 26091.0], [71.6, 26091.0], [71.7, 26101.0], [71.8, 26110.0], [71.9, 26114.0], [72.0, 26118.0], [72.1, 26118.0], [72.2, 26118.0], [72.3, 26120.0], [72.4, 26124.0], [72.5, 26126.0], [72.6, 26126.0], [72.7, 26129.0], [72.8, 26131.0], [72.9, 26133.0], [73.0, 26139.0], [73.1, 26139.0], [73.2, 26146.0], [73.3, 26155.0], [73.4, 26157.0], [73.5, 26161.0], [73.6, 26161.0], [73.7, 26162.0], [73.8, 26167.0], [73.9, 26167.0], [74.0, 26170.0], [74.1, 26170.0], [74.2, 26171.0], [74.3, 26175.0], [74.4, 26182.0], [74.5, 26185.0], [74.6, 26185.0], [74.7, 26185.0], [74.8, 26186.0], [74.9, 26187.0], [75.0, 26198.0], [75.1, 26198.0], [75.2, 26199.0], [75.3, 26199.0], [75.4, 26202.0], [75.5, 26204.0], [75.6, 26204.0], [75.7, 26207.0], [75.8, 26212.0], [75.9, 26213.0], [76.0, 26219.0], [76.1, 26219.0], [76.2, 26220.0], [76.3, 26224.0], [76.4, 26224.0], [76.5, 26224.0], [76.6, 26224.0], [76.7, 26228.0], [76.8, 26228.0], [76.9, 26230.0], [77.0, 26230.0], [77.1, 26230.0], [77.2, 26231.0], [77.3, 26231.0], [77.4, 26232.0], [77.5, 26232.0], [77.6, 26232.0], [77.7, 26233.0], [77.8, 26234.0], [77.9, 26236.0], [78.0, 26240.0], [78.1, 26240.0], [78.2, 26242.0], [78.3, 26243.0], [78.4, 26244.0], [78.5, 26244.0], [78.6, 26244.0], [78.7, 26245.0], [78.8, 26246.0], [78.9, 26246.0], [79.0, 26248.0], [79.1, 26248.0], [79.2, 26250.0], [79.3, 26252.0], [79.4, 26254.0], [79.5, 26258.0], [79.6, 26258.0], [79.7, 26262.0], [79.8, 26263.0], [79.9, 26264.0], [80.0, 26268.0], [80.1, 26268.0], [80.2, 26269.0], [80.3, 26272.0], [80.4, 26273.0], [80.5, 26276.0], [80.6, 26276.0], [80.7, 26277.0], [80.8, 26290.0], [80.9, 26294.0], [81.0, 26296.0], [81.1, 26296.0], [81.2, 26297.0], [81.3, 26297.0], [81.4, 26297.0], [81.5, 26306.0], [81.6, 26306.0], [81.7, 26307.0], [81.8, 26310.0], [81.9, 26311.0], [82.0, 26314.0], [82.1, 26314.0], [82.2, 26314.0], [82.3, 26317.0], [82.4, 26317.0], [82.5, 26319.0], [82.6, 26319.0], [82.7, 26319.0], [82.8, 26320.0], [82.9, 26323.0], [83.0, 26323.0], [83.1, 26323.0], [83.2, 26327.0], [83.3, 26328.0], [83.4, 26329.0], [83.5, 26329.0], [83.6, 26329.0], [83.7, 26332.0], [83.8, 26332.0], [83.9, 26334.0], [84.0, 26334.0], [84.1, 26334.0], [84.2, 26334.0], [84.3, 26336.0], [84.4, 26339.0], [84.5, 26339.0], [84.6, 26339.0], [84.7, 26343.0], [84.8, 26343.0], [84.9, 26343.0], [85.0, 26349.0], [85.1, 26349.0], [85.2, 26349.0], [85.3, 26352.0], [85.4, 26352.0], [85.5, 26354.0], [85.6, 26354.0], [85.7, 26354.0], [85.8, 26355.0], [85.9, 26355.0], [86.0, 26356.0], [86.1, 26356.0], [86.2, 26358.0], [86.3, 26362.0], [86.4, 26363.0], [86.5, 26363.0], [86.6, 26363.0], [86.7, 26365.0], [86.8, 26365.0], [86.9, 26365.0], [87.0, 26370.0], [87.1, 26370.0], [87.2, 26374.0], [87.3, 26374.0], [87.4, 26374.0], [87.5, 26378.0], [87.6, 26378.0], [87.7, 26381.0], [87.8, 26386.0], [87.9, 26389.0], [88.0, 26394.0], [88.1, 26394.0], [88.2, 26402.0], [88.3, 26411.0], [88.4, 26417.0], [88.5, 26418.0], [88.6, 26418.0], [88.7, 26422.0], [88.8, 26425.0], [88.9, 26426.0], [89.0, 26438.0], [89.1, 26438.0], [89.2, 26440.0], [89.3, 26442.0], [89.4, 26442.0], [89.5, 26443.0], [89.6, 26443.0], [89.7, 26451.0], [89.8, 26453.0], [89.9, 26458.0], [90.0, 26459.0], [90.1, 26459.0], [90.2, 26460.0], [90.3, 26466.0], [90.4, 26470.0], [90.5, 26474.0], [90.6, 26474.0], [90.7, 26477.0], [90.8, 26486.0], [90.9, 26490.0], [91.0, 26491.0], [91.1, 26491.0], [91.2, 26495.0], [91.3, 26496.0], [91.4, 26496.0], [91.5, 26500.0], [91.6, 26500.0], [91.7, 26503.0], [91.8, 26512.0], [91.9, 26535.0], [92.0, 26561.0], [92.1, 26561.0], [92.2, 26594.0], [92.3, 26628.0], [92.4, 26661.0], [92.5, 26697.0], [92.6, 26697.0], [92.7, 26745.0], [92.8, 26756.0], [92.9, 26819.0], [93.0, 26860.0], [93.1, 26860.0], [93.2, 26909.0], [93.3, 26924.0], [93.4, 26931.0], [93.5, 27003.0], [93.6, 27003.0], [93.7, 27043.0], [93.8, 27072.0], [93.9, 27080.0], [94.0, 27105.0], [94.1, 27105.0], [94.2, 27142.0], [94.3, 27187.0], [94.4, 27259.0], [94.5, 27329.0], [94.6, 27329.0], [94.7, 27333.0], [94.8, 27337.0], [94.9, 27368.0], [95.0, 27399.0], [95.1, 27399.0], [95.2, 27479.0], [95.3, 27511.0], [95.4, 27517.0], [95.5, 27549.0], [95.6, 27549.0], [95.7, 27629.0], [95.8, 27652.0], [95.9, 27660.0], [96.0, 27748.0], [96.1, 27748.0], [96.2, 27769.0], [96.3, 27793.0], [96.4, 27802.0], [96.5, 27873.0], [96.6, 27873.0], [96.7, 27906.0], [96.8, 27945.0], [96.9, 27980.0], [97.0, 28055.0], [97.1, 28055.0], [97.2, 28057.0], [97.3, 28107.0], [97.4, 28159.0], [97.5, 28177.0], [97.6, 28177.0], [97.7, 28256.0], [97.8, 28270.0], [97.9, 28288.0], [98.0, 28300.0], [98.1, 28300.0], [98.2, 28328.0], [98.3, 28404.0], [98.4, 28437.0], [98.5, 28450.0], [98.6, 28450.0], [98.7, 28515.0], [98.8, 28548.0], [98.9, 28551.0], [99.0, 28642.0], [99.1, 28642.0], [99.2, 28662.0], [99.3, 28680.0], [99.4, 28738.0], [99.5, 28747.0], [99.6, 28747.0], [99.7, 28786.0], [99.8, 28857.0], [99.9, 28907.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1900.0, "maxY": 122.0, "series": [{"data": [[1900.0, 1.0], [2000.0, 1.0], [2100.0, 4.0], [2300.0, 18.0], [2200.0, 5.0], [2400.0, 32.0], [2500.0, 14.0], [2600.0, 27.0], [2700.0, 17.0], [2800.0, 3.0], [2900.0, 27.0], [3000.0, 122.0], [18200.0, 1.0], [19000.0, 3.0], [19100.0, 2.0], [19200.0, 3.0], [19300.0, 3.0], [19400.0, 2.0], [19500.0, 3.0], [19600.0, 3.0], [19700.0, 3.0], [19800.0, 2.0], [19900.0, 3.0], [24300.0, 1.0], [24600.0, 8.0], [24700.0, 33.0], [24800.0, 8.0], [25200.0, 29.0], [25300.0, 23.0], [25400.0, 6.0], [25500.0, 22.0], [25800.0, 1.0], [25600.0, 84.0], [25700.0, 44.0], [25900.0, 4.0], [26000.0, 11.0], [26100.0, 30.0], [26200.0, 49.0], [26300.0, 53.0], [26400.0, 27.0], [26500.0, 6.0], [26600.0, 3.0], [27400.0, 1.0], [26700.0, 2.0], [26800.0, 2.0], [26900.0, 3.0], [27000.0, 4.0], [27100.0, 3.0], [27200.0, 1.0], [27300.0, 5.0], [27500.0, 3.0], [27600.0, 3.0], [27800.0, 2.0], [27700.0, 3.0], [27900.0, 3.0], [28000.0, 2.0], [28100.0, 3.0], [28200.0, 3.0], [28300.0, 2.0], [28400.0, 3.0], [28500.0, 3.0], [28600.0, 3.0], [28700.0, 3.0], [28800.0, 1.0], [28900.0, 1.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1900.0, 1.0], [2000.0, 1.0], [2100.0, 4.0], [2200.0, 5.0], [2300.0, 18.0], [2400.0, 32.0], [2500.0, 14.0], [2600.0, 27.0], [2700.0, 17.0], [2800.0, 3.0], [2900.0, 27.0], [3000.0, 122.0], [18200.0, 1.0], [19000.0, 3.0], [19100.0, 2.0], [19200.0, 3.0], [19300.0, 3.0], [19400.0, 2.0], [19500.0, 3.0], [19600.0, 3.0], [19700.0, 3.0], [19800.0, 2.0], [19900.0, 3.0], [24300.0, 1.0], [24600.0, 8.0], [24700.0, 33.0], [24800.0, 8.0], [25200.0, 29.0], [25300.0, 23.0], [25400.0, 6.0], [25500.0, 22.0], [25800.0, 1.0], [25600.0, 84.0], [25700.0, 44.0], [25900.0, 4.0], [26000.0, 11.0], [26100.0, 30.0], [26200.0, 49.0], [26300.0, 53.0], [26400.0, 27.0], [26500.0, 6.0], [26600.0, 3.0], [27400.0, 1.0], [26700.0, 2.0], [26800.0, 2.0], [26900.0, 3.0], [27000.0, 4.0], [27100.0, 3.0], [27200.0, 1.0], [27300.0, 5.0], [27500.0, 3.0], [27600.0, 3.0], [27800.0, 2.0], [27700.0, 3.0], [27900.0, 3.0], [28000.0, 2.0], [28100.0, 3.0], [28200.0, 3.0], [28300.0, 2.0], [28400.0, 3.0], [28500.0, 3.0], [28600.0, 3.0], [28700.0, 3.0], [28800.0, 1.0], [28900.0, 1.0]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 28900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 271.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 529.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 529.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 271.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 265.5897920604915, "minX": 1.68042342E12, "maxY": 672.380073800738, "series": [{"data": [[1.68042348E12, 265.5897920604915], [1.68042342E12, 672.380073800738]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042348E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2362.277777777778, "minX": 1.0, "maxY": 28907.0, "series": [{"data": [[2.0, 19937.0], [3.0, 19937.0], [4.0, 19866.0], [5.0, 19830.0], [6.0, 19795.0], [7.0, 19758.0], [8.0, 19721.0], [9.0, 19683.0], [10.0, 19647.0], [11.0, 19611.0], [12.0, 19573.0], [13.0, 19534.0], [14.0, 19506.0], [15.0, 19465.0], [16.0, 19439.0], [17.0, 19388.0], [18.0, 19353.0], [19.0, 19320.0], [20.0, 19279.0], [22.0, 19246.5], [23.0, 19168.0], [24.0, 19132.0], [25.0, 19094.0], [26.0, 19062.0], [27.0, 28907.0], [28.0, 28857.0], [29.0, 28786.0], [30.0, 28747.0], [31.0, 28738.0], [33.0, 28680.0], [32.0, 28662.0], [35.0, 28548.0], [34.0, 28642.0], [37.0, 28515.0], [36.0, 28551.0], [39.0, 28450.0], [38.0, 28437.0], [41.0, 28328.0], [40.0, 28404.0], [43.0, 28300.0], [42.0, 28288.0], [45.0, 28256.0], [44.0, 28270.0], [47.0, 28159.0], [46.0, 28177.0], [49.0, 28057.0], [48.0, 28107.0], [51.0, 27980.0], [50.0, 28055.0], [53.0, 27906.0], [52.0, 27945.0], [55.0, 27793.0], [54.0, 27873.0], [57.0, 27769.0], [56.0, 27802.0], [59.0, 27652.0], [58.0, 27748.0], [61.0, 27629.0], [60.0, 27660.0], [63.0, 27511.0], [62.0, 27549.0], [67.0, 27368.0], [66.0, 27399.0], [65.0, 27479.0], [64.0, 27517.0], [71.0, 27259.0], [70.0, 27337.0], [69.0, 27333.0], [68.0, 27329.0], [75.0, 27072.0], [74.0, 27105.0], [73.0, 27142.0], [72.0, 27187.0], [79.0, 26924.0], [78.0, 27003.0], [77.0, 27043.0], [76.0, 27080.0], [83.0, 26819.0], [82.0, 26860.0], [81.0, 26909.0], [80.0, 26931.0], [87.0, 26661.0], [86.0, 26697.0], [85.0, 26756.0], [84.0, 26745.0], [91.0, 26535.0], [90.0, 26561.0], [89.0, 26594.0], [88.0, 26628.0], [95.0, 26480.0], [92.0, 26512.0], [99.0, 26488.0], [103.0, 26476.0], [100.0, 26496.0], [107.0, 26442.5], [105.0, 26477.0], [104.0, 26490.0], [111.0, 26440.0], [110.0, 26438.0], [109.0, 26474.0], [108.0, 26470.0], [114.0, 26442.0], [113.0, 26451.0], [112.0, 26459.0], [118.0, 26417.0], [117.0, 26425.0], [116.0, 26424.0], [123.0, 26374.0], [121.0, 26410.333333333332], [127.0, 26394.0], [126.0, 26362.0], [125.0, 26389.0], [124.0, 26363.0], [135.0, 26374.0], [134.0, 26343.0], [133.0, 26343.0], [132.0, 26332.0], [131.0, 26334.0], [130.0, 26386.0], [129.0, 26339.0], [128.0, 26352.0], [143.0, 26334.0], [142.0, 26365.0], [140.0, 26381.0], [139.0, 26374.0], [138.0, 26374.0], [137.0, 26329.0], [136.0, 26336.0], [149.0, 26337.0], [147.0, 26365.0], [146.0, 26341.0], [144.0, 26327.0], [159.0, 26342.428571428572], [156.0, 26338.0], [154.0, 26323.0], [167.0, 26327.5], [165.0, 26316.5], [161.0, 26352.0], [160.0, 26314.0], [174.0, 26311.0], [173.0, 26294.5], [171.0, 26334.333333333332], [168.0, 26329.0], [183.0, 26258.0], [182.0, 26290.0], [181.0, 26297.0], [180.0, 26297.0], [179.0, 26276.0], [178.0, 26307.0], [177.0, 26314.0], [176.0, 26295.5], [191.0, 26233.0], [190.0, 26244.0], [189.0, 26236.0], [188.0, 26246.0], [187.0, 26277.0], [186.0, 26294.0], [185.0, 26244.0], [184.0, 26248.0], [196.0, 26264.0], [195.0, 26273.0], [194.0, 26234.0], [193.0, 26269.0], [192.0, 26243.0], [207.0, 26249.5], [205.0, 26207.0], [204.0, 26219.0], [203.0, 26263.0], [202.0, 26231.0], [201.0, 26262.0], [200.0, 26228.0], [215.0, 26230.0], [214.0, 26231.0], [213.0, 26232.0], [212.0, 26199.0], [211.0, 26232.666666666668], [209.0, 26252.0], [222.0, 26212.0], [221.0, 26230.0], [231.0, 26182.0], [230.0, 26199.0], [229.0, 26179.5], [227.0, 26157.0], [226.0, 26155.0], [225.0, 26204.0], [224.0, 26199.0], [238.0, 26162.0], [237.0, 26167.0], [236.0, 26180.5], [234.0, 26146.0], [233.0, 26187.0], [232.0, 26185.0], [247.0, 26139.0], [246.0, 26114.0], [245.0, 26118.0], [244.0, 26124.0], [243.0, 26131.0], [242.0, 26171.0], [241.0, 26120.0], [240.0, 26168.5], [255.0, 26067.0], [254.0, 26110.0], [253.0, 26133.0], [252.0, 26126.0], [251.0, 26109.0], [249.0, 26091.0], [248.0, 26101.0], [270.0, 25734.0], [271.0, 25754.0], [269.0, 25940.0], [268.0, 25898.0], [267.0, 25989.0], [266.0, 25996.0], [265.0, 26003.0], [264.0, 26015.0], [263.0, 25975.0], [257.0, 26118.0], [256.0, 26074.0], [259.0, 26083.0], [258.0, 26041.0], [262.0, 26028.0], [261.0, 26044.0], [260.0, 26068.0], [285.0, 25698.0], [286.0, 25747.0], [284.0, 25714.0], [275.0, 25711.0], [274.0, 25771.0], [273.0, 25720.0], [283.0, 25714.5], [281.0, 25710.0], [280.0, 25715.0], [278.0, 25712.0], [277.0, 25766.0], [276.0, 25713.0], [303.0, 25726.0], [302.0, 25691.5], [300.0, 25733.0], [298.0, 25732.0], [297.0, 25692.0], [296.0, 25737.0], [295.0, 25697.0], [294.0, 25733.25], [306.0, 25695.0], [319.0, 25697.5], [317.0, 25700.5], [315.0, 25711.25], [311.0, 25717.0], [310.0, 25697.5], [308.0, 25679.5], [305.0, 25721.0], [304.0, 25728.0], [334.0, 25695.0], [333.0, 25676.5], [323.0, 25680.0], [322.0, 25710.0], [321.0, 25709.0], [320.0, 25716.0], [331.0, 25664.0], [330.0, 25702.0], [329.0, 25661.0], [328.0, 25659.0], [327.0, 25706.0], [326.0, 25674.0], [325.0, 25697.5], [349.0, 25640.0], [350.0, 25639.0], [348.0, 25696.0], [339.0, 25691.0], [338.0, 25677.5], [336.0, 25675.5], [347.0, 25699.0], [346.0, 25648.0], [345.0, 25661.0], [344.0, 25684.0], [343.0, 25697.0], [342.0, 25690.0], [341.0, 25664.0], [340.0, 25689.0], [364.0, 25674.0], [366.0, 25664.0], [367.0, 25624.0], [365.0, 25621.0], [362.0, 25636.5], [360.0, 25628.0], [359.0, 25687.0], [355.0, 25637.0], [354.0, 25677.5], [358.0, 25636.0], [357.0, 25631.0], [356.0, 25692.0], [382.0, 25619.0], [383.0, 25604.0], [381.0, 25621.0], [371.0, 25651.0], [370.0, 25626.0], [369.0, 25620.0], [368.0, 25674.0], [378.0, 25648.0], [377.0, 25652.0], [376.0, 25639.0], [374.0, 25650.0], [373.0, 25658.0], [372.0, 25659.0], [398.0, 25616.5], [399.0, 25585.0], [396.0, 25592.0], [395.0, 25641.0], [394.0, 25586.0], [393.0, 25597.0], [392.0, 25598.0], [391.0, 25635.85714285714], [387.0, 25611.0], [403.0, 25577.0], [415.0, 25564.166666666668], [409.0, 25606.0], [408.0, 25586.0], [407.0, 25578.0], [406.0, 25571.0], [405.0, 25618.0], [402.0, 25577.0], [401.0, 25616.0], [400.0, 25594.0], [429.0, 25398.0], [431.0, 25361.5], [428.0, 25358.0], [419.0, 25555.0], [418.0, 25524.0], [417.0, 25552.0], [416.0, 25537.0], [427.0, 25370.0], [426.0, 25394.0], [425.0, 25407.0], [424.0, 25420.0], [423.0, 25458.0], [422.0, 25433.0], [421.0, 25455.0], [420.0, 25463.0], [433.0, 25340.0], [445.0, 25317.8], [443.0, 25343.0], [439.0, 25327.0], [438.0, 25345.0], [437.0, 25287.0], [436.0, 25293.0], [435.0, 25335.5], [432.0, 25323.0], [462.0, 25277.999999999996], [454.0, 25281.333333333332], [451.0, 25314.0], [450.0, 25295.6], [478.0, 24848.0], [477.0, 25257.0], [476.0, 25230.0], [474.0, 25235.5], [472.0, 25264.666666666668], [469.0, 25268.0], [468.0, 25262.166666666668], [493.0, 24723.0], [492.0, 24778.0], [482.0, 24837.5], [480.0, 24850.5], [491.0, 24741.0], [490.0, 24778.0], [489.0, 24783.5], [487.0, 24789.0], [486.0, 24826.0], [485.0, 24838.0], [484.0, 24795.0], [509.0, 24678.0], [511.0, 24700.0], [508.0, 24717.5], [506.0, 24694.0], [505.0, 24736.0], [504.0, 24727.0], [502.0, 24740.0], [501.0, 24750.0], [500.0, 24732.571428571428], [529.0, 18221.0], [543.0, 3049.5], [537.0, 3075.0], [536.0, 3061.0], [519.0, 24688.0], [517.0, 24707.0], [516.0, 24714.5], [514.0, 24714.0], [513.0, 24716.5], [534.0, 3068.5], [533.0, 3064.0], [530.0, 3086.0], [528.0, 19091.0], [527.0, 24346.0], [526.0, 24604.0], [525.0, 24636.0], [524.0, 24677.0], [523.0, 24708.0], [522.0, 24695.0], [521.0, 24715.0], [572.0, 3066.0], [568.0, 3058.5], [551.0, 3032.0], [550.0, 3080.5], [548.0, 3076.0], [547.0, 3031.0], [546.0, 3054.0], [544.0, 3074.8], [566.0, 3065.0], [563.0, 3066.0], [562.0, 3049.5], [561.0, 3073.0], [559.0, 3084.0], [558.0, 3061.5], [556.0, 3069.5], [554.0, 3066.0], [606.0, 3017.0], [607.0, 3034.5], [605.0, 3043.0], [604.0, 3060.0], [602.0, 3034.5], [581.0, 3056.25], [579.0, 3075.0], [576.0, 3058.5], [588.0, 3032.3333333333335], [586.0, 3047.0], [599.0, 3016.0], [597.0, 3047.6666666666665], [594.0, 3039.0], [592.0, 3054.0], [635.0, 3051.5], [637.0, 3053.5], [638.0, 3029.166666666667], [636.0, 3045.0], [627.0, 3044.0], [626.0, 3042.0], [623.0, 3016.0], [610.0, 3059.0], [609.0, 3059.0], [614.0, 3037.5], [612.0, 3043.3333333333335], [622.0, 3032.75], [618.0, 3057.0], [617.0, 3036.0], [616.0, 3048.0], [664.0, 2985.0], [669.0, 2954.6], [671.0, 2922.0], [668.0, 2977.0], [662.0, 2976.8], [657.0, 2975.0], [653.0, 2985.0], [641.0, 3045.0], [640.0, 3007.0], [646.0, 3033.75], [645.0, 3043.0], [652.0, 3039.5], [650.0, 2991.0], [649.0, 3047.0], [648.0, 3017.3333333333335], [699.0, 2685.3], [702.0, 2689.0], [703.0, 2691.0], [701.0, 2707.0], [695.0, 2679.0], [692.0, 2684.0], [685.0, 2710.5], [677.0, 2923.0], [676.0, 2921.0], [675.0, 2882.0], [679.0, 2905.5], [678.0, 2924.0], [684.0, 2667.0], [681.0, 2920.0], [680.0, 2875.0], [734.0, 2544.75], [735.0, 2523.0], [720.0, 2692.0], [732.0, 2592.0], [730.0, 2564.0], [729.0, 2583.0], [728.0, 2599.6666666666665], [719.0, 2647.0], [709.0, 2677.0], [707.0, 2710.2], [718.0, 2702.0], [717.0, 2696.1428571428573], [716.0, 2708.0], [727.0, 2617.0], [723.0, 2641.0], [722.0, 2680.0], [721.0, 2623.0], [742.0, 2481.0], [740.0, 2529.0], [739.0, 2484.0], [738.0, 2476.0], [737.0, 2524.0], [736.0, 2528.0], [788.0, 2483.0], [800.0, 2362.277777777778], [1.0, 19976.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[403.3875000000006, 17919.69625000001]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 19937.0], [3.0, 19937.0], [4.0, 19866.0], [5.0, 19830.0], [6.0, 19795.0], [7.0, 19758.0], [8.0, 19721.0], [9.0, 19683.0], [10.0, 19647.0], [11.0, 19611.0], [12.0, 19573.0], [13.0, 19534.0], [14.0, 19506.0], [15.0, 19465.0], [16.0, 19439.0], [17.0, 19388.0], [18.0, 19353.0], [19.0, 19320.0], [20.0, 19279.0], [22.0, 19246.5], [23.0, 19168.0], [24.0, 19132.0], [25.0, 19094.0], [26.0, 19062.0], [27.0, 28907.0], [28.0, 28857.0], [29.0, 28786.0], [30.0, 28747.0], [31.0, 28738.0], [33.0, 28680.0], [32.0, 28662.0], [35.0, 28548.0], [34.0, 28642.0], [37.0, 28515.0], [36.0, 28551.0], [39.0, 28450.0], [38.0, 28437.0], [41.0, 28328.0], [40.0, 28404.0], [43.0, 28300.0], [42.0, 28288.0], [45.0, 28256.0], [44.0, 28270.0], [47.0, 28159.0], [46.0, 28177.0], [49.0, 28057.0], [48.0, 28107.0], [51.0, 27980.0], [50.0, 28055.0], [53.0, 27906.0], [52.0, 27945.0], [55.0, 27793.0], [54.0, 27873.0], [57.0, 27769.0], [56.0, 27802.0], [59.0, 27652.0], [58.0, 27748.0], [61.0, 27629.0], [60.0, 27660.0], [63.0, 27511.0], [62.0, 27549.0], [67.0, 27368.0], [66.0, 27399.0], [65.0, 27479.0], [64.0, 27517.0], [71.0, 27259.0], [70.0, 27337.0], [69.0, 27333.0], [68.0, 27329.0], [75.0, 27072.0], [74.0, 27105.0], [73.0, 27142.0], [72.0, 27187.0], [79.0, 26924.0], [78.0, 27003.0], [77.0, 27043.0], [76.0, 27080.0], [83.0, 26819.0], [82.0, 26860.0], [81.0, 26909.0], [80.0, 26931.0], [87.0, 26661.0], [86.0, 26697.0], [85.0, 26756.0], [84.0, 26745.0], [91.0, 26535.0], [90.0, 26561.0], [89.0, 26594.0], [88.0, 26628.0], [95.0, 26480.0], [92.0, 26512.0], [99.0, 26488.0], [103.0, 26476.0], [100.0, 26496.0], [107.0, 26442.5], [105.0, 26477.0], [104.0, 26490.0], [111.0, 26440.0], [110.0, 26438.0], [109.0, 26474.0], [108.0, 26470.0], [114.0, 26442.0], [113.0, 26451.0], [112.0, 26459.0], [118.0, 26417.0], [117.0, 26425.0], [116.0, 26424.0], [123.0, 26374.0], [121.0, 26410.333333333332], [127.0, 26394.0], [126.0, 26362.0], [125.0, 26389.0], [124.0, 26363.0], [135.0, 26374.0], [134.0, 26343.0], [133.0, 26343.0], [132.0, 26332.0], [131.0, 26334.0], [130.0, 26386.0], [129.0, 26339.0], [128.0, 26352.0], [143.0, 26334.0], [142.0, 26365.0], [140.0, 26381.0], [139.0, 26374.0], [138.0, 26374.0], [137.0, 26329.0], [136.0, 26336.0], [149.0, 26337.0], [147.0, 26365.0], [146.0, 26341.0], [144.0, 26327.0], [159.0, 26342.428571428572], [156.0, 26338.0], [154.0, 26323.0], [167.0, 26327.5], [165.0, 26316.5], [161.0, 26352.0], [160.0, 26314.0], [174.0, 26311.0], [173.0, 26294.5], [171.0, 26334.333333333332], [168.0, 26329.0], [183.0, 26258.0], [182.0, 26290.0], [181.0, 26297.0], [180.0, 26297.0], [179.0, 26276.0], [178.0, 26307.0], [177.0, 26314.0], [176.0, 26295.5], [191.0, 26233.0], [190.0, 26244.0], [189.0, 26236.0], [188.0, 26246.0], [187.0, 26277.0], [186.0, 26294.0], [185.0, 26244.0], [184.0, 26248.0], [196.0, 26264.0], [195.0, 26273.0], [194.0, 26234.0], [193.0, 26269.0], [192.0, 26243.0], [207.0, 26249.5], [205.0, 26207.0], [204.0, 26219.0], [203.0, 26263.0], [202.0, 26231.0], [201.0, 26262.0], [200.0, 26228.0], [215.0, 26230.0], [214.0, 26231.0], [213.0, 26232.0], [212.0, 26199.0], [211.0, 26232.666666666668], [209.0, 26252.0], [222.0, 26212.0], [221.0, 26230.0], [231.0, 26182.0], [230.0, 26199.0], [229.0, 26179.5], [227.0, 26157.0], [226.0, 26155.0], [225.0, 26204.0], [224.0, 26199.0], [238.0, 26162.0], [237.0, 26167.0], [236.0, 26180.5], [234.0, 26146.0], [233.0, 26187.0], [232.0, 26185.0], [247.0, 26139.0], [246.0, 26114.0], [245.0, 26118.0], [244.0, 26124.0], [243.0, 26131.0], [242.0, 26171.0], [241.0, 26120.0], [240.0, 26168.5], [255.0, 26067.0], [254.0, 26110.0], [253.0, 26133.0], [252.0, 26126.0], [251.0, 26109.0], [249.0, 26091.0], [248.0, 26101.0], [270.0, 25734.0], [271.0, 25754.0], [269.0, 25940.0], [268.0, 25898.0], [267.0, 25989.0], [266.0, 25996.0], [265.0, 26003.0], [264.0, 26015.0], [263.0, 25975.0], [257.0, 26118.0], [256.0, 26074.0], [259.0, 26083.0], [258.0, 26041.0], [262.0, 26028.0], [261.0, 26044.0], [260.0, 26068.0], [285.0, 25698.0], [286.0, 25747.0], [284.0, 25714.0], [275.0, 25711.0], [274.0, 25771.0], [273.0, 25720.0], [283.0, 25714.5], [281.0, 25710.0], [280.0, 25715.0], [278.0, 25712.0], [277.0, 25766.0], [276.0, 25713.0], [303.0, 25726.0], [302.0, 25691.5], [300.0, 25733.0], [298.0, 25732.0], [297.0, 25692.0], [296.0, 25737.0], [295.0, 25697.0], [294.0, 25733.25], [306.0, 25695.0], [319.0, 25697.5], [317.0, 25700.5], [315.0, 25711.25], [311.0, 25717.0], [310.0, 25697.5], [308.0, 25679.5], [305.0, 25721.0], [304.0, 25728.0], [334.0, 25695.0], [333.0, 25676.5], [323.0, 25680.0], [322.0, 25710.0], [321.0, 25709.0], [320.0, 25716.0], [331.0, 25664.0], [330.0, 25702.0], [329.0, 25661.0], [328.0, 25659.0], [327.0, 25706.0], [326.0, 25674.0], [325.0, 25697.5], [349.0, 25640.0], [350.0, 25639.0], [348.0, 25696.0], [339.0, 25691.0], [338.0, 25677.5], [336.0, 25675.5], [347.0, 25699.0], [346.0, 25648.0], [345.0, 25661.0], [344.0, 25684.0], [343.0, 25697.0], [342.0, 25690.0], [341.0, 25664.0], [340.0, 25689.0], [364.0, 25674.0], [366.0, 25664.0], [367.0, 25624.0], [365.0, 25621.0], [362.0, 25636.5], [360.0, 25628.0], [359.0, 25687.0], [355.0, 25637.0], [354.0, 25677.5], [358.0, 25636.0], [357.0, 25631.0], [356.0, 25692.0], [382.0, 25619.0], [383.0, 25604.0], [381.0, 25621.0], [371.0, 25651.0], [370.0, 25626.0], [369.0, 25620.0], [368.0, 25674.0], [378.0, 25648.0], [377.0, 25652.0], [376.0, 25639.0], [374.0, 25650.0], [373.0, 25658.0], [372.0, 25659.0], [398.0, 25616.5], [399.0, 25585.0], [396.0, 25592.0], [395.0, 25641.0], [394.0, 25586.0], [393.0, 25597.0], [392.0, 25598.0], [391.0, 25635.85714285714], [387.0, 25611.0], [403.0, 25577.0], [415.0, 25564.166666666668], [409.0, 25606.0], [408.0, 25586.0], [407.0, 25578.0], [406.0, 25571.0], [405.0, 25618.0], [402.0, 25577.0], [401.0, 25616.0], [400.0, 25594.0], [429.0, 25398.0], [431.0, 25361.5], [428.0, 25358.0], [419.0, 25555.0], [418.0, 25524.0], [417.0, 25552.0], [416.0, 25537.0], [427.0, 25370.0], [426.0, 25394.0], [425.0, 25407.0], [424.0, 25420.0], [423.0, 25458.0], [422.0, 25433.0], [421.0, 25455.0], [420.0, 25463.0], [433.0, 25340.0], [445.0, 25317.8], [443.0, 25343.0], [439.0, 25327.0], [438.0, 25345.0], [437.0, 25287.0], [436.0, 25293.0], [435.0, 25335.5], [432.0, 25323.0], [462.0, 25278.0], [454.0, 25281.333333333332], [451.0, 25314.0], [450.0, 25295.6], [478.0, 24848.0], [477.0, 25257.0], [476.0, 25230.0], [474.0, 25235.5], [472.0, 25264.666666666668], [469.0, 25268.0], [468.0, 25262.166666666668], [493.0, 24723.0], [492.0, 24778.0], [482.0, 24837.5], [480.0, 24850.5], [491.0, 24741.0], [490.0, 24778.0], [489.0, 24783.5], [487.0, 24789.0], [486.0, 24826.0], [485.0, 24838.0], [484.0, 24795.0], [509.0, 24678.0], [511.0, 24700.0], [508.0, 24717.5], [506.0, 24694.0], [505.0, 24736.0], [504.0, 24727.0], [502.0, 24740.0], [501.0, 24750.0], [500.0, 24732.571428571428], [529.0, 18221.0], [543.0, 3049.5], [537.0, 3075.0], [536.0, 3061.0], [519.0, 24688.0], [517.0, 24707.0], [516.0, 24714.5], [514.0, 24714.0], [513.0, 24716.5], [534.0, 3068.5], [533.0, 3064.0], [530.0, 3086.0], [528.0, 19091.0], [527.0, 24346.0], [526.0, 24604.0], [525.0, 24636.0], [524.0, 24677.0], [523.0, 24708.0], [522.0, 24695.0], [521.0, 24715.0], [572.0, 3066.0], [568.0, 3058.5], [551.0, 3032.0], [550.0, 3080.5], [548.0, 3076.0], [547.0, 3031.0], [546.0, 3054.0], [544.0, 3074.8], [566.0, 3065.0], [563.0, 3066.0], [562.0, 3049.5], [561.0, 3073.0], [559.0, 3084.0], [558.0, 3061.5], [556.0, 3069.5], [554.0, 3066.0], [606.0, 3017.0], [607.0, 3034.5], [605.0, 3043.0], [604.0, 3060.0], [602.0, 3034.5], [581.0, 3056.25], [579.0, 3075.0], [576.0, 3058.5], [588.0, 3032.3333333333335], [586.0, 3047.0], [599.0, 3016.0], [597.0, 3047.6666666666665], [594.0, 3039.0], [592.0, 3054.0], [635.0, 3051.5], [637.0, 3053.5], [638.0, 3029.166666666667], [636.0, 3045.0], [627.0, 3044.0], [626.0, 3042.0], [623.0, 3016.0], [610.0, 3059.0], [609.0, 3059.0], [614.0, 3037.5], [612.0, 3043.3333333333335], [622.0, 3032.75], [618.0, 3057.0], [617.0, 3036.0], [616.0, 3048.0], [664.0, 2985.0], [669.0, 2954.6], [671.0, 2922.0], [668.0, 2977.0], [662.0, 2976.8], [657.0, 2975.0], [653.0, 2985.0], [641.0, 3045.0], [640.0, 3007.0], [646.0, 3033.75], [645.0, 3043.0], [652.0, 3039.5], [650.0, 2991.0], [649.0, 3047.0], [648.0, 3017.3333333333335], [699.0, 2685.3], [702.0, 2689.0], [703.0, 2691.0], [701.0, 2707.0], [695.0, 2679.0], [692.0, 2684.0], [685.0, 2710.5], [677.0, 2923.0], [676.0, 2921.0], [675.0, 2882.0], [679.0, 2905.5], [678.0, 2924.0], [684.0, 2667.0], [681.0, 2920.0], [680.0, 2875.0], [734.0, 2544.75], [735.0, 2523.0], [720.0, 2692.0], [732.0, 2592.0], [730.0, 2564.0], [728.0, 2599.6666666666665], [719.0, 2647.0], [709.0, 2677.0], [707.0, 2710.2], [718.0, 2702.0], [717.0, 2696.1428571428573], [716.0, 2708.0], [727.0, 2617.0], [729.0, 2583.0], [723.0, 2641.0], [722.0, 2680.0], [721.0, 2623.0], [742.0, 2481.0], [740.0, 2529.0], [739.0, 2484.0], [738.0, 2476.0], [737.0, 2524.0], [736.0, 2528.0], [788.0, 2483.0], [800.0, 2362.2777777777783], [1.0, 19976.0]], "isOverall": false, "label": "Test Fragment", "isController": true}, {"data": [[403.3875000000007, 17919.69625000002]], "isOverall": false, "label": "Test Fragment-Aggregated", "isController": true}], "supportsControllersDiscrimination": true, "maxX": 800.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1006.9166666666666, "minX": 1.68042342E12, "maxY": 10419.783333333333, "series": [{"data": [[1.68042348E12, 7181.316666666667], [1.68042342E12, 10419.783333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68042348E12, 4475.516666666666], [1.68042342E12, 1006.9166666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042348E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2801.738007380073, "minX": 1.68042342E12, "maxY": 25664.43478260868, "series": [{"data": [[1.68042348E12, 25664.434782608678], [1.68042342E12, 2801.738007380073]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042348E12, 25664.43478260868], [1.68042342E12, 2801.7380073800737]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042348E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1337.527675276753, "minX": 1.68042342E12, "maxY": 25664.425330812854, "series": [{"data": [[1.68042348E12, 25664.42533081284], [1.68042342E12, 1337.527675276753]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042348E12, 25664.425330812854], [1.68042342E12, 1337.527675276753]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042348E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1931.122873345934, "minX": 1.68042342E12, "maxY": 2730.5645756457584, "series": [{"data": [[1.68042348E12, 1931.1228733459343], [1.68042342E12, 2730.5645756457584]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.68042348E12, 1931.122873345934], [1.68042342E12, 2730.5645756457575]], "isOverall": false, "label": "Test Fragment", "isController": true}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042348E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18221.0, "minX": 1.68042348E12, "maxY": 28907.0, "series": [{"data": [[1.68042348E12, 28907.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68042348E12, 26931.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68042348E12, 28720.600000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68042348E12, 27925.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68042348E12, 18221.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68042348E12, 25722.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042348E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2198.0, "minX": 1.0, "maxY": 27889.5, "series": [{"data": [[1.0, 18656.0], [65.0, 24750.0], [16.0, 19702.0], [278.0, 25694.0], [27.0, 27889.5], [114.0, 26374.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[260.0, 2985.0], [11.0, 2198.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 278.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 27889.5, "series": [{"data": [[1.0, 18656.0], [65.0, 24750.0], [16.0, 19702.0], [278.0, 25694.0], [27.0, 27889.5], [114.0, 26374.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[260.0, 0.0], [11.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 278.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.68042342E12, "maxY": 12.9, "series": [{"data": [[1.68042348E12, 0.43333333333333335], [1.68042342E12, 12.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042348E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68042342E12, "maxY": 8.816666666666666, "series": [{"data": [[1.68042342E12, 0.8666666666666667]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.68042342E12, 1.6666666666666667]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.68042348E12, 8.816666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68042342E12, 0.016666666666666666]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.68042342E12, 1.9666666666666666]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68042348E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.516666666666667, "minX": 1.68042342E12, "maxY": 8.816666666666666, "series": [{"data": [[1.68042342E12, 4.516666666666667]], "isOverall": false, "label": "Test Fragment-failure", "isController": true}, {"data": [[1.68042348E12, 8.816666666666666]], "isOverall": false, "label": "Test Fragment-success", "isController": true}, {"data": [[1.68042342E12, 4.516666666666667]], "isOverall": false, "label": "Login-failure", "isController": false}, {"data": [[1.68042348E12, 8.816666666666666]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042348E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 9.033333333333333, "minX": 1.68042342E12, "maxY": 17.633333333333333, "series": [{"data": [[1.68042348E12, 17.633333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.68042342E12, 9.033333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68042348E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

